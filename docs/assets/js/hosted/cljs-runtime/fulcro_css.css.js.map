{"version":3,"file":"fulcro_css.css.js","sources":["fulcro_css/css.cljc"],"mappings":"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","names":["fulcro-css.css/cssify","str","clojure.string/replace","fulcro-css.css/fq-component","comp-class","temp__5455__auto__","nm","var_args","G__34264","fulcro-css.css/local-class","js/Error","cljs.core/name","fulcro-css.css/set-classname","m","subclasses","cljs.core/clj->js","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","x__4211__auto__","m__4212__auto__","fulcro-css/css.local-rules","goog/typeOf","cljs.core/missing-protocol","fulcro-css/css.include-children","fulcro-css.css/CSS","fulcro-css.css/local-rules","this","fulcro-css.css/include-children","fulcro-css/css.global-rules","fulcro-css.css/Global","fulcro-css.css/global-rules","fulcro-css.css/CSS?","x","cljs.core/PROTOCOL_SENTINEL","fulcro-css.css/Global?","fulcro-css.css/get-global-rules","component","fulcro-css.css/get-local-rules","fulcro-css.css/prefixed-name?","cljs.core/re-matches","fulcro-css.css/get-prefix","vec__34349","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","prefix","fulcro-css.css/prefixed-keyword?","kw","and__3911__auto__","cljs.core/Keyword","fulcro-css.css/remove-prefix","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/count","fulcro-css.css/remove-prefix-kw","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","fulcro-css.css/get-includes","fulcro-css.css/get-nested-includes","direct-children","cljs.core/empty?","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","p1__34366#","p2__34367#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","fulcro-css.css/localize-name","comp","no-prefix","G__34372","fulcro_css.css.local_class.cljs$core$IFn$_invoke$arity$2","fulcro-css.css/localize-kw","fulcro-css.css/kw->localized-classname","G__34401","fulcro-css.css/selector?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","garden/selectors.CSSSelector","cljs.core/type","fulcro-css.css/localize-selector","selector","val","split-cns-selectors","clojure.string.split.cljs$core$IFn$_invoke$arity$2","garden.selectors/selector","clojure.string.join.cljs$core$IFn$_invoke$arity$2","p1__34410#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","fulcro-css.css/localize-css","clojure.walk/postwalk","ele","fulcro-css.css/get-css-rules","fulcro-css.css/get-css","own-rules","nested-children","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","nested-children-rules","p1__34421#","p2__34422#","cljs.core.into.cljs$core$IFn$_invoke$arity$2","fulcro-css.css/get-selector-keywords","classnames","p1__34426#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/keyword","fulcro-css.css/get-class-keys","rules","flattened-rules","cljs.core/flatten","selectors","prefixed-kws","fulcro-css.css/get-classnames","local-class-keys","global-class-keys","local-classnames","cljs.core/zipmap","p1__34437#","global-classnames","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","fulcro-css.css/raw-css","garden.core.css.cljs$core$IFn$_invoke$arity$variadic","fulcro-css.css/style-element","js/React.createElement","fulcro-css.css/remove-from-dom","id","old-element","js/document","parent","fulcro-css.css/upsert-css","root-component","style-ele"],"sourcesContent":["(ns fulcro-css.css\n  (:require [cljs.tagged-literals]\n            [clojure.string :as str]\n            [clojure.walk :as walk]\n            [garden.core :as g]\n            [garden.selectors :as gs]))\n\n;; from core\n(defn cssify\n  \"Replaces slashes and dots with underscore.\"\n  [str] (when str (str/replace str #\"[./]\" \"_\")))\n\n(defn fq-component [comp-class]\n  #?(:clj  (if (nil? (meta comp-class))\n             (str/replace (.getName comp-class) #\"[_]\" \"-\")\n             (str (:component-ns (meta comp-class)) \"/\" (:component-name (meta comp-class))))\n     :cljs (if-let [nm (.. comp-class -displayName)]\n             nm\n             \"unknown/unknown\")))\n\n(defn local-class\n  \"Generates a string name of a localized CSS class. This function combines the fully-qualified name of the given class\n     with the (optional) specified name.\"\n  ([comp-class]\n   (str (cssify (fq-component comp-class))))\n  ([comp-class nm]\n   (str (cssify (fq-component comp-class)) \"__\" (name nm))))\n\n(defn set-classname\n  [m subclasses]\n  #?(:clj  (-> m\n             (assoc :className subclasses)\n             (dissoc :class))\n     :cljs (cljs.core/clj->js (-> m\n                                (assoc :className subclasses)\n                                (dissoc :class)))))\n\n;; css\n\n(defprotocol CSS\n  (local-rules [this] \"Specifies the component's local CSS rules\")\n  (include-children [this] \"Specifies the components (typically direct children) whose CSS should be included.\"))\n\n(defprotocol Global\n  (global-rules [this] \"DEPRECATED. Will be removed in a future release. Do not use for new applications. Use the `$` prefix instead.\"))\n\n#?(:clj (defn implements-protocol?\n          [x protocol protocol-key]\n          (if (fn? x)\n            (some? (-> x meta protocol-key))\n            (extends? protocol (class x)))))\n\n(defn CSS?\n  \"Returns true if the given component has css\"\n  [x]\n  #?(:clj  (implements-protocol? x CSS :local-rules)\n     :cljs (implements? CSS x)))\n\n(defn Global?\n  \"Returns true if the component has global rules\"\n  [x]\n  #?(:clj  (implements-protocol? x Global :global-rules)\n     :cljs (implements? Global x)))\n\n(defn get-global-rules\n  \"Get the *raw* value from the global-rules of a component.\"\n  [component]\n  (if (Global? component)\n    #?(:clj  ((:global-rules (meta component)) component)\n       :cljs (global-rules component))\n    []))\n\n(defn get-local-rules\n  \"Get the *raw* value from the local-rules of a component.\"\n  [component]\n  (if (CSS? component)\n    #?(:clj  ((:local-rules (meta component)) component)\n       :cljs (local-rules component))\n    []))\n\n(defn- prefixed-name?\n  \"Returns true if the given string starts with one of [. $ &$ &.]\"\n  [nm]\n  (some? (re-matches #\"(\\.|\\$|&\\.|&\\$).*\" nm)))\n\n(defn- get-prefix\n  \"Returns the prefix of a string. [. $ &$ &.]\"\n  [nm]\n  (let [[_ prefix] (re-matches #\"(\\.|\\$|&\\.|&\\$).*\" nm)]\n    prefix))\n\n(defn- prefixed-keyword?\n  \"Returns true if the given keyword starts with one of [. $ &$ &.]\"\n  [kw]\n  (and (keyword? kw)\n    (prefixed-name? (name kw))))\n\n(defn- remove-prefix\n  \"Removes the prefix of a string.\"\n  [nm]\n  (subs nm (count (get-prefix nm))))\n\n(defn- remove-prefix-kw\n  \"Removes the prefix of a keyword.\"\n  [kw]\n  (keyword (remove-prefix (name kw))))\n\n(defn get-includes\n  \"Returns the list of components from the include-children method of a component\"\n  [component]\n  (if (CSS? component)\n    #?(:clj  ((:include-children (meta component)) component)\n       :cljs (include-children component))\n    []))\n\n(defn get-nested-includes\n  \"Recursively finds all includes starting at the given component.\"\n  [component]\n  (let [direct-children (get-includes component)]\n    (if (empty? direct-children)\n      []\n      (concat direct-children (reduce #(concat %1 (get-nested-includes %2)) [] direct-children)))))\n\n(defn- localize-name\n  [nm comp]\n  (let [no-prefix (remove-prefix nm)\n        prefix    (get-prefix nm)]\n    (case prefix\n      (\".\" \"&.\") (str prefix (local-class comp (keyword no-prefix)))\n      \"$\" (str \".\" no-prefix)\n      \"&$\" (str \"&.\" no-prefix))))\n\n(defn- localize-kw\n  [kw comp]\n  (keyword (localize-name (name kw) comp)))\n\n(defn- kw->localized-classname\n  \"Gives the localized classname for the given keyword.\"\n  [comp kw]\n  (let [nm        (name kw)\n        prefix    (get-prefix nm)\n        no-prefix (subs nm (count prefix))]\n    (case prefix\n      (\"$\" \"&$\") no-prefix\n      (\".\" \"&.\") (local-class comp no-prefix))))\n\n(defn- selector?\n  [x]\n  (= garden.selectors.CSSSelector (type x)))\n\n(defn localize-selector\n  [selector comp]\n  (let [val                 (:selector selector)\n        split-cns-selectors (str/split val #\" \")]\n    (gs/selector (str/join \" \" (map #(if (prefixed-name? %)\n                                       (localize-name % comp)\n                                       %)\n                                 split-cns-selectors)))))\n\n(defn localize-css\n  \"Converts prefixed keywords into localized keywords and localizes the values of garden selectors\"\n  [component]\n  (walk/postwalk (fn [ele]\n                   (cond\n                     (prefixed-keyword? ele) (localize-kw ele component)\n                     (selector? ele) (localize-selector ele component)\n                     :otherwise ele)) (get-local-rules component)))\n\n(defn- get-css-rules\n  \"Gets the local and global rules from the given component.\"\n  [component]\n  (concat (localize-css component)\n    (get-global-rules component)))\n\n(defn get-css\n  \"Recursively gets all global and localized rules (in garden notation) starting at the given component.\"\n  [component]\n  (let [own-rules             (get-css-rules component)\n        nested-children       (distinct (get-nested-includes component))\n        nested-children-rules (reduce #(into %1 (get-css-rules %2)) [] nested-children)]\n    (concat own-rules nested-children-rules)))\n\n(defn- get-selector-keywords\n  \"Gets all the keywords that are present in a selector\"\n  [selector]\n  (let [val        (:selector selector)\n        classnames (filter #(re-matches #\"[.$].*\" %) (str/split val #\" \"))]\n    (map keyword classnames)))\n\n(defn- get-class-keys\n  \"Gets all used classnames in from the given rules as keywords\"\n  [rules]\n  (let [flattened-rules (flatten rules)\n        selectors       (filter selector? flattened-rules)\n        prefixed-kws    (filter prefixed-keyword? flattened-rules)]\n    (distinct (concat (flatten (map get-selector-keywords selectors)) prefixed-kws))))\n\n\n(defn get-classnames\n  \"Returns a map from user-given CSS rule names to localized names of the given component.\"\n  [comp]\n  (let [local-class-keys  (get-class-keys (get-local-rules comp))\n        global-class-keys (map remove-prefix-kw (get-class-keys (get-global-rules comp)))\n        local-classnames  (zipmap (map remove-prefix-kw local-class-keys) (map #(kw->localized-classname comp %) local-class-keys))\n        global-classnames (zipmap global-class-keys (map name global-class-keys))]\n    (merge local-classnames global-classnames)))\n\n(defn raw-css\n  \"Returns a string that contains the raw CSS for the rules defined on the given component's sub-tree. This can be used for\n   server-side rendering of the style element, or in a `style` element as the :dangerouslySetInnerHTML/:html value:\n\n   (dom/style #js {:dangerouslySetInnerHTML #js {:__html (raw-css component)}})\n   \"\n  [component]\n  (g/css (get-css component)))\n\n#?(:cljs\n   (defn style-element\n     \"Returns a React Style element with the (recursive) CSS of the given component. Useful for directly embedding in your UI VDOM.\"\n     [component]\n     (js/React.createElement \"style\" #js {:dangerouslySetInnerHTML #js {:__html (g/css (get-css component))}})))\n\n#?(:cljs\n   (defn remove-from-dom \"Remove the given element from the DOM by ID\"\n     [id]\n     (if-let [old-element (.getElementById js/document id)]\n       (let [parent (.-parentNode old-element)]\n         (.removeChild parent old-element)))))\n\n#?(:cljs\n   (defn upsert-css\n     \"(Re)place the STYLE element with the provided ID on the document's DOM  with the co-located CSS of the specified component.\"\n     [id root-component]\n     (remove-from-dom id)\n     (let [style-ele (.createElement js/document \"style\")]\n       (set! (.-innerHTML style-ele) (g/css (get-css root-component)))\n       (.setAttribute style-ele \"id\" id)\n       (.appendChild (.-body js/document) style-ele))))\n\n"]}