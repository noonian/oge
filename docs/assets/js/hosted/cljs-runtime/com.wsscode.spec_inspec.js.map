{"version":3,"file":"com.wsscode.spec_inspec.js","sources":["com/wsscode/spec_inspec.cljc"],"mappings":";;;AAGA,yCAAA,zCAAOA,0FAAgBC;AAAvB,AACE,GAAI,AAACC,mCAAmBD;AAAGA;;AAA3B;;;AAEF,wCAAA,xCAAOE,wFAAeF;AAAtB,AACE,GAAI,AAACG,kCAAkBH;AAAGA;;AAA1B;;;AAEF,6CAAA,7CAAOI,kGAAoBC;AAA3B,AACE,GAAI,EAAK,AAACC,qBAAKD,WACN,kCAAAE,jCAAS,AAACC,gBAAMH;AACvBA;;AAFF;;;AAIF;;;oCAAA,pCAAMI,gFAEHJ;AAFH,AAGE,GAAI,AAACK,0BAAU,AAACC,2BAAYN;AAC1B,OAACO,qBAAOP;;AADV;;;AAGF;;;wCAAA,xCAAMQ,wFAEHC;AAFH,AAGE,GAAI,EAAK,AAACR,qBAAKQ,eACN,uEAAA,vEAACC,6CAAE,AAACP,gBAAMM;AACjB,OAACE,iBAAOF;;AACRA;;;AAEJ;;;4CAAA,5CAAMG,gGAEHZ;;AAFH,AAGE,IAAMa,IAAE,iBAAAC,mBAAI,AAACV,kCAAUJ;AAAf,AAAA,oBAAAc;AAAAA;;AAAA,IAAAA,uBACI,AAACjB,sCAAcG;AADnB,AAAA,oBAAAc;AAAAA;;AAEI,OAACf,2CAAmBC;;;;AAFhC,AAGE,IAAMe,WAAS,AAACP,sCAAWK;AAA3B,AACE,GAAI,AAACjB,mCAAmBmB;AACtB,eAAOA;;;;AACPA;;;;;AAER;;;sCAAA,tCAAMC,oFAEHC;AAFH,AAGE,IAAAH,mBAAI,uCAAI,AAACI,yBAAWD,hEAAGvB;AAAvB,AAAA,oBAAAoB;AAAAA;;AACI,8CAAI,AAACN,sCAAW,AAACJ,kCAAUa,/GAAIvB;;;AAErC;;;0CAAA,1CAAMyB,4FAEHC,SAASH;;AAFZ,AAGE,IAAAI,qBAAW,AAACE,4CAAIH,SAASH;AAAzB,AAAA,oBAAAI;AAAA,QAAAA,JAASC;AAAT,AACEA;;AACA,IAAAE,qBAAkB,uCAAI,AAACR,oCAAYC,3EAAGvB;AAAtC,AAAA,oBAAA8B;AAAA,AAAA,aAAAA,TAAWC;AAAX,AACE,eAAOL;eAASK;;;;;AADlB;;;;;;AAGJ,AAAAC,yBAAA,4HAAA,eAAA,yFAAA,qDAAA,eAAA,qFAAA,6DAAA,2EAAA,gDAAA,uGAAA,mDAAA,4EAAA,AAAAC,2BAAA,AAAAC,wDAAA,eAAA,qFAAA,6DAAA,2EAAA,gDAAA,wuBAAA,KAAA,MAAA,eAAA,qFAAA,6DAAA,2EAAA,gDAAA,uGAAA,AAAAA,wDAAA,gGAAA,KAAA,MAAA,2EAAA,KAAA,KAAA,vwCACQ,AAAAC,yBAAA,mFAAA,6DAAA,wDAAA,mJAAA,mFAAA,2EAAA,9NAAiBC,qBAAQlC,y0BAC1BmC","names":["com.wsscode.spec-inspec/accept-keyword","x","cljs.core/qualified-keyword?","com.wsscode.spec-inspec/accept-symbol","cljs.core/qualified-symbol?","com.wsscode.spec-inspec/accept-symbol-call","spec","cljs.core/seq?","cljs.core/Symbol","cljs.core/first","com.wsscode.spec-inspec/safe-form","cljs.core/contains?","cljs.spec.alpha/registry","cljs.spec.alpha/form","com.wsscode.spec-inspec/form->spec","and-spec","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/second","com.wsscode.spec-inspec/spec->root-sym","f","or__3922__auto__","spec-def","com.wsscode.spec-inspec/parent-spec","k","cljs.spec.alpha/get-spec","com.wsscode.spec-inspec/registry-lookup","registry","temp__5455__auto__","c","cljs.core.get.cljs$core$IFn$_invoke$arity$2","temp__5457__auto__","parent","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/cat-impl","cljs.core/map?","cljs.core/any?"],"sourcesContent":["(ns com.wsscode.spec-inspec\n  (:require [clojure.spec.alpha :as s]))\n\n(defn- accept-keyword [x]\n  (if (qualified-keyword? x) x))\n\n(defn- accept-symbol [x]\n  (if (qualified-symbol? x) x))\n\n(defn- accept-symbol-call [spec]\n  (if (and (seq? spec)\n           (symbol? (first spec)))\n    spec))\n\n(defn safe-form\n  \"Return the spec form or nil.\"\n  [spec]\n  (if (contains? (s/registry) spec)\n    (s/form spec)))\n\n(defn form->spec\n  \"Return the spec, or first spec when input is a s/and.\"\n  [and-spec]\n  (if (and (seq? and-spec)\n           (= (first and-spec) `s/and))\n    (second and-spec)\n    and-spec))\n\n(defn spec->root-sym\n  \"Determine the main spec symbol from a spec form.\"\n  [spec]\n  (let [f (or (safe-form spec)\n              (accept-symbol spec)\n              (accept-symbol-call spec))]\n    (let [spec-def (form->spec f)]\n      (if (qualified-keyword? spec-def)\n        (recur spec-def)\n        spec-def))))\n\n(defn parent-spec\n  \"Look up for the parent coercer using the spec hierarchy.\"\n  [k]\n  (or (-> (s/get-spec k) accept-keyword)\n      (-> (form->spec (safe-form k)) accept-keyword)))\n\n(defn registry-lookup\n  \"Look for the key in registry, if not found try key spec parent recursively.\"\n  [registry k]\n  (if-let [c (get registry k)]\n    c\n    (when-let [parent (-> (parent-spec k) accept-keyword)]\n      (recur registry parent))))\n\n(s/fdef registry-lookup\n  :args (s/cat :registry map? :k qualified-keyword?)\n  :ret any?)\n"]}