{"version":3,"file":"fulcro.client.mutations.js","sources":["fulcro/client/mutations.cljc"],"mappings":"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","names":["method-table__4382__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4383__auto__","method-cache__4384__auto__","cached-hierarchy__4385__auto__","hierarchy__4386__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","fulcro.client.mutations/mutate","fulcro.client.primitives/dispatch","fulcro.client.mutations/post-mutate","cljs.core/-add-method","env","k","p","env42370","_","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","map__42371","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","params","state","ref","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic","e42373","js/Error","e__33343__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update-in","st","env42375","p__42376","map__42377","map__42379","field","e42381","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/not","p__42383","map__42384","target","e42386","fulcro.client.mutations/toggle!","comp","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","fulcro.client.primitives/compressible-transact!","fulcro.client.mutations/set-value!","component","value","fulcro.client.mutations/ensure-integer","v","rv","js/parseInt","js/isNaN","fulcro.client.mutations/target-value","evt","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","fulcro.client.mutations/set-integer!","p__42390","map__42391","seq42387","G__42388","cljs.core/first","cljs.core/next","G__42389","self__4486__auto__","event","and__3911__auto__","or__3922__auto__","fulcro.client.mutations/set-string!","p__42399","map__42400","seq42396","G__42397","G__42398","env42414","p__42415","map__42416","map__42420","queryid","query","reconciler","fulcro.client.primitives/set-query*","fulcro.client.impl.protocols/reindex!","env42434","p__42435","map__42437","data-tree","remote","map__42442","map__42443","tempids","config","fulcro.client.primitives/app-state","root-component","fulcro.client.primitives/app-root","root-query","cljs.core/deref","fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$2","keys","next","fulcro.client.primitives/merge*","fulcro.client.impl.protocols.queue_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/reset!","temp__5455__auto__","migrate","cljs.core/select-keys","G__42447","G__42448","G__42449","fulcro.client.impl.protocols.reconcile_BANG_.cljs$core$IFn$_invoke$arity$2","env42458","map__42468","ast","history","fulcro.client.primitives/get-history","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","e42470","cljs.core/count","fulcro.client.mutations/returning","class","cljs.core/Symbol","map__42479","key","query'","G__42481","p1__42476#","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2","cljs.core/meta","fulcro.client.primitives/query->ast1","fulcro.client.mutations/with-target","map__42491","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/with-meta","fulcro.client.mutations/with-params","fulcro.client.mutations/is-call?","expr","cljs.core/list?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/map?","cljs.core/second","fulcro.client.mutations/with-progressive-updates","progress-mutation","cljs.core.update.cljs$core$IFn$_invoke$arity$6","cljs.core/vary-meta","fulcro.client.mutations/progressive-update-transaction","network-transaction","progress","add-progress","fulcro.client.impl.parser/expr->ast","ast-2","cljs.core.update.cljs$core$IFn$_invoke$arity$5","fulcro.client.impl.parser.ast__GT_expr.cljs$core$IFn$_invoke$arity$1","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","m","G__42515","fulcro.client.mutations/with-abort-id","id","fulcro.client.mutations/abort-ids","tx","cljs.core/set","G__42520"],"sourcesContent":["(ns fulcro.client.mutations\n  #?(:cljs (:require-macros fulcro.client.mutations))\n  (:require\n    [clojure.spec.alpha :as s]\n    [fulcro.util :refer [conform! join-key join-value join?]]\n    [fulcro.logging :as log]\n    [fulcro.client.primitives :as prim]\n    #?(:cljs [cljs.loader :as loader])\n    [fulcro.client.impl.protocols :as p]\n    [fulcro.client.impl.parser :as parser]))\n\n\n#?(:clj (s/def ::action (s/cat\n                          :action-name (fn [sym] (= sym 'action))\n                          :action-args (fn [a] (and (vector? a) (= 1 (count a))))\n                          :action-body (s/+ (constantly true)))))\n\n#?(:clj (s/def ::remote (s/cat\n                          :remote-name symbol?\n                          :remote-args (fn [a] (and (vector? a) (= 1 (count a))))\n                          :remote-body (s/+ (constantly true)))))\n\n#?(:clj (s/def ::mutation-args (s/cat\n                                 :sym symbol?\n                                 :doc (s/? string?)\n                                 :arglist vector?\n                                 :action (s/? #(and (list? %) (= 'action (first %))))\n                                 :remote (s/* #(and (list? %) (not= 'action (first %)))))))\n\n#?(:clj\n   (defmacro ^{:doc      \"Define a Fulcro mutation.\n\n                       The given symbol will be prefixed with the namespace of the current namespace, as if\n                       it were def'd into the namespace.\n\n                       The arglist should be the *parameter* arglist of the mutation, NOT the complete argument list\n                       for the equivalent defmethod. For example:\n\n                          (defmutation boo [{:keys [id]} ...) => (defmethod m/mutate *ns*/boo [{:keys [state ref]} _ {:keys [id]}] ...)\n\n                       The mutation may include any combination of action and any number of remotes (by the remote name).\n\n                       If `action` is supplied, it must be first.\n\n                       (defmutation boo \\\"docstring\\\" [params-map]\n                         (action [env] ...)\n                         (my-remote [env] ...)\n                         (other-remote [env] ...)\n                         (remote [env] ...))\n\n                       There is special support for placing the action as a var in the namespace. This support\n                       only work when using a plain symbol. Simple add `:intern` metadata to the symbol. If\n                       the metadata is true, it will intern the symbol as-is. It it is a string, it will suffix\n                       the symbol with that string. If it is a symbol, it will use that symbol. The interned\n                       symbol will act like the action side of the mutation, and has the signature:\n                       `(fn [env params])`. This is also useful in devcards for using mkdn-pprint-source on mutations,\n                       and should give you docstring and navigation support from nREPL.\n                       \"\n               :arglists '([sym docstring? arglist action]\n                            [sym docstring? arglist action remote]\n                            [sym docstring? arglist remote])} defmutation\n     [& args]\n     (let [{:keys [sym doc arglist action remote]} (conform! ::mutation-args args)\n           fqsym           (if (namespace sym)\n                             sym\n                             (symbol (name (ns-name *ns*)) (name sym)))\n           intern?         (-> sym meta :intern)\n           interned-symbol (cond\n                             (string? intern?) (symbol (namespace fqsym) (str (name fqsym) intern?))\n                             (symbol? intern?) intern?\n                             :else fqsym)\n           {:keys [action-args action-body]} (if action\n                                               (conform! ::action action)\n                                               {:action-args ['env] :action-body []})\n           remotes         (if (seq remote)\n                             (map #(conform! ::remote %) remote)\n                             [{:remote-name :remote :remote-args ['env] :remote-body [false]}])\n           env-symbol      (gensym \"env\")\n           doc             (or doc \"\")\n           remote-blocks   (map (fn [{:keys [remote-name remote-args remote-body]}]\n                                  `(let [~(first remote-args) ~env-symbol]\n                                     {~(keyword (name remote-name)) (do ~@remote-body)})\n                                  ) remotes)\n           multimethod     `(defmethod fulcro.client.mutations/mutate '~fqsym [~env-symbol ~'_ ~(first arglist)]\n                              (merge\n                                (let [~(first action-args) ~env-symbol]\n                                  {:action (fn [] ~@action-body)})\n                                ~@remote-blocks))]\n       (if intern?\n         `(def ~interned-symbol ~doc\n            (do\n              ~multimethod\n              (fn [~(first action-args) ~(first arglist)]\n                ~@action-body)))\n         multimethod))))\n\n;; Add methods to this to implement your local mutations\n(defmulti mutate prim/dispatch)\n\n;; Add methods to this to implement post mutation behavior (called after each mutation): WARNING: EXPERIMENTAL.\n(defmulti post-mutate prim/dispatch)\n(defmethod post-mutate :default [env k p] nil)\n\n#?(:cljs\n   (fulcro.client.mutations/defmutation set-props\n     \"\n     mutation: A convenience helper, generally used 'bit twiddle' the data on a particular database table (using the component's ident).\n     Specifically, merge the given `params` into the state of the database object at the component's ident.\n     In general, it is recommended this be used for ui-only properties that have no real use outside of the component.\n     \"\n     [params]\n     (action [{:keys [state ref]}]\n       (when (nil? ref) (log/error \"ui/set-props requires component to have an ident.\"))\n       (swap! state update-in ref (fn [st] (merge st params))))))\n\n#?(:cljs\n   (fulcro.client.mutations/defmutation toggle\n     \"mutation: A helper method that toggles the true/false nature of a component's state by ident.\n      Use for local UI data only. Use your own mutations for things that have a good abstract meaning. \"\n     [{:keys [field]}]\n\n     (action [{:keys [state ref]}]\n       (when (nil? ref) (log/error \"ui/toggle requires component to have an ident.\"))\n       (swap! state update-in (conj ref field) not))))\n\n(defmethod mutate :default [{:keys [target]} k _]\n  (when (nil? target)\n    (log/error \"Unknown app state mutation. Have you required the file with your mutations?\" k)))\n\n\n(defn toggle!\n  \"Toggle the given boolean `field` on the specified component. It is recommended you use this function only on\n  UI-related data (e.g. form checkbox checked status) and write clear top-level transactions for anything more complicated.\"\n  [comp field]\n  (prim/compressible-transact! comp `[(toggle {:field ~field})]))\n\n(defn set-value!\n  \"Set a raw value on the given `field` of a `component`. It is recommended you use this function only on\n  UI-related data (e.g. form inputs that are used by the UI, and not persisted data). Changes made via these\n  helpers are compressed in the history.\"\n  [component field value]\n  (prim/compressible-transact! component `[(set-props ~{field value})]))\n\n#?(:cljs\n   (defn- ensure-integer\n     \"Helper for set-integer!, use that instead. It is recommended you use this function only on UI-related\n     data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else.\"\n     [v]\n     (let [rv (js/parseInt v)]\n       (if (js/isNaN v) 0 rv)))\n   :clj\n   (defn- ensure-integer [v] (Integer/parseInt v)))\n\n(defn target-value [evt] (.. evt -target -value))\n\n(defn set-integer!\n  \"Set the given integer on the given `field` of a `component`. Allows same parameters as `set-string!`.\n\n   It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n   and write clear top-level transactions for anything else. Calls to this are compressed in history.\"\n  [component field & {:keys [event value]}]\n  (assert (and (or event value) (not (and event value))) \"Supply either :event or :value\")\n  (let [value (ensure-integer (if event (target-value event) value))]\n    (set-value! component field value)))\n\n(defn set-string!\n  \"Set a string on the given `field` of a `component`. The string can be literal via named parameter `:value` or\n  can be auto-extracted from a UI event using the named parameter `:event`\n\n  Examples\n\n  ```\n  (set-string! this :ui/name :value \\\"Hello\\\") ; set from literal (or var)\n  (set-string! this :ui/name :event evt) ; extract from UI event target value\n  ```\n\n  It is recommended you use this function only on UI-related\n  data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else.\n  Calls to this are compressed in history.\"\n  [component field & {:keys [event value]}]\n  (assert (and (or event value) (not (and event value))) \"Supply either :event or :value\")\n  (let [value (if event (target-value event) value)]\n    (set-value! component field value)))\n\n#?(:cljs\n   (fulcro.client.mutations/defmutation set-query!\n     \"The mutation version of `prim/set-query!`. This version requires queryid as an input string.\n\n     queryid (required) - A string query ID. Can be obtained via (prim/query-id Class qualifier)\n     query - The new query\n     params - The new query params\n\n     One of query or params is required.\n     \"\n     [{:keys [queryid query params]}]\n     (action [{:keys [reconciler state]}]\n       (swap! state prim/set-query* queryid {:query query :params params})\n       (when reconciler\n         (p/reindex! reconciler)))))\n\n#?(:cljs\n   (fulcro.client.mutations/defmutation merge!\n     \"The mutation version of prim/merge!\"\n     [{:keys [query data-tree remote] :as params}]\n     (action [env]\n       (let [{:keys [reconciler state]} env\n             config         (:config reconciler)\n             state          (prim/app-state reconciler)\n             root-component (prim/app-root reconciler)\n             root-query     (when-not query (prim/get-query root-component @state))\n             {:keys [keys next ::prim/tempids]} (prim/merge* reconciler @state data-tree query)]\n         (p/queue! reconciler keys remote)\n         (reset! state\n           (if-let [migrate (:migrate config)]\n             (merge (select-keys next [:fulcro.client.primitives/queries])\n               (migrate next (or query root-query) tempids))\n             next))\n         (when-not (nil? remote)\n           (p/reconcile! reconciler remote))))))\n\n#?(:cljs\n   (fulcro.client.mutations/defmutation send-history\n     \"Send the current app history to the server. The params can include anything and will be merged with a `:history` entry.\n     Your server implementation of `fulcro.client.mutations/send-history` should record the data of history for\n     retrieval by a root query for :support-request, which should at least include the stored :history and optionally a\n     :comment from the user. You should add whatever identity makes sense for tracking.\"\n     [params]\n     (remote [{:keys [reconciler state ast]}]\n       (let [history (-> reconciler (prim/get-history) deref)\n             params  (assoc params :history history)]\n         (log/debug \"Sending \" (count (:history-steps history)) \" history steps to the server.\")\n         (assoc ast :params params)))))\n\n(defn returning\n  \"Indicate the the remote operation will return a value of the given component type. The server-side mutation need\n  simply return a tree matching that component's query and it will auto-merge into state. The ast param MUST be a query ast\n  containing exactly one mutation that is *not* already a mutation join. The state is required for looking up dynamic queries, and\n  may be nil if you use only static queries.\"\n  [ast state class]\n  {:pre [(symbol? (-> ast :key))]}\n  (let [{:keys [key params query]} ast]\n    (let [query' (cond-> (prim/get-query class state)\n                   query (vary-meta #(merge (meta query) %)))]\n      (prim/query->ast1 `[{(~key ~params) ~query'}]))))\n\n(defn with-target\n  \"Set's a target for the return value from the mutation to be merged into. This can be combined with returning to define\n  a path to insert the new entry.\"\n  [ast target]\n  {:pre [(symbol? (-> ast :key))]}\n  (let [{:keys [key params query]} ast\n        query' (if query\n                 (vary-meta query assoc :fulcro.client.impl.data-fetch/target target)\n                 (with-meta '[*] {:fulcro.client.impl.data-fetch/target target}))]\n    (prim/query->ast1 `[{(~key ~params) ~query'}])))\n\n(defn with-params\n  \"Modify an AST containing a single mutation, changing it's parameters to those given as an argument.\"\n  [ast params]\n  (assoc ast :params params))\n\n(defn is-call? [expr]\n  (and (list? expr)\n    (symbol? (first expr))\n    (or (= 1 (count expr))\n      (map? (second expr)))))\n\n(defn with-progressive-updates\n  \"Modifies the AST node to enable progressive updates (if available) about the response download progress.\n  `progress-mutation` is a call expression (e.g. `(f {})`) for a mutation, which can include the normal parameter\n  map. This mutation mutation will be triggered on each progress step. It will receive\n  one call when the request is sent, followed by zero or more progress events from the low-level network layer,\n  and one call when the request is done (with any status). The first and last calls are guaranteed.\n\n  An extra parameter keyed at `fulcro.client.network/progress` will be included that contains a :progress key\n  (:sending, :receiving, :complete, or :failed), and a status that will be dependent on the network implementation\n  (e.g. a google XhrIO progress event).\"\n  [ast progress-mutation]\n  {:pre [(symbol? (-> ast :key)) (is-call? progress-mutation)]}\n  (update ast :key vary-meta assoc :fulcro.client.network/progress-mutation progress-mutation))\n\n(defn progressive-update-transaction\n  \"Given a remote transaction containing one or more remote mutations, returns a local transaction of zero or\n  more mutations that should be run to provide a progress update. The `progress` argument will be added to\n  each resulting mutation in parameters as `:fulcro.client.network/progress`.\"\n  [network-transaction progress]\n  (let [add-progress (fn [expr]\n                       (let [ast   (parser/expr->ast expr)\n                             ast-2 (update ast :params assoc :fulcro.client.network/progress progress)]\n                         (parser/ast->expr ast-2)))]\n    (vec (keep\n           (fn [m] (some-> m seq first meta :fulcro.client.network/progress-mutation add-progress))\n           network-transaction))))\n\n(defn with-abort-id\n  \"Modifies the mutation to enable network-level aborts. The id is a user-defined ID (any type) that identifies\n  things that can be aborted on networking. IDs need not be unique per node, though aborting an ID that refers to\n  more than one in-flight request will abort them all.\"\n  [ast id]\n  {:pre [(symbol? (-> ast :key))]}\n  (update ast :key vary-meta assoc :fulcro.client.network/abort-id id))\n\n(defn abort-ids\n  \"Returns a set of abort IDs from the given transaction.\"\n  [tx]\n  (set (keep\n         (fn [m] (some-> m seq first meta :fulcro.client.network/abort-id))\n         tx)))\n"]}