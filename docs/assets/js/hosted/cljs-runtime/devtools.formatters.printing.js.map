{"version":3,"file":"devtools.formatters.printing.js","sources":["devtools/formatters/printing.cljs"],"mappings":"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","names":["devtools.formatters.printing/markup?","value","cljs.core/meta","devtools.formatters.printing/mark-as-markup","cljs.core/with-meta","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","devtools.formatters.printing/build-markup","seq28833","G__28834","cljs.core/first","cljs.core/next","G__28835","self__4486__auto__","markup-db","fn-key","args","f","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/Error","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","devtools.formatters.printing/wrap-value-as-reference-if-needed","or__3922__auto__","devtools.formatters.helpers/directly-printable?","devtools.formatters.printing.build_markup.cljs$core$IFn$_invoke$arity$variadic","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","devtools.formatters.printing/TemplateWriter","devtools.formatters.printing/->TemplateWriter","group","_","a","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","o","devtools.formatters.printing/make-template-writer","devtools.formatters.printing/already-reference?","temp__5455__auto__","tag","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","devtools.formatters.printing/wrap-group-in-reference-if-needed","obj","and__3911__auto__","cljs.core/not","devtools.formatters.helpers/expandable?","devtools.formatters.helpers/abbreviated?","expandable-markup","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","surrogate-markup","reference-markup","devtools.formatters.printing/wrap-group-in-circular-warning-if-needed","circular?","devtools.formatters.printing/wrap-group-in-meta-if-needed","p1__28868#","devtools.formatters.helpers/should-render?","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devtools.formatters.printing/detect-edge-case-and-patch-it","cljs.core/count","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","devtools.formatters.printing/post-process-printed-output","output-group","devtools.formatters.printing/alt-printer-job","writer","opts","map__28878","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core/native-satisfies?","_e__27499__auto__","e28882","devtools.format/IDevtoolsFormat","e28884","devtools.protocols/IFormat","atomic-markup","default-impl","inner-opts","cljs.core/*print-level*","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","devtools.formatters.printing/alt-printer-impl","*current-state*28890","devtools.formatters.state/*current-state*","devtools.formatters.state/get-current-state","map__28891","devtools.formatters.state/is-circular?","inner-writer","devtools.formatters.state/push-object-to-current-history!","devtools.formatters.printing/managed-print","printer","devtools.prefs/pref","job-fn","managed-print-level","devtools.formatters.state/get-managed-print-level","*print-level*28894","p1__28893#","devtools.formatters.state/update-current-state!","devtools.formatters.state/set-managed-print-level","devtools.formatters.printing/managed-print-via-writer","cljs.core/pr-seq-writer","devtools.formatters.printing/managed-print-via-protocol","cljs.core/-pr-writer"],"sourcesContent":["(ns devtools.formatters.printing\n  (:require-macros [devtools.oops :refer [safe-call]])\n  (:require [devtools.prefs :refer [pref]]\n            [devtools.format :refer [IDevtoolsFormat]]\n            [devtools.protocols :refer [ITemplate IGroup ISurrogate IFormat]]\n            [devtools.formatters.state :refer [push-object-to-current-history! *current-state* get-current-state\n                                               is-circular? get-managed-print-level set-managed-print-level\n                                               update-current-state!]]\n            [devtools.formatters.helpers :refer [cljs-value? expandable? abbreviated? directly-printable? should-render?]]))\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn markup? [value]\n  (::markup (meta value)))\n\n(defn mark-as-markup [value]\n  (with-meta value {::markup true}))\n\n(defn build-markup [markup-db fn-key & args]\n  (let [f (get markup-db fn-key)]\n    (assert f (str \"missing markup method in markup-db: \" fn-key))\n    (mark-as-markup (apply f args))))\n\n(defn wrap-value-as-reference-if-needed [markup-db value]\n  (if (or (directly-printable? value) (markup? value))\n    value\n    (build-markup markup-db :reference-surrogate value)))\n\n; -- TemplateWriter ---------------------------------------------------------------------------------------------------------\n\n(deftype TemplateWriter [^:mutable group markup-db]\n  Object\n  (merge [_ a] (set! group (concat group a)))\n  (get-group [_] group)\n  IWriter\n  (-write [_ o] (set! group (concat group [(wrap-value-as-reference-if-needed markup-db o)])))                                ; issue #21\n  (-flush [_] nil))\n\n(defn make-template-writer [markup-db]\n  (TemplateWriter. [] markup-db))\n\n; -- post-processing --------------------------------------------------------------------------------------------------------\n\n(defn already-reference? [group]\n  (if-let [tag (first (first group))]\n    (= tag \"reference\")))\n\n(defn wrap-group-in-reference-if-needed [group obj markup-db]\n  (if (and (not (already-reference? group))\n           (or (expandable? obj) (abbreviated? group)))\n    (let [expandable-markup (apply build-markup markup-db :expandable group)\n          surrogate-markup (build-markup markup-db :raw-surrogate obj expandable-markup :target)\n          reference-markup (build-markup markup-db :reference surrogate-markup)]\n      [reference-markup])\n    group))\n\n(defn wrap-group-in-circular-warning-if-needed [group markup-db circular?]\n  (if circular?\n    [(apply build-markup markup-db :circular-reference group)]\n    group))\n\n(defn wrap-group-in-meta-if-needed [group value markup-db]\n  (if (should-render? :render-metas value #(some? (meta %)))\n    [(apply (partial (:meta-wrapper markup-db) (meta value)) group)]\n    group))\n\n; default printer implementation can do this:\n;   :else (write-all writer \"#<\" (str obj) \">\")\n; we want to wrap stringified obj in a reference for further inspection\n;\n; this behaviour changed in https://github.com/clojure/clojurescript/commit/34c3b8985ed8197d90f441c46d168c4024a20eb8\n; newly functions and :else branch print \"#object [\" ... \"]\"\n;\n; in some situations obj can still be a clojurescript value (e.g. deftypes)\n; we have to implement a special flag to prevent infinite recursion\n; see https://github.com/binaryage/cljs-devtools/issues/2\n;     https://github.com/binaryage/cljs-devtools/issues/8\n(defn detect-edge-case-and-patch-it [group obj markup-db]\n  (cond\n    (or\n      (and (= (count group) 5) (= (nth group 0) \"#object[\") (= (nth group 4) \"\\\"]\"))                                          ; function case\n      (and (= (count group) 5) (= (nth group 0) \"#object[\") (= (nth group 4) \"]\"))                                            ; :else -constructor case\n      (and (= (count group) 3) (= (nth group 0) \"#object[\") (= (nth group 2) \"]\")))                                           ; :else -cljs$lang$ctorStr case\n    [(build-markup markup-db :native-reference obj)]\n\n    (and (= (count group) 3) (= (nth group 0) \"#<\") (= (str obj) (nth group 1)) (= (nth group 2) \">\"))                        ; old code prior r1.7.28\n    [(nth group 0) (build-markup :native-reference obj) (nth group 2)]\n\n    :else group))\n\n(defn post-process-printed-output [output-group obj markup-db circular?]\n  (-> output-group\n      (detect-edge-case-and-patch-it obj markup-db)                                                                           ; an ugly hack\n      (wrap-group-in-reference-if-needed obj markup-db)\n      (wrap-group-in-circular-warning-if-needed markup-db circular?)\n      (wrap-group-in-meta-if-needed obj markup-db)))\n\n; -- alternative printer ----------------------------------------------------------------------------------------------------\n\n(defn alt-printer-job [obj writer opts]\n  (let [{:keys [markup-db]} opts]\n    (if (or (safe-call satisfies? false IDevtoolsFormat obj)\n            (safe-call satisfies? false IFormat obj))                                                                         ; we have to wrap value in reference if detected IFormat\n      (-write writer (build-markup markup-db :reference obj))\n      (if-let [atomic-markup (build-markup markup-db :atomic obj)]\n        (-write writer atomic-markup)\n        (let [default-impl (:fallback-impl opts)\n              ; we want to limit print-level, at max-print-level level use maximal abbreviation e.g. [...] or {...}\n              inner-opts (if (= *print-level* 1) (assoc opts :print-length 0) opts)]\n          (default-impl obj writer inner-opts))))))\n\n(defn alt-printer-impl [obj writer opts]\n  (binding [*current-state* (get-current-state)]\n    (let [{:keys [markup-db]} opts\n          circular? (is-circular? obj)\n          inner-writer (make-template-writer (:markup-db opts))]\n      (push-object-to-current-history! obj)\n      (alt-printer-job obj inner-writer opts)\n      (.merge writer (post-process-printed-output (.get-group inner-writer) obj markup-db circular?)))))\n\n; -- common code for managed printing ---------------------------------------------------------------------------------------\n\n(defn managed-print [tag markup-db printer]\n  (let [writer (make-template-writer markup-db)\n        opts {:alt-impl     alt-printer-impl\n              :markup-db    markup-db\n              :print-length (pref :max-header-elements)\n              :more-marker  (pref :more-marker)}\n        job-fn #(printer writer opts)]\n    (if-let [managed-print-level (get-managed-print-level)]\n      (binding [*print-level* managed-print-level]\n        (update-current-state! #(set-managed-print-level % nil))                                                              ; reset managed-print-level so it does not propagate further down in expaded data\n        (job-fn))\n      (job-fn))\n    (concat [(pref tag)] (.get-group writer))))\n\n; -- public printing API ----------------------------------------------------------------------------------------------------\n\n(defn managed-print-via-writer [value tag markup-db]\n  (managed-print tag markup-db (fn [writer opts]\n                                 (pr-seq-writer [value] writer opts))))                                                       ; note we use pr-seq-writer becasue pr-writer is private for some reason\n\n(defn managed-print-via-protocol [value tag markup-db]\n  (managed-print tag markup-db (fn [writer opts]\n                                 (-pr-writer value writer opts))))\n"]}