{
"version":3,
"file":"module$com$wsscode$oge$ui$oge_mode.js",
"lineCount":7,
"mappings":"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",
"sources":["com/wsscode/oge/ui/oge-mode.js"],
"sourcesContent":["shadow$provide[\"module$com$wsscode$oge$ui$oge_mode\"] = function(global,process,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Author: Wilker Lucio\n * Branched from CodeMirror's Clojure mode (by Hans Engel, based on implementation by Koh Zi Han)\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"oge\", function (options) {\n    const BUILTIN = \"builtin\", COMMENT = \"comment\", STRING = \"string\", CHARACTER = \"string-2\",\n      ATOM = \"atom\", ATOM_IDENT = \"atom-ident\", ATOM_COMP = \"atom-composite\", NUMBER = \"number\", BRACKET = \"bracket\", KEYWORD = \"keyword\", VAR = \"constiable\";\n    const INDENT_WORD_SKIP = options.indentUnit || 2;\n    const NORMAL_INDENT_UNIT = options.indentUnit || 2;\n\n    const tests = {\n      digit: /\\d/,\n      digit_or_colon: /[\\d:]/,\n      hex: /[0-9a-f]/i,\n      sign: /[+-]/,\n      exponent: /e/i,\n      keyword_char: /[^\\s\\(\\[\\;\\)\\]]/,\n      symbol: /[\\w*+!\\-\\._?:<>\\/\\xa1-\\uffff]/,\n      block_indent: /^(?:def|with)[^\\/]+$|\\/(?:def|with)/\n    };\n\n    function pushStack(state, stack) {\n      stack.prev = state.pathStack;\n      state.pathStack = stack;\n      state.mode = stack.mode;\n    }\n\n    function popStack(state) {\n      state.pathStack = state.pathStack.prev;\n      state.mode = state.pathStack.mode;\n    }\n\n    function readNumber(ch, stream){\n      // hex\n      if ( ch === '0' && stream.eat(/x/i) ) {\n        stream.eatWhile(tests.hex);\n        return true;\n      }\n\n      // leading sign\n      if ( ( ch == '+' || ch == '-' ) && ( tests.digit.test(stream.peek()) ) ) {\n        stream.eat(tests.sign);\n        ch = stream.next();\n      }\n\n      if ( tests.digit.test(ch) ) {\n        stream.eat(ch);\n        stream.eatWhile(tests.digit);\n\n        if ( '.' == stream.peek() ) {\n          stream.eat('.');\n          stream.eatWhile(tests.digit);\n        } else if ('/' == stream.peek() ) {\n          stream.eat('/');\n          stream.eatWhile(tests.digit);\n        }\n\n        if ( stream.eat(tests.exponent) ) {\n          stream.eat(tests.sign);\n          stream.eatWhile(tests.digit);\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    // Eat character that starts after backslash \\\n    function eatCharacter(stream) {\n      let first = stream.next();\n      // Read special literals: backspace, newline, space, return.\n      // Just read all lowercase letters.\n      if (first && first.match(/[a-z]/) && stream.match(/[a-z]+/, true)) {\n        return;\n      }\n      // Read unicode character: \\u1000 \\uA0a1\n      if (first === \"u\") {\n        stream.match(/[0-9a-z]{4}/i, true);\n      }\n    }\n\n    function readSymbol(stream) {\n      stream.eatWhile(tests.symbol);\n\n      return ATOM;\n    }\n\n    function readJoin(stream, state) {\n      pushStack(state, {mode: \"join\", indent: nextIndent(stream)});\n\n      return BRACKET;\n    }\n\n    function readIdent(stream, state) {\n      pushStack(state, {mode: \"ident\", indent: nextIndent(stream)});\n\n      return BRACKET;\n    }\n\n    function readParamExp(stream, state) {\n      pushStack(state, {mode: \"param-exp\", indent: nextIndent(stream)});\n\n      return BRACKET;\n    }\n\n    function nextIndent(stream) {\n      return stream.column() + stream.current().length;\n    }\n\n    function makeToken(stream, state) {\n      const string = stream.current();\n      const start = stream.column();\n      const end = start + string.length;\n\n      return {state: state, string: string, type: \"atom\", start: start, end: end};\n    }\n\n    const ogeCm = com.wsscode.oge.ui.codemirror;\n\n    function atomOrComp(stream, state) {\n      if (!options.ogeIndex) return ATOM;\n\n      const token = makeToken(stream, state);\n      const words = ogeCm.completions(cljsDeref(options.ogeIndex), token, token.string);\n\n      if (ogeCm.key_has_children_QMARK_(words, token)) {\n        return ATOM_COMP;\n      } else {\n        return ATOM;\n      }\n    }\n\n    return {\n      startState: function () {\n        return {\n          pathStack: {},\n          indentation: 0,\n          mode: null\n        };\n      },\n\n      token: function (stream, state) {\n        let ch, stack = state.pathStack;\n\n        if (stack == null && stream.sol()) {\n          // update indentation, but only if indentStack is empty\n          state.indentation = stream.indentation();\n        }\n\n        // skip spaces\n        if (state.mode != \"string\" && stream.eatSpace()) {\n          return null;\n        }\n\n        switch(state.mode) {\n          case \"string\": // multi-line string parsing mode\n            let next, escaped = false;\n            while ((next = stream.next()) != null) {\n              if (next == \"\\\"\" && !escaped) {\n                popStack(state);\n                break;\n              }\n              escaped = !escaped && next == \"\\\\\";\n            }\n\n            return STRING;\n\n          case \"attr-list\":\n            ch = stream.next();\n\n            if (ch == \":\") {\n              readSymbol(stream);\n\n              return atomOrComp(stream, state);\n            }\n\n            if (ch == \"*\") return ATOM;\n\n            if (ch == \"[\") return readIdent(stream, state);\n            if (ch == \"]\") { popStack(state); return BRACKET; }\n\n            if (ch == \"{\") return readJoin(stream, state);\n            if (ch == \"(\") return readParamExp(stream, state);\n\n            break;\n\n          case \"join\":\n            ch = stream.next();\n\n            if (!stack.key) {\n              if (ch == \":\") {\n                readSymbol(stream);\n\n                stack.key = stream.current();\n\n                return atomOrComp(stream, state);\n              }\n\n              if (ch == \"[\") return readIdent(stream, state);\n              if (ch == \"(\") return readParamExp(stream, state);\n            } else {\n              if (ch == \"[\") {\n                pushStack(state, {mode: \"attr-list\", indent: nextIndent(stream)});\n\n                return BRACKET;\n              }\n            }\n\n            if (ch == \"}\") {\n              popStack(state);\n\n              if (stack.prev.mode == \"param-exp\") stack.prev.key = stack;\n\n              return BRACKET;\n            }\n\n            break;\n\n          case \"ident\":\n            ch = stream.next();\n\n            if (ch == \":\") {\n              readSymbol(stream);\n\n              if (!stack.key) stack.key = stream.current();\n\n              return ATOM_IDENT;\n            }\n\n            if (ch == \"\\\"\") {\n              pushStack(state, {mode: \"string\", indent: nextIndent(stream)});\n\n              return STRING;\n            }\n\n            if (readNumber(ch,stream)) {\n              return NUMBER;\n            }\n\n            if (ch == \"]\") {\n              popStack(state);\n\n              if (stack.prev.mode == \"join\" || stack.prev.mode == \"param-exp\")\n                stack.prev.key = stack;\n\n              return BRACKET;\n            }\n\n            readSymbol(stream);\n\n            return VAR;\n\n          case \"param-exp\":\n            ch = stream.next();\n\n            if (!stack.key) {\n              if (ch == \":\") {\n                readSymbol(stream);\n\n                stack.key = stream.current();\n\n                return atomOrComp(stream, state);\n              }\n\n              if (ch == \"[\") return readIdent(stream, state);\n              if (ch == \"{\") return readJoin(stream, state);\n\n              if (ch != \")\") {\n                readSymbol(stream);\n\n                stack.key = stream.current();\n\n                return VAR;\n              }\n            } else {\n              if (ch == \"{\") {\n                pushStack(state, {mode: \"param-map\", indent: nextIndent(stream)});\n\n                return BRACKET;\n              }\n            }\n\n            if (ch == \")\") {\n              popStack(state);\n\n              if (stack.prev.mode == \"join\") stack.prev.key = stack.key;\n\n              return BRACKET;\n            }\n\n            break;\n\n          case \"param-map\":\n            ch = stream.next();\n\n            if (ch == \":\") {\n              readSymbol(stream);\n\n              return ATOM;\n            }\n\n            if (ch == \"\\\"\") {\n              pushStack(state, {mode: \"string\", indent: nextIndent(stream)});\n\n              return STRING;\n            }\n\n            if (readNumber(ch,stream)) {\n              return NUMBER;\n            }\n\n            if (ch == \"}\") { popStack(state); return BRACKET; }\n\n            readSymbol(stream);\n\n            return VAR;\n\n          default: // default parsing mode\n            ch = stream.next();\n\n            if (ch == \"[\") {\n              pushStack(state, {mode: \"attr-list\", indent: nextIndent(stream)});\n\n              return BRACKET;\n            }\n        }\n\n        stream.eatWhile(tests.symbol);\n\n        return \"error\";\n      },\n\n      indent: function (state) {\n        if (state.pathStack == null) return state.indentation;\n        return state.pathStack.indent;\n      },\n\n      closeBrackets: {pairs: \"()[]{}\\\"\\\"\"},\n      lineComment: \";\"\n    };\n  });\n});\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","mod","define","amd","CodeMirror","defineMode","options","pushStack","state","stack","prev","pathStack","mode","popStack","readNumber","ch","stream","eat","eatWhile","tests","hex","digit","test","peek","sign","next","exponent","readSymbol","symbol","ATOM","readJoin","indent","nextIndent","BRACKET","readIdent","readParamExp","column","current","length","atomOrComp","ogeIndex","string","start","type","end","words","ogeCm","completions","cljsDeref","token","key_has_children_QMARK_","ATOM_COMP","digit_or_colon","keyword_char","block_indent","com","wsscode","oge","ui","codemirror","startState","indentation","sol","eatSpace","escaped","STRING","key","ATOM_IDENT","NUMBER","VAR","closeBrackets","pairs","lineComment"]
}
