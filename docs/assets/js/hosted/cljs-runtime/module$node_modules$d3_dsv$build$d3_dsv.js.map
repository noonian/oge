{
"version":3,
"file":"module$node_modules$d3_dsv$build$d3_dsv.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/d3-dsv/build/d3-dsv.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_dsv$build$d3_dsv\"] = function(global,process,require,module,exports) {\n// https://d3js.org/d3-dsv/ Version 1.0.8. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\nvar EOL = {};\nvar EOF = {};\nvar QUOTE = 34;\nvar NEWLINE = 10;\nvar RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nvar dsv = function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(text) {\n    return text == null ? \"\"\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : text;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n};\n\nvar csv = dsv(\",\");\n\nvar csvParse = csv.parse;\nvar csvParseRows = csv.parseRows;\nvar csvFormat = csv.format;\nvar csvFormatRows = csv.formatRows;\n\nvar tsv = dsv(\"\\t\");\n\nvar tsvParse = tsv.parse;\nvar tsvParseRows = tsv.parseRows;\nvar tsvFormat = tsv.format;\nvar tsvFormatRows = tsv.formatRows;\n\nexports.dsvFormat = dsv;\nexports.csvParse = csvParse;\nexports.csvParseRows = csvParseRows;\nexports.csvFormat = csvFormat;\nexports.csvFormatRows = csvFormatRows;\nexports.tsvParse = tsvParse;\nexports.tsvParseRows = tsvParseRows;\nexports.tsvFormat = tsvFormat;\nexports.tsvFormatRows = tsvFormatRows;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","factory","define","amd","d3","objectConverter","columns","Function","map","name","i","JSON","stringify","join","customConverter","f","object","row","inferColumns","rows","columnSet","Object","create","forEach","column","push","EOL","EOF","dsv","delimiter","parseRows","text","token","eof","eol","j","I","c","QUOTE","charCodeAt","N","NEWLINE","RETURN","slice","replace","DELIMITER","length","n","t","formatRow","formatValue","reFormat","test","RegExp","parse","convert","format","concat","formatRows","csv","csvParse","csvParseRows","csvFormat","csvFormatRows","tsv","tsvParse","tsvParseRows","tsvFormat","tsvFormatRows","dsvFormat","defineProperty","value"]
}
