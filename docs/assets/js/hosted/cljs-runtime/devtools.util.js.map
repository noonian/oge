{"version":3,"file":"devtools.util.js","sources":["devtools/util.cljs"],"mappings":"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","names":["devtools.util/lib-info-style","devtools.util/reset-style","devtools.util/advanced-build-explanation-url","devtools.util/*custom-formatters-active*","devtools.util/*console-open*","devtools.util/*custom-formatters-warning-reported*","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","devtools.util/pprint-str","seq29563","self__4487__auto__","cljs.core/seq","args","sb__4430__auto__","js/goog.string.StringBuffer","*print-newline*29565","cljs.core/*print-newline*","*print-fn*29566","cljs.core/*print-fn*","x__4431__auto__","*print-level*29567","cljs.core/*print-level*","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.pprint/pprint","devtools.util/make-version-info","devtools.util/make-lib-info","devtools.util/get-lib-info","devtools.util/get-node-info","root","e29577","process","version","platform","and__3911__auto__","_","devtools.util/get-node-description","node-info","or__3922__auto__","devtools.util/in-node-context?","devtools.context/get-root","devtools.util/get-js-context-description","temp__5455__auto__","user-agent","goog.userAgent/getUserAgentString","cljs.core/empty?","devtools.util/unknown-feature-msg","feature","known-features","lib-info","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","devtools.util/feature-not-available-msg","devtools.util/custom-formatters-not-active-msg","devtools.util/formatter-key","devtools.util/get-formatters-safe","formatters","cljs.core/array?","js/Error","devtools.util/set-formatters-safe!","new-formatters","devtools.util/print-config-overrides-if-requested!","msg","devtools.prefs/pref","diff","cljs.core/second","cljs.core/deref","clojure.data/diff","devtools.prefs/default-config","devtools.prefs/get-prefs","devtools.context/get-console","devtools.util.pprint_str.cljs$core$IFn$_invoke$arity$variadic","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","devtools.util/CustomFormattersDetector","devtools.util/->CustomFormattersDetector","devtools.util/make-detector","detector","_object","_config","cljs.core/constantly","devtools.util/install-detector!","devtools.util/uninstall-detector!","current-formatters","p1__29578#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","devtools.util/check-custom-formatters-active!","devtools.util/uninstall-detector-and-check-custom-formatters-active!","devtools.util/make-detection-printer","f","G__29579","target__27497__auto__","js/setTimeout","devtools.util/wrap-with-custom-formatter-detection!","cljs.core/not","G__29582","G__29583","G__29584","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devtools.util/feature-for-display","installed-features","color","cljs.core/some","devtools.util/feature-list-display","feature-groups","labels","cljs.core.map.cljs$core$IFn$_invoke$arity$2","*","accum","val","cljs.core/first","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/rest","devtools.util/display-banner!","seq29588","G__29589","cljs.core/next","G__29590","G__29591","self__4486__auto__","fmt","params","vec__29592","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","fmt-str","fmt-params","add-fmt","add-args","items","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","console","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","devtools.util/display-banner-if-needed!","features-to-install","banner","devtools.util.display_banner_BANG_.cljs$core$IFn$_invoke$arity$variadic","devtools.util/report-unknown-features!","features","seq__29601","chunk__29602","count__29603","i__29604","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","devtools.util/is-known-feature?","cljs.core/boolean","devtools.util/convert-legacy-feature","G__29617","cljs.core/Keyword","devtools.util/convert-legacy-features","devtools.util/sanititze-features!","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","devtools.util/resolve-features!","features-desc","cljs.core/seqable?","devtools.util/under-advanced-build?","o29619","devtools.util/display-advanced-build-warning-if-needed!","devtools.util/install-feature!","available-fn","install-fn"],"sourcesContent":["(ns devtools.util\n  (:require-macros [devtools.oops :refer [oget ocall oset unchecked-aget unchecked-aset]]\n                   [devtools.compiler :refer [check-compiler-options!]])\n  (:require [goog.userAgent :as ua]\n            [clojure.data :as data]\n            [devtools.version :refer [get-current-version]]\n            [devtools.context :as context]\n            [cljs.pprint :as cljs-pprint]\n            [devtools.prefs :as prefs]))\n\n; cljs.pprint does not play well in advanced mode :optimizations, see https://github.com/binaryage/cljs-devtools/issues/37\n(check-compiler-options!)\n\n(def lib-info-style \"color:black;font-weight:bold;\")\n(def reset-style \"color:black\")\n(def advanced-build-explanation-url\n  \"https://github.com/binaryage/cljs-devtools/blob/master/docs/faq.md#why-custom-formatters-do-not-work-for-advanced-builds\")\n\n(def ^:dynamic *custom-formatters-active* false)\n(def ^:dynamic *console-open* false)\n(def ^:dynamic *custom-formatters-warning-reported* false)\n\n; -- general helpers --------------------------------------------------------------------------------------------------------\n\n(defn pprint-str [& args]\n  (with-out-str\n    (binding [*print-level* 300]\n      (apply cljs-pprint/pprint args))))\n\n; -- version helpers --------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic make-version-info []\n  (str (get-current-version)))\n\n(defn ^:dynamic make-lib-info []\n  (str \"CLJS DevTools \" (make-version-info)))\n\n(defn get-lib-info []\n  (make-lib-info))\n\n; -- node.js support --------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic get-node-info [root]\n  (try\n    (let [process (oget root \"process\")\n          version (oget process \"version\")\n          platform (oget process \"platform\")]\n      (if (and version platform)\n        {:version  version\n         :platform platform}))\n    (catch :default _\n      nil)))\n\n(defn ^:dynamic get-node-description [node-info]\n  (str (or (:platform node-info) \"?\") \"/\" (or (:version node-info) \"?\")))\n\n(defn ^:dynamic in-node-context? []\n  (some? (get-node-info (context/get-root))))\n\n; -- javascript context utils -----------------------------------------------------------------------------------------------\n\n(defn ^:dynamic get-js-context-description []\n  (if-let [node-info (get-node-info (context/get-root))]\n    (str \"node/\" (get-node-description node-info))\n    (let [user-agent (ua/getUserAgentString)]\n      (if (empty? user-agent)\n        \"<unknown context>\"\n        user-agent))))\n\n; -- message formatters -----------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic unknown-feature-msg [feature known-features lib-info]\n  (str \"No such feature \" feature \" is currently available in \" lib-info \". \"\n       \"The list of supported features is \" (pr-str known-features) \".\"))\n\n(defn ^:dynamic feature-not-available-msg [feature]\n  (str \"Feature \" feature \" cannot be installed. \"\n       \"Unsupported Javascript context: \" (get-js-context-description) \".\"))\n\n(defn ^:dynamic custom-formatters-not-active-msg []\n  (str \"CLJS DevTools: some custom formatters were not rendered.\\n\"\n       \"https://github.com/binaryage/cljs-devtools/blob/master/docs/faq.md#why-some-custom-formatters-were-not-rendered\"))\n\n; -- devtools formatters access ---------------------------------------------------------------------------------------------\n\n(def formatter-key \"devtoolsFormatters\")\n\n(defn get-formatters-safe []\n  (let [formatters (unchecked-aget (context/get-root) formatter-key)]\n    (if (array? formatters)                                                                                                   ; TODO: maybe issue a warning if formatters are anything else than array or nil\n      formatters\n      #js [])))\n\n(defn set-formatters-safe! [new-formatters]\n  {:pre [(or (nil? new-formatters) (array? new-formatters))]}\n  (unchecked-aset (context/get-root) formatter-key (if (empty? new-formatters) nil new-formatters)))\n\n(defn print-config-overrides-if-requested! [msg]\n  (when (prefs/pref :print-config-overrides)\n    (let [diff (second (data/diff @prefs/default-config (prefs/get-prefs)))]\n      (if-not (empty? diff)\n        (.info (context/get-console) msg (pprint-str diff))))))\n\n; -- custom formatters detection --------------------------------------------------------------------------------------------\n\n(deftype CustomFormattersDetector [])\n\n; https://github.com/binaryage/cljs-devtools/issues/16\n(defn make-detector []\n  (let [detector (CustomFormattersDetector.)]\n    (unchecked-aset detector \"header\" (fn [_object _config]\n                                        (set! *custom-formatters-active* true)\n                                        nil))\n    (unchecked-aset detector \"hasBody\" (constantly false))\n    (unchecked-aset detector \"body\" (constantly nil))\n    detector))\n\n(defn install-detector! [detector]\n  (let [formatters (get-formatters-safe)]\n    (.push formatters detector)\n    (set-formatters-safe! formatters)))\n\n(defn uninstall-detector! [detector]\n  ; play it safe here, this method is called asynchronously\n  ; in theory someone else could have installed additional custom formatters\n  ; we have to be careful removing only ours formatters\n  (let [current-formatters (unchecked-aget (context/get-root) formatter-key)]\n    (if (array? current-formatters)\n      (let [new-formatters (.filter current-formatters #(not (= detector %)))]\n        (set-formatters-safe! new-formatters)))))\n\n(defn check-custom-formatters-active! []\n  (if (and *console-open* (not *custom-formatters-active*))\n    (when-not *custom-formatters-warning-reported*\n      (set! *custom-formatters-warning-reported* true)\n      (.warn (context/get-console) (custom-formatters-not-active-msg)))))\n\n(defn uninstall-detector-and-check-custom-formatters-active! [detector]\n  (uninstall-detector! detector)\n  (check-custom-formatters-active!))\n\n; a variation of http://stackoverflow.com/a/30638226/84283\n(defn make-detection-printer []\n  (let [f (fn [])]\n    (oset f [\"toString\"] (fn []\n                           (set! *console-open* true)\n                           (js/setTimeout check-custom-formatters-active! 0)                                                  ; console is being opened, schedule another check\n                           \"\"))\n    f))\n\n(defn wrap-with-custom-formatter-detection! [f]\n  (if-not (prefs/pref :dont-detect-custom-formatters)\n    (let [detector (make-detector)]\n      ; this is a tricky business here\n      ; we cannot ask DevTools if custom formatters are available and/or enabled\n      ; we abuse the fact that we are printing info banner upon cljs-devtools installation anyways\n      ; we install a special CustomFormattersDetector formatter which just records calls to it\n      ; but does not format anything, it skips the opportunity to format the output so it has no visual effect\n      ; this way we are able to detect if custom formatters are active and record it in *custom-formatters-active*\n      ; but this technique does not work when printing happens when DevTools console is closed\n      ; we have to add another system for detection of when console opens and re-detect custom formatters with opened console\n      (install-detector! detector)\n      (f \"%c%s\" \"color:transparent\" (make-detection-printer))\n      ; note that custom formatters are applied asynchronously\n      ; we have to uninstall our detector a bit later\n      (js/setTimeout (partial uninstall-detector-and-check-custom-formatters-active! detector) 0))\n    (f)))\n\n; -- banner -----------------------------------------------------------------------------------------------------------------\n\n(defn feature-for-display [installed-features feature]\n  (let [color (if (some #{feature} installed-features) \"color:#0000ff\" \"color:#ccc\")]\n    [\"%c%s\" [color (str feature)]]))\n\n(defn feature-list-display [installed-features feature-groups]\n  (let [labels (map (partial feature-for-display installed-features) (:all feature-groups))\n        * (fn [accum val]\n            [(str (first accum) \" \" (first val))\n             (concat (second accum) (second val))])]\n    (reduce * (first labels) (rest labels))))\n\n(defn display-banner! [installed-features feature-groups fmt & params]\n  (let [[fmt-str fmt-params] (feature-list-display installed-features feature-groups)]\n    (wrap-with-custom-formatter-detection! (fn [add-fmt & add-args]\n                                             (let [items (concat [(str fmt \" \" fmt-str add-fmt)] params fmt-params add-args)\n                                                   console (context/get-console)]\n                                               (.apply (.-info console) console (into-array items)))))))\n\n(defn display-banner-if-needed! [features-to-install feature-groups]\n  (if-not (prefs/pref :dont-display-banner)\n    (do\n      (let [banner (str \"Installing %c%s%c and enabling features\")]\n        (display-banner! features-to-install feature-groups banner lib-info-style (get-lib-info) reset-style)))\n    ; detection cannot be performed if we are not allowed to print something to console => assume active\n    (set! *custom-formatters-active* true)))\n\n; -- unknown features -------------------------------------------------------------------------------------------------------\n\n(defn report-unknown-features! [features known-features]\n  (let [lib-info (get-lib-info)]\n    (doseq [feature features]\n      (if-not (some #{feature} known-features)\n        (.warn (context/get-console) (unknown-feature-msg feature known-features lib-info))))))\n\n(defn is-known-feature? [known-features feature]\n  (boolean (some #{feature} known-features)))\n\n(defn convert-legacy-feature [feature]\n  (case feature\n    :custom-formatters :formatters\n    :sanity-hints :hints\n    feature))\n\n(defn convert-legacy-features [features]\n  (map convert-legacy-feature features))\n\n(defn sanititze-features! [features feature-groups]\n  (let [known-features (:all feature-groups)\n        features (convert-legacy-features features)]                                                                          ; new feature names were introduced in v0.8\n    (report-unknown-features! features known-features)\n    (filter (partial is-known-feature? known-features) features)))\n\n(defn resolve-features! [features-desc feature-groups]\n  (let [features (cond\n                   (and (keyword? features-desc) (features-desc feature-groups)) (features-desc feature-groups)\n                   (nil? features-desc) (:default feature-groups)\n                   (seqable? features-desc) features-desc\n                   :else [features-desc])]\n    (sanititze-features! features feature-groups)))\n\n; -- advanced mode check ----------------------------------------------------------------------------------------------------\n\n(defn under-advanced-build? []\n  (if-not (prefs/pref :disable-advanced-mode-check)\n    (nil? (oget (context/get-root) \"devtools\" \"version\"))))                                                                   ; we rely on the fact that under advanced mode the namespace will be renamed\n\n(defn display-advanced-build-warning-if-needed! []\n  (if-not (prefs/pref :dont-display-advanced-build-warning)\n    (let [banner (str \"%cNOT%c installing %c%s%c under advanced build. See \" advanced-build-explanation-url \".\")]\n      (.warn (context/get-console) banner \"font-weight:bold\" reset-style lib-info-style (get-lib-info) reset-style))))\n\n; -- installer --------------------------------------------------------------------------------------------------------------\n\n(defn install-feature! [feature features-to-install available-fn install-fn]\n  (if (some #{feature} features-to-install)\n    (if (or (prefs/pref :bypass-availability-checks) (available-fn feature))\n      (install-fn)\n      (.warn (context/get-console) (feature-not-available-msg feature)))))\n"]}