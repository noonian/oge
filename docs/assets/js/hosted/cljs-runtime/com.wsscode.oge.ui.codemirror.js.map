{"version":3,"file":"com.wsscode.oge.ui.codemirror.js","sources":["com/wsscode/oge/ui/codemirror.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/string?","cljs.core/map?","cljs.core/pos-int?","cljs.core/boolean?","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.core/any?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/map-spec-impl","G__30644","G__30647","cljs.core/contains?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","G__30651","i__14798__auto__","v__14799__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/fn?","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","com.wsscode.oge.ui.codemirror/prop-call","seq30654","G__30655","cljs.core/first","cljs.core/next","G__30656","self__4486__auto__","comp","name","args","temp__5457__auto__","f","G__30657","fulcro.client.primitives/props","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","com.wsscode.oge.ui.codemirror/html-props","props","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__30666","vec__30667","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","_","cljs.core/namespace","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/clj->js","com.wsscode.oge.ui.codemirror/oge-cache","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","this__28659__auto__","js/React.Component","goog.object/clone","js/React.Component.prototype","x30683","next-props__28515__auto__","next-state__28516__auto__","this__28514__auto__","cljs.core/PROTOCOL_SENTINEL","ident__28523__auto__","fulcro.client.primitives/ident","next-ident__28524__auto__","fulcro.client.primitives/-next-props","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","idxr__28525__auto__","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","fulcro.client.primitives/get-reconciler","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","indexes__28526__auto__","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/disj","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","fulcro.client.primitives/merge-pending-props!","fulcro.client.primitives/merge-pending-state!","fulcro.client.primitives/*blindly-render*","next-children__28517__auto__","goog.object/get","G__30685","fulcro.client.primitives/FulcroProps","fulcro.client.primitives/unwrap","current-props__28518__auto__","next-props-stale?__28519__auto__","fulcro.client.primitives/get-basis-time","props-changed?__28520__auto__","state-changed?__28521__auto__","and__3911__auto__","G__30686","G__30687","children-changed?__28522__auto__","or__3922__auto__","prev-props__28527__auto__","prev-state__28528__auto__","fulcro.client.primitives/clear-prev-props!","indexer__28529__auto__","fulcro.client.impl.protocols/index-component!","next-props__28489__auto__","this__28488__auto__","map__30688","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","this__28504__auto__","reconciler__28505__auto__","lifecycle__28506__auto__","goog.object/set","G__30699","G__30700","this__28507__auto__","reconciler__28508__auto__","lifecycle__28509__auto__","cfg__28510__auto__","st__28511__auto__","indexer__28512__auto__","cljs.core/deref","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/dissoc","G__30709","G__30710","fulcro.client.impl.protocols/drop-component!","this__28513__auto__","*reconciler*30711","fulcro.client.primitives/*reconciler*","*depth*30712","fulcro.client.primitives/*depth*","*shared*30713","fulcro.client.primitives/*shared*","*instrument*30714","fulcro.client.primitives/*instrument*","*parent*30715","fulcro.client.primitives/*parent*","fulcro.client.primitives/depth","fulcro.client.primitives.shared.cljs$core$IFn$_invoke$arity$1","fulcro.client.primitives/instrument","x30716","x30717","this__28662__auto__","writer__28663__auto__","opt__28664__auto__","cljs.core/-write","com.wsscode.oge.ui.codemirror/Editor","this","value","indexes","cm","cur-index","G__30690","G__30691","goog.object/getValueByKeys","cljs.core/reset!","G__30692","G__30693","G__30694","G__30695","G__30696","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","com.wsscode.oge.ui.codemirror/autocomplete","cljs.core/not","cur-value","textarea","options","process","codemirror","js/CodeMirror.fromTextArea","e30701","p1__30679#","js/clearTimeout","G__30703","G__30704","G__30705","js/setTimeout","com.wsscode.oge.ui.codemirror.prop_call.cljs$core$IFn$_invoke$arity$variadic","e","js/console.warn","temp__5455__auto__","fulcro.client.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","fulcro.util/force-children","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","p1__30680#","js/React.createElement","com.wsscode.oge.ui.codemirror/editor","fulcro.client.primitives.factory.cljs$core$IFn$_invoke$arity$1","com.wsscode.oge.ui.codemirror/escape-re","input","re","js/RegExp","com.wsscode.oge.ui.codemirror/fuzzy-re","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","s","c","com.wsscode.oge.ui.codemirror/str->keyword","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","p__30739","map__30740","com.wsscode.oge.ui.codemirror/token-context","index-io","token","state","mode","path-stack","find-ctx","com$wsscode$oge$ui$codemirror$token_context_$_find_ctx.cljs$core$IFn$_invoke$arity$2","ctx","key","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__30744","G__30745","G__30746","G__30747","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1","G__30748","G__30749","cljs.core/seq","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","find_ctx.cljs$core$IFn$_invoke$arity$1","G__30750","G__30751","G__30752","G__30753","G__30754","G__30755","G__30756","G__30757","G__30760","G__30761","G__30766","G__30767","G__30768","G__30769","G__30770","G__30771","com.wsscode.oge.ui.codemirror/completions","index","reg","G__30775","cljs.core/Keyword","com.wsscode.pathom.connect/discover-attrs","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p1__30774#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/PersistentHashMap","js/window","com.wsscode.oge.ui.codemirror/cm-completions","cur","ch","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","line","blank?","fexpr__30778","start","js/CodeMirror","cljs.core/count","end","words","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","fuzzy","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/str","p1__30777#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/re-find","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","com.wsscode.oge.ui.codemirror/def-cm-command","G__30779","G__30780","G__30781","com.wsscode.oge.ui.codemirror/key-has-children?","completions","com.wsscode.oge.ui.codemirror/str-repeat","n","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","indent","G__30784","G__30785","G__30788","G__30789","vec__30790","cursor-end","joined","p__30794","map__30795","com.wsscode.oge.ui.codemirror/oge","G__30797","G__30800","G__30801","js/CodeMirror.showHint","G__30802","G__30803","G__30804","js/module$node_modules$parinfer_codemirror$parinfer_codemirror.init","p1__30793#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","com.wsscode.oge.ui.codemirror/clojure","G__30806","p1__30805#"],"sourcesContent":["(ns com.wsscode.oge.ui.codemirror\n  (:require [fulcro.client.primitives :as fp]\n            [fulcro.client.dom :as dom]\n            [goog.object :as gobj]\n            [com.wsscode.pathom.connect :as pc]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]\n            [cljs.reader :refer [read-string]]\n\n            [cljsjs.codemirror]\n            [\"codemirror/mode/clojure/clojure\"]\n            [\"codemirror/addon/edit/matchbrackets\"]\n            [\"codemirror/addon/edit/closebrackets\"]\n            [\"codemirror/addon/fold/foldcode\"]\n            [\"codemirror/addon/fold/foldgutter\"]\n            [\"codemirror/addon/fold/brace-fold\"]\n            [\"codemirror/addon/fold/indent-fold\"]\n            [\"codemirror/addon/selection/active-line\"]\n            [\"codemirror/addon/search/match-highlighter\"]\n            [\"codemirror/addon/search/search\"]\n            [\"codemirror/addon/search/searchcursor\"]\n            [\"codemirror/addon/hint/anyword-hint\"]\n            [\"codemirror/addon/hint/show-hint\"]\n            [\"codemirror/addon/display/placeholder\"]\n            [\"parinfer-codemirror\" :as parinfer-cm]\n            [\"./oge-mode\"]))\n\n(s/def ::mode (s/or :string string? :obj map?))\n(s/def ::theme string?)\n(s/def ::indentUnit pos-int?)\n(s/def ::smartIndent boolean?)\n(s/def ::lineNumbers boolean?)\n(s/def ::readOnly boolean?)\n\n(s/def ::value string?)\n(s/def ::onChange (s/fspec :args (s/cat :code string?)))\n\n(s/def ::options (s/keys :opt [::mode\n                               ::theme\n                               ::indentUnit\n                               ::smartIndent\n                               ::lineNumbers]))\n\n(s/def ::props (s/keys :req-un [::value]\n                       :opt [::options]))\n\n(s/def ::extraKeys\n  (s/map-of string? (s/or :str string? :fn fn?)))\n\n(defn prop-call [comp name & args]\n  (when-let [f (-> comp fp/props name)]\n    (apply f args)))\n\n(defn html-props [props]\n  (->> props\n       (remove (fn [[k _]] (namespace k)))\n       (into {})\n       (clj->js)))\n\n(def oge-cache (atom {}))\n\n(declare autocomplete)\n\n(fp/defui ^:once Editor\n  Object\n  (componentWillReceiveProps [this {:keys     [value]\n                                    ::pc/keys [indexes]}]\n    (let [cm        (gobj/get this \"codemirror\")\n          cur-index (gobj/getValueByKeys cm #js [\"options\" \"ogeIndex\"])]\n      (when (and cur-index (not= indexes @cur-index))\n        (reset! oge-cache {})\n        (reset! cur-index indexes)\n        (gobj/set (gobj/getValueByKeys cm #js [\"options\" \"hintOptions\"]) \"hint\" (partial autocomplete indexes)))\n\n      ; there is a race condition that happens when user types something, react updates state and try to update\n      ; the state back to the editor, which moves the cursor in the editor in weird ways. the workaround is to\n      ; stop accepting external values after a short period after user key strokes.\n      (if-not (gobj/get this \"editorHold\")\n        (let [cur-value (.getValue cm)]\n          (if (and cm value (not= value cur-value))\n            (.setValue cm value))))))\n\n  (componentDidMount [this]\n    (let [textarea   (gobj/get this \"textNode\")\n          options    (-> this fp/props ::options (or {}) clj->js)\n          process    (-> this fp/props ::process)\n          codemirror (js/CodeMirror.fromTextArea textarea options)]\n\n      (try\n        (.on codemirror \"change\" #(when (not= (gobj/get % \"origin\") \"setValue\")\n                                    (js/clearTimeout (gobj/get this \"editorHold\"))\n                                    (gobj/set this \"editorHold\"\n                                      (js/setTimeout\n                                        (fn []\n                                          (gobj/set this \"editorHold\" false))\n                                        800))\n                                    (prop-call this :onChange (.getValue %))))\n        (.setValue codemirror (-> this fp/props :value))\n        (if process (process codemirror))\n        (catch :default e (js/console.warn \"Error setting up CodeMirror\" e)))\n      (gobj/set this \"codemirror\" codemirror)))\n\n  (componentWillUnmount [this]\n    (if-let [cm (gobj/get this \"codemirror\")]\n      (.toTextArea cm)))\n\n  (render [this]\n    (let [props (fp/props this)]\n      (dom/div (-> props (dissoc :value :onChange) (html-props))\n        (js/React.createElement \"textarea\"\n          #js {:ref          #(gobj/set this \"textNode\" %)\n               :defaultValue (:value props)})))))\n\n(def editor (fp/factory Editor))\n\n(defn escape-re [input]\n  (let [re (js/RegExp. \"([.*+?^=!:${}()|[\\\\]\\\\/\\\\\\\\])\" \"g\")]\n    (-> input str (.replace re \"\\\\$1\"))))\n\n(defn fuzzy-re [input]\n  (-> (reduce (fn [s c] (str s (escape-re c) \".*\")) \"\" input)\n      (js/RegExp \"i\")))\n\n(defn str->keyword [s] (keyword (subs s 1)))\n\n(defn token-context [{::pc/keys [index-io]} token]\n  (let [state      (gobj/get token \"state\")\n        mode       (gobj/get state \"mode\")\n        path-stack (gobj/get state \"pathStack\")\n\n        find-ctx   (fn find-ctx\n                     ([s] (find-ctx s []))\n                     ([s ctx]\n                      (let [mode (gobj/get s \"mode\")\n                            key  (gobj/get s \"key\")]\n                        (cond\n                          ; ident join: [{[:ident x] [|]}]\n                          (and (= \"join\" mode)\n                               (= \"ident\" (gobj/getValueByKeys s #js [\"key\" \"mode\"])))\n                          (let [key (str->keyword (gobj/getValueByKeys s #js [\"key\" \"key\"]))]\n                            {:type :attribute :context (conj ctx key)})\n\n                          ; join: [{:child [|]}]\n                          (and (= \"join\" mode)\n                               (= (string? key)))\n                          (let [key (str->keyword key)]\n                            (if (contains? (get index-io #{}) key)\n                              {:type :attribute :context (conj ctx key)}\n                              (recur (gobj/getValueByKeys s #js [\"prev\" \"prev\"]) (conj ctx key))))\n\n                          (not (seq (js->clj s)))\n                          {:type :attribute :context ctx}))))]\n\n    (cond\n      (and (= \"ident\" mode)\n           (or (nil? (gobj/get path-stack \"key\"))\n               (= (gobj/get token \"string\") (gobj/get path-stack \"key\"))))\n      {:type :ident}\n\n      (and (= \"join\" mode)\n           (or (= (gobj/get token \"string\") (gobj/get path-stack \"key\"))\n               (nil? (gobj/get path-stack \"key\"))))\n      (find-ctx (if (= \"param-exp\" (gobj/getValueByKeys path-stack #js [\"prev\" \"mode\"]))\n                  (gobj/getValueByKeys path-stack #js [\"prev\" \"prev\" \"prev\"])\n                  (gobj/getValueByKeys path-stack #js [\"prev\" \"prev\"])))\n\n      (= \"attr-list\" mode)\n      (if (gobj/getValueByKeys path-stack #js [\"prev\" \"mode\"])\n        (find-ctx (gobj/get path-stack \"prev\"))\n        ; no stack, empty context\n        {:type :attribute :context []})\n\n      (= \"param-exp\" mode)\n      (if (and (gobj/getValueByKeys path-stack #js [\"prev\" \"prev\" \"mode\"])\n               (or (= \"attr-list\" (gobj/getValueByKeys path-stack #js [\"prev\" \"mode\"]))\n                   (gobj/getValueByKeys path-stack #js [\"prev\" \"prev\" \"prev\" \"mode\"])))\n        (find-ctx (gobj/getValueByKeys path-stack #js [\"prev\" \"prev\"]))\n        ; no stack, empty context\n        {:type :attribute :context []}))))\n\n(defn ^:export completions [index token reg]\n  (let [ctx (token-context index token)]\n    (when reg\n      (case (:type ctx)\n        :attribute (->> (pc/discover-attrs (assoc index ::pc/cache oge-cache)\n                          (->> ctx :context (remove (comp #{\">\"} namespace)))))\n        :ident (into {} (map #(hash-map % {})) (-> index ::pc/idents))\n        {}))))\n\n(gobj/set js/window \"cljsDeref\" deref)\n\n(defn cm-completions [index cm]\n  (let [cur   (.getCursor cm)\n        ch    (.-ch cur)\n        token (.getTokenAt cm cur)\n        reg   (subs (.-string token) 0 (- ch (.-start token)))]\n    (completions index token reg)))\n\n(defn autocomplete [index cm options]\n  (let [cur    (.getCursor cm)\n        line   (.-line cur)\n        ch     (.-ch cur)\n        token  (.getTokenAt cm cur)\n        reg    (subs (.-string token) 0 (- ch (.-start token)))\n        blank? (#{\"[\" \"{\" \" \" \"(\"} reg)\n        start  (if blank? cur (-> js/CodeMirror (.Pos line (- ch (count reg)))))\n        end    (if blank? cur (-> js/CodeMirror (.Pos line (gobj/get token \"end\"))))\n        words  (->> (cm-completions index cm) (mapv first))]\n\n    (if words\n      (let [fuzzy (if blank? #\".*\" (fuzzy-re reg))]\n        #js {:list (->> words\n                        (remove (get index ::pc/autocomplete-ignore #{}))\n                        (map str)\n                        (filter #(re-find fuzzy %))\n                        sort\n                        clj->js)\n             :from start\n             :to   end}))))\n\n(defn def-cm-command [name f]\n  (gobj/set (gobj/get js/CodeMirror \"commands\") name f))\n\n(defn ^:export key-has-children? [completions token]\n  (let [reg (str->keyword (gobj/get token \"string\"))]\n    (and (= \"atom\" (gobj/get token \"type\"))\n         (or (seq (get completions reg))\n             (= \">\" (namespace reg))))))\n\n(defn str-repeat [s n]\n  (str/join (repeat n s)))\n\n(def-cm-command \"ogeJoin\"\n  (fn [cm]\n    (let [cur    (.getCursor cm)\n          token  (.getTokenAt cm cur)\n          indent (or (gobj/getValueByKeys token #js [\"state\" \"pathStack\" \"indent\"])\n                     0)]\n\n      (if (and (= \"attr-list\" (gobj/getValueByKeys token #js [\"state\" \"mode\"]))\n               (= \"atom-composite\" (gobj/get token \"type\")))\n        (let [line  (.-line cur)\n              start (.Pos js/CodeMirror line (gobj/get token \"start\"))\n              end   (.Pos js/CodeMirror line (gobj/get token \"end\"))\n              s     (gobj/get token \"string\")\n\n              [cursor-end joined]\n              (if (= (.-ch start) indent)\n                [(.Pos js/CodeMirror (inc line) (+ 2 indent))\n                 (str \"{\" s \"\\n\" (str-repeat \" \" (inc indent)) \"[]}\")]\n\n                [(.Pos js/CodeMirror line (+ (gobj/get token \"start\")\n                                            (count s)\n                                            3))\n                 (str \"{\" s \" []}\")])]\n          (.replaceRange cm joined start end)\n          (.setCursor cm cursor-end)\n          (.showHint cm))))))\n\n(defn oge [{::pc/keys [indexes] :as props}]\n  (let [options {::lineNumbers               true\n                 ::mode                      \"oge\"\n                 ::matchBrackets             true\n                 ::autoCloseBrackets         true\n                 ::highlightSelectionMatches true\n                 ::foldGutter                true\n                 ::hintOptions               {:hint           (partial autocomplete indexes)\n                                              :completeSingle false}\n                 ::extraKeys                 {\"Ctrl-Space\" \"autocomplete\"}\n                 ::gutters                   [\"CodeMirror-linenumbers\" \"CodeMirror-foldgutter\"]\n                 :ogeIndex                   (atom indexes)}]\n    (editor (-> props\n                (assoc ::process (fn [cm]\n                                   (.on cm \"keyup\" (fn [cm e] (when (and (not (gobj/getValueByKeys cm #js [\"state\" \"completionActive\"]))\n                                                                         (= 1 (-> (gobj/get e \"key\") (count))))\n                                                                (js/CodeMirror.showHint cm))))\n                                   (parinfer-cm/init cm \"smart\" #js {:forceBalance true})))\n                (update ::options #(merge options %))))))\n\n(defn clojure [props]\n  (let [options {::lineNumbers               true\n                 ::mode                      \"clojure\"\n                 ::matchBrackets             true\n                 ::highlightSelectionMatches true\n                 ::foldGutter                true\n                 ::gutters                   [\"CodeMirror-linenumbers\" \"CodeMirror-foldgutter\"]}]\n    (editor (-> props\n                (update ::options #(merge options %))))))\n"]}