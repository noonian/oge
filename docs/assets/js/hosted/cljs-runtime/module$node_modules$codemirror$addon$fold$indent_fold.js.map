{
"version":3,
"file":"module$node_modules$codemirror$addon$fold$indent_fold.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAwC,CAIzH,SAAQ,CAACC,CAAD,CAAM,CACS,QAAtB,EAAI,MAAOD,EAAX,EAAmD,QAAnD,EAAkC,MAAOD,EAAzC,CACEE,CAAA,CAAIH,CAAA,CAAQ,+CAAR,CAAJ,CADF,CAE0B,UAArB,EAAI,MAAOI,OAAX,EAAmCA,MAAAC,IAAnC,CACHD,MAAA,CAAO,CAAC,sBAAD,CAAP,CAAiCD,CAAjC,CADG,CAGHA,CAAA,CAAIG,UAAJ,CANW,CAAd,CAAD,CAOG,QAAQ,CAACA,CAAD,CAAa,CAGxBC,QAASA,EAAU,CAACC,CAAD,CAAKC,CAAL,CAAa,CAC9B,IAAIC,EAAOF,CAAAG,QAAA,CAAWF,CAAX,CAAX,CACIG,EAAUF,CAAAG,OAAA,CAAY,IAAZ,CACd,OAAgB,EAAhB,EAAID,CAAJ,EAAqB,aAAAE,KAAA,CAAmBN,CAAAO,eAAA,CAAkBT,CAAAU,IAAA,CAAeP,CAAf,CAAuBG,CAAvB,CAAiC,CAAjC,CAAlB,CAAnB,CAArB,CACU,EADV,CAEON,CAAAW,YAAA,CAAuBP,CAAvB,CAA6B,IAA7B,CAAmCF,CAAAU,UAAA,CAAa,SAAb,CAAnC,CALuB,CAQhCZ,CAAAa,eAAA,CAA0B,MAA1B,CAAkC,QAAlC,CAA4C,QAAQ,CAACX,CAAD;AAAKY,CAAL,CAAY,CAC9D,IAAIC,EAAWd,CAAA,CAAWC,CAAX,CAAeY,CAAAE,KAAf,CACf,IAAI,EAAW,CAAX,CAAAD,CAAA,CAAJ,CAAA,CAKA,IAJA,IAAIE,EAAiB,IAArB,CAISC,EAAIJ,CAAAE,KAAJE,CAAiB,CAJ1B,CAI6BC,EAAMjB,CAAAkB,SAAA,EAAnC,CAAkDF,CAAlD,EAAuDC,CAAvD,CAA4D,EAAED,CAA9D,CAAiE,CAC/D,IAAIG,EAASpB,CAAA,CAAWC,CAAX,CAAegB,CAAf,CACb,IAAe,EAAf,EAAIG,CAAJ,CACO,GAAIA,CAAJ,CAAaN,CAAb,CAELE,CAAA,CAAiBC,CAFZ,KAOL,MAV6D,CAajE,GAAID,CAAJ,CAAoB,MAAO,CACzBK,KAAMtB,CAAAU,IAAA,CAAeI,CAAAE,KAAf,CAA2Bd,CAAAG,QAAA,CAAWS,CAAAE,KAAX,CAAAO,OAA3B,CADmB,CAEzBC,GAAIxB,CAAAU,IAAA,CAAeO,CAAf,CAA+Bf,CAAAG,QAAA,CAAWY,CAAX,CAAAM,OAA/B,CAFqB,CAlB3B,CAF8D,CAAhE,CAXwB,CAPxB,CAJ0H;",
"sources":["node_modules/codemirror/addon/fold/indent-fold.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$addon$fold$indent_fold\"] = function(global,process,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction lineIndent(cm, lineNo) {\n  var text = cm.getLine(lineNo)\n  var spaceTo = text.search(/\\S/)\n  if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1))))\n    return -1\n  return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"))\n}\n\nCodeMirror.registerHelper(\"fold\", \"indent\", function(cm, start) {\n  var myIndent = lineIndent(cm, start.line)\n  if (myIndent < 0) return\n  var lastLineInFold = null\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    var indent = lineIndent(cm, i)\n    if (indent == -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) return {\n    from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n    to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n  };\n});\n\n});\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","mod","define","amd","CodeMirror","lineIndent","cm","lineNo","text","getLine","spaceTo","search","test","getTokenTypeAt","Pos","countColumn","getOption","registerHelper","start","myIndent","line","lastLineInFold","i","end","lastLine","indent","from","length","to"]
}
