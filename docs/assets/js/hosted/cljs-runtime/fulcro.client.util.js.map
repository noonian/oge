{"version":3,"file":"fulcro.client.util.js","sources":["fulcro/client/util.cljc"],"mappings":";;;;;;;;;;AAaA,AAAA;;;;;;kCAAA,0CAAAA,5EAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,gEAAA,hEAAMD,2EAKFE,WAAWC;AALf,AAMG,AAACC,uEAAaF,WAAWC;;AACzB,OAACE,mDAAuBH;;;AAP3B,AAAA,gEAAA,hEAAMF,2EAQFE;AARJ,AASG,OAACI,iDAAwBJ;;;AAT5B,AAAA,0DAAA,1DAAMF;;AAAN,AAWA;;;;2CAAA,3CAAMO,8FAGHC,YAAYC;AAHf,AAAA,oBAISD;AAJT;AAAA,AAAA,MAAA,KAAAP,MAAA;;;AAAA,oBAIqBQ;AAJrB;AAAA,AAAA,MAAA,KAAAR,MAAA;;;AAKE,GAAM,AAACS,6CAAE,AAACC,oCAAgBF,gBAAgBD;AAA1C,AACEC;;AADF;;;AAGF;;;;gCAAA,hCAAMG,wEAGHJ,YAAYK;AAHf,AAIE,sBAAA,WAAAC,1BAACC;AAAD,AAAO,4DAAAD,rDAACP,yCAAgBC;GAAeK;;AAEzC;;;yCAAA,zCAAMG,0FAEHC;AAFH,AAGW,OAACC,wBAAQ,AAACC,sDAAuBF;;AAM5C;;;yCAAA,zCAAMG,0FAEHC;AAFH,AAGW,OAACC,uBAAO,AAACC,gEAAaF;;AAGjC;;;sCAAA,tCAAMG,oFAEHC;AAFH,4EAGM,qBAAA,WAAAC,hCAACC,5EAAoF,OAACI;AAAtF,AAAuB,GAAI,qBAAAL,rBAACE;AAAQ,sDAAAF,iBAAA,hEAACG;;AAAdH;;GAAmC,AAACI,wCAAkBL,QAAQ;;AAE3F;;;AAAKO,qCAAsEC","names":["var_args","G__42231","fulcro.client.util/force-render","js/Error","reconciler","keywords","fulcro.client.impl.protocols.queue_BANG_.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.protocols/schedule-render!","fulcro.client.primitives/force-root-render!","fulcro.client.util/react-instance?","react-class","react-instance","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","fulcro.client.primitives/react-type","fulcro.client.util/first-node","sequence-of-react-instances","p1__42242#","cljs.core/some","fulcro.client.util/transit-clj->str","coll","cognitect.transit/write","fulcro.transit.writer.cljs$core$IFn$_invoke$arity$0","fulcro.client.util/transit-str->clj","str","cognitect.transit/read","fulcro.client.primitives.reader.cljs$core$IFn$_invoke$arity$0","fulcro.client.util/strip-parameters","query","p1__42255#","clojure.walk/prewalk","cljs.core/map?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.parser/query->ast","fulcro.client.impl.parser.ast__GT_expr.cljs$core$IFn$_invoke$arity$2","fulcro.client.util/integrate-ident","fulcro.client.primitives/integrate-ident"],"sourcesContent":["(ns fulcro.client.util\n  (:require\n    [clojure.spec.alpha :as s]\n    clojure.walk\n    [fulcro.client.primitives :as prim]\n    [fulcro.client.impl.protocols :as proto]\n    fulcro.transit\n    [fulcro.util :as util :refer [unique-key]]\n    [cognitect.transit :as t]\n    [fulcro.client.impl.parser :as parser]\n    #?(:clj\n    [clojure.spec.gen.alpha :as sg])))\n\n(defn force-render\n  \"Re-render components. If only a reconciler is supplied then it forces a full React DOM refresh.\n\n  If you supply an additional vector of keywords and idents then it will try to rerender only those components that mention\n  those things in their queries.\"\n  ([reconciler keywords]\n   (proto/queue! reconciler keywords)\n   (proto/schedule-render! reconciler))\n  ([reconciler]\n   (prim/force-root-render! reconciler)))\n\n(defn react-instance?\n  \"Returns the react-instance (which is logically true) iff the given react instance is an instance of the given react class.\n  Otherwise returns nil.\"\n  [react-class react-instance]\n  {:pre [react-class react-instance]}\n  (when (= (prim/react-type react-instance) react-class)\n    react-instance))\n\n(defn first-node\n  \"Finds (and returns) the first instance of the given React class (or nil if not found) in a sequence of instances. Useful\n  for finding a child of the correct type when nesting react components.\"\n  [react-class sequence-of-react-instances]\n  (some #(react-instance? react-class %) sequence-of-react-instances))\n\n(defn transit-clj->str\n  \"Use transit to encode clj data as a string. Useful for encoding initial app state from server-side rendering.\"\n  [coll]\n  #?(:cljs (t/write (fulcro.transit/writer) coll)\n     :clj\n           (with-open [out (java.io.ByteArrayOutputStream.)]\n             (t/write (fulcro.transit/writer out) coll)\n             (.toString out \"UTF-8\"))))\n\n(defn transit-str->clj\n  \"Use transit to decode a string into a clj data structure. Useful for decoding initial app state when starting from a server-side rendering.\"\n  [str]\n  #?(:cljs (t/read (prim/reader) str)\n     :clj  (t/read (prim/reader (java.io.ByteArrayInputStream. (.getBytes str \"UTF-8\"))))))\n\n(defn strip-parameters\n  \"Removes parameters from the query, e.g. for PCI compliant logging.\"\n  [query]\n  (-> (clojure.walk/prewalk #(if (map? %) (dissoc % :params) %) (parser/query->ast query)) (parser/ast->expr true)))\n\n(def integrate-ident \"DEPRECATED: Now defined in fulcro.client.primitives\" prim/integrate-ident)\n"]}