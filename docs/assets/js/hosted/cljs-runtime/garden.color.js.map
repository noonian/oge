{"version":3,"file":"garden.color.js","sources":["garden/color.cljc"],"mappings":"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","names":["this__12534__auto__","k__12535__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__12536__auto__","k31140","else__12537__auto__","G__31145","cljs.core/Keyword","red","green","blue","hue","saturation","lightness","alpha","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__12548__auto__","writer__12549__auto__","opts__12550__auto__","pr-pair__12551__auto__","keyval__12552__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__31139","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__12532__auto__","__meta","this__12529__auto__","__hash","this__12538__auto__","cljs.core/count","this__12530__auto__","h__4030__auto__","fexpr__31146","coll__12531__auto__","cljs.core/hash-unordered-coll","this31141","other31142","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__12543__auto__","k__12544__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__12541__auto__","k__12542__auto__","pred__31147","cljs.core/keyword-identical?","expr__31148","G__31150","G__31151","G__31152","G__31153","G__31154","G__31155","G__31156","G__31157","G__31158","G__31159","G__31160","G__31161","G__31162","G__31163","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__12546__auto__","cljs.core/seq","this__12533__auto__","this__12539__auto__","entry__12540__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","self__","args31144","cljs.core/aclone","garden.color/CSSColor","this__4208__auto__","cljs.core/List","writer__4209__auto__","cljs.core/-write","G__31143","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","garden.color/->CSSColor","garden.color/map->CSSColor","this","k","cljs.core.get.cljs$core$IFn$_invoke$arity$2","missing","garden.color/as-color","var_args","G__31168","garden.color/rgb","js/Error","p__31169","vec__31170","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","r","g","b","vs","p1__31166#","cljs.core/every?","garden.util/between?","G__31173","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","garden.color.rgb.cljs$core$IFn$_invoke$arity$1","G__31176","garden.color/rgba","p__31177","vec__31178","a","G__31181","garden.color.rgba.cljs$core$IFn$_invoke$arity$1","G__31185","garden.color/hsl","p__31186","vec__31187","h","s","l","vec__31190","p1__31183#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","and__3911__auto__","G__31193","cljs.core/mod","garden.color.hsl.cljs$core$IFn$_invoke$arity$1","G__31196","garden.color/hsla","p__31197","vec__31198","G__31201","garden.color.hsla.cljs$core$IFn$_invoke$arity$1","garden.color/rgb?","color","cljs.core/map?","garden.color/hsl?","garden.color/hsla?","garden.color/color?","x","or__3922__auto__","garden.color/hex-re","garden.color/hex?","cljs.core/boolean","cljs.core/re-matches","garden.color/hex->rgb","temp__5457__auto__","vec__31205","_","hex","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","p1__31203#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/re-seq","p1__31204#","garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic","p__31208","map__31209","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","garden.color/rgb->hex","v","garden.util.format.cljs$core$IFn$_invoke$arity$variadic","garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic","clojure.string/replace","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","hex-part","garden.color/trim-one","p__31212","map__31213","garden.color/rgb->hsl","vec__31215","p1__31211#","mx","x__4006__auto__","y__4007__auto__","mn","x__4009__auto__","y__4010__auto__","d","pred__31218","expr__31219","cljs.core/=","garden.color.hsl.cljs$core$IFn$_invoke$arity$3","p__31222","map__31223","garden.color/hsl->rgb","vec__31225","m2","m1","p1__31221#","G__31228","Math/round","G__31229","G__31230","G__31231","garden.color/hue->rgb","G__31232","G__31233","G__31234","garden.color/hsl->hex","garden.color/hex->hsl","garden.color/percent-clip","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","garden.util/clip","garden.color/zero-to-one-clip","garden.color/rgb-clip","garden.color/as-hex","garden.color/as-rgb","garden.color/as-hsl","garden.color/as-hsla","current-alpha","garden.color/restrict-rgb","m","cljs.core/select-keys","garden.color/make-color-operation","op","o","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","G__31235","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","more","color-op","garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2","garden.color/color+","cljs.core/+","garden.color/color-","cljs.core/-","garden.color/color*","cljs.core/*","cljs.core//","garden.color/color-div","garden.color/update-hsla-field","field","f","cljs.core.update.cljs$core$IFn$_invoke$arity$4","garden.color/rotate-hue","amount","p1__31241#","garden.color/saturate","garden.color/desaturate","garden.color/lighten","garden.color/darken","garden.color/transparentize","garden.color/opacify","garden.color/invert","G__31244","G__31251","garden.color/mix","args-arr__4514__auto__","len__4499__auto__","i__4500__auto__","argseq__4515__auto__","cljs.core/IndexedSeq","seq31248","G__31249","cljs.core/first","cljs.core/next","G__31250","self__4486__auto__","color-1","color-2","c1","c2","G__31252","garden.util/average","garden.color.mix.cljs$core$IFn$_invoke$arity$2","garden.color/complement","args__4502__auto__","argseq__4503__auto__","garden.color/hue-rotations","seq31263","G__31264","amounts","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","G__31271","garden.color/analogous","garden.color.analogous.cljs$core$IFn$_invoke$arity$2","clockwise?","sign","garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic","garden.color/triad","G__31279","garden.color/split-complement","garden.color.split_complement.cljs$core$IFn$_invoke$arity$2","distance-from-complement","G__31282","garden.color/tetrad","garden.color.tetrad.cljs$core$IFn$_invoke$arity$2","angle","G__31283","Math/abs","G__31289","garden.color/shades","garden.color.shades.cljs$core$IFn$_invoke$arity$2","step","c","iter__4292__auto__","s__31296","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4290__auto__","size__4291__auto__","b__31298","cljs.core/chunk-buffer","i__31297","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31295","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","i","cljs.core.range.cljs$core$IFn$_invoke$arity$2","G__31300","Math/floor","garden.color/color-name->hex","garden.color/ex-info-color-name","n","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/set","cljs.core/keys","garden.color/color-name->color","cljs.core/memoize","garden.color/from-name","temp__5455__auto__","G__31309","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__31314","garden.color/scale-color-value","value","garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$4","min-val","max-val","garden.color/scale-lightness","garden.color/scale-saturation","garden.color/scale-alpha","p1__31320#","p2__31321#","G__31324","garden.color/decrown-hex","garden.color/crown-hex","cljs.core/re-find","garden.color/expand-hex","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core/vector","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","garden.color/hex->long","js/parseInt","garden.color/long->hex","long","garden.color/weighted-mix","weight","vec__31330","vec__31333","weight-1","weight-2","p1__31329#","long-1","long-2","cljs.core/chunk-first"],"sourcesContent":["(ns garden.color\n  \"Utilities for color creation, conversion, and manipulation.\"\n  (:refer-clojure :exclude [complement])\n  #?(:cljs\n     (:require-macros\n      [garden.color :refer [defcolor-operation]]))\n  (:require\n   [clojure.string :as string]\n   [garden.util :as util])\n  #?(:clj\n     (:import clojure.lang.IFn)))\n\n;; Many of the functions in this namespace were ported or inspired by\n;; the implementations included with Sass\n;; (http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html).\n;; Some additional functions have been added such as `triad` and\n;; `tetrad` for generating sets of colors.\n\n;; Converts a color to a hexadecimal string (implementation below).\n(declare as-hex)\n\n(defrecord CSSColor [red green blue hue saturation lightness alpha]\n  IFn\n  #?(:clj\n      (invoke [this] this))\n  #?(:clj\n      (invoke [this k]\n              (get this k)))\n  #?(:clj\n      (invoke [this k missing]\n              (get this k missing)))\n  #?(:cljs\n      (-invoke [this] this))\n  #?(:cljs\n      (-invoke [this k]\n               (get this k)))\n  #?(:cljs\n      (-invoke [this k missing]\n               (get this k missing)))\n  #?(:clj\n      (applyTo [this args]\n               (clojure.lang.AFn/applyToHelper this args))))\n\n(def as-color map->CSSColor)\n\n(defn rgb\n  \"Create an RGB color.\"\n  ([[r g b :as vs]]\n     (if (every? #(util/between? % 0 255) vs)\n       (as-color {:red r :green g :blue b})\n       (throw\n        (ex-info \"RGB values must be between 0 and 255\" {}))))\n  ([r g b]\n     (rgb [r g b])))\n\n(defn rgba\n  \"Create an RGBA color.\"\n  ([[r g b a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (rgb [r g b]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([r g b a]\n     (rgba [r g b a])))\n\n(defn hsl\n  \"Create an HSL color.\"\n  ([[h s l]]\n     ;; Handle CSSUnits.\n     (let [[h s l] (map #(get % :magnitude %) [h s l])]\n       (if (and (util/between? s 0 100)\n                (util/between? l 0 100))\n         (as-color {:hue (mod h 360) :saturation s :lightness l})\n         (throw\n          (ex-info \"Saturation and lightness must be between 0(%) and 100(%)\" {})))))\n  ([h s l]\n     (hsl [h s l])))\n\n(defn hsla\n  \"Create an HSLA color.\"\n  ([[h s l a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (hsl [h s l]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([h s l a]\n     (hsla [h s l a])))\n\n(defn rgb?\n  \"Return true if color is an RGB color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:red :green :blue})))\n\n(defn hsl?\n  \"Return true if color is an HSL color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness})))\n\n(defn hsla?\n  \"Return true if color is an HSLA color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness :alpha})))\n\n(defn color?\n  \"Return true if x is a color.\"\n  [x]\n  (or (rgb? x) (hsl? x)))\n\n(def ^{:doc \"Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \\\"#\\\". The color portion is captured.\"}\n  ;; Quantifier must be in this order or JavaScript engines will match\n  ;; 3 chars even when 6 are provided (failing re-matches).\n  hex-re #\"#?([\\da-fA-F]{6}|[\\da-fA-F]{3})\")\n\n(defn hex?\n  \"Returns true if x is a hexadecimal color.\"\n  [x]\n  (boolean (and (string? x) (re-matches hex-re x))))\n\n(defn hex->rgb\n  \"Convert a hexadecimal color to an RGB color map.\"\n  [s]\n  (when-let [[_ hex] (re-matches hex-re s)]\n    (let [hex (if (= 3 (count hex))\n                (apply str (mapcat #(list % %) hex))\n                hex)]\n      (->> (re-seq #\"[\\da-fA-F]{2}\" hex)\n           (map #(util/string->int % 16))\n           (rgb)))))\n\n(defn rgb->hex\n  \"Convert an RGB color map to a hexadecimal color.\"\n  [{r :red g :green b :blue}]\n  (letfn [(hex-part [v]\n            (-> (util/format \"%2s\" (util/int->string v 16))\n                (string/replace \" \" \"0\")))]\n    (apply str \"#\" (map hex-part [r g b]))))\n\n(defn trim-one [x]\n  (if (< 1 x) 1 x))\n\n(defn rgb->hsl\n  \"Convert an RGB color map to an HSL color map.\"\n  [{:keys [red green blue] :as color}]\n  (if (hsl? color)\n    color\n    (let [[r g b] (map #(/ % 255) [red green blue])\n          mx (max r g b)\n          mn (min r g b)\n          d (- mx mn)\n          h (condp = mx\n              mn 0\n              r (* 60 (/ (- g b) d))\n              g (+ (* 60 (/ (- b r) d)) 120)\n              b (+ (* 60 (/ (- r g) d)) 240))\n          l (trim-one (/ (+ mx mn) 2))\n          s (trim-one\n              (cond\n                (= mx mn) 0\n                (< l 0.5) (/ d (* 2 l))\n                :else (/ d (- 2 (* 2 l)))))]\n      (hsl (mod h 360) (* 100 s) (* 100 l)))))\n\n(declare hue->rgb)\n\n;; SEE: http://www.w3.org/TR/css3-color/#hsl-color.\n(defn hsl->rgb\n  \"Convert an HSL color map to an RGB color map.\"\n  [{:keys  [hue saturation lightness] :as color}]\n  (if (rgb? color)\n    color\n    (let [h (/ hue 360.0)\n          s (/ saturation 100.0)\n          l (/ lightness 100.0)\n          m2 (if (<= l 0.5)\n               (* l (inc s))\n               (- (+ l s) (* l s)))\n          m1 (- (* 2 l) m2)\n          [r g b] (map #(Math/round (* % 0xff))\n                       [(hue->rgb m1 m2 (+ h (/ 1.0 3)))\n                        (hue->rgb m1 m2 h)\n                        (hue->rgb m1 m2 (- h (/ 1.0 3)))])]\n      (rgb [r g b]))))\n\n(defn- hue->rgb\n  [m1 m2 h]\n  (let [h (cond\n           (< h 0) (inc h)\n           (> h 1) (dec h)\n           :else h)]\n    (cond\n     (< (* 6 h) 1) (+ m1 (* (- m2 m1) h 6))\n     (< (* 2 h) 1) m2\n     (< (* 3 h) 2) (+ m1 (* (- m2 m1) (- (/ 2.0 3) h) 6))\n     :else m1)))\n\n(defn hsl->hex\n  \"Convert an HSL color map to a hexadecimal string.\"\n  [color]\n  (-> color hsl->rgb rgb->hex))\n\n(defn hex->hsl\n  \"Convert a hexadecimal color to an HSL color.\"\n  [color]\n  (-> color hex->rgb rgb->hsl))\n\n(def percent-clip\n  (partial util/clip 0 100))\n\n(def ^{:arglists '([n])\n       :private true}\n  zero-to-one-clip\n  (partial util/clip 0.0 1.0))\n\n(def rgb-clip\n  (partial util/clip 0 255))\n\n(defn as-hex\n  \"Convert a color to a hexadecimal string.\"\n  [x]\n  (cond\n   (hex? x) x\n   (rgb? x) (rgb->hex x)\n   (hsl? x) (hsl->hex x)\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-rgb\n  \"Convert a color to a RGB.\"\n  [x]\n  (cond\n   (rgb? x) x\n   (hsl? x) (hsl->rgb x)\n   (hex? x) (hex->rgb x)\n   (number? x) (rgb (map rgb-clip [x x x]))\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsl\n  \"Convert a color to a HSL.\"\n  [x]\n  (cond\n   (hsl? x) x\n   (rgb? x) (rgb->hsl x)\n   (hex? x) (hex->hsl x)\n   (number? x) (hsl [x (percent-clip x) (percent-clip x)])\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsla\n  \"Converts a color to HSLA. Assumes an alpha value of 1.00 unless one is\n  currently set on color.\"\n  [color]\n  (let [current-alpha (get color :alpha 1.00)]\n    (if (hsla? color)\n      color\n      (-> color as-hsl (assoc :alpha current-alpha)))))\n\n(defn- restrict-rgb\n  [m]\n  (select-keys m [:red :green :blue]))\n\n(defn- make-color-operation\n  [op]\n  (fn color-op\n    ([a] a)\n    ([a b]\n       (let [o (comp rgb-clip op)\n             a (restrict-rgb (as-rgb a))\n             b (restrict-rgb (as-rgb b))]\n         (as-color (merge-with o a b))))\n    ([a b & more]\n       (reduce color-op (color-op a b) more))))\n\n#?(:clj\n   (defmacro ^:private defcolor-operation [name operator]\n     `(def ~name (make-color-operation ~operator))))\n\n(defcolor-operation\n  ^{:doc \"Add the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color+ +)\n\n(defcolor-operation\n  ^{:doc \"Subtract the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color- -)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color* *)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color-div /)\n\n(defn- update-hsla-field\n  [color field f v]\n  (let [v (:magnitude v v)]\n    (-> color as-hsla (update field f v))))\n\n(defn rotate-hue\n  \"Rotates the hue value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :hue (comp #(mod % 360) +) amount))\n\n(defn saturate\n  \"Increase the saturation value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :saturation (comp percent-clip +) amount))\n\n(defn desaturate\n  \"Decrease the saturation value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :saturation (comp percent-clip -) amount))\n\n(defn lighten\n  \"Increase the lightness value a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :lightness (comp percent-clip +) amount))\n\n(defn darken\n  \"Decrease the lightness value a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :lightness (comp percent-clip -) amount))\n\n(defn transparentize\n  \"Decreases the alpha value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :alpha (comp zero-to-one-clip -) amount))\n\n(defn opacify\n  \"Increases the alpha value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :alpha (comp zero-to-one-clip +) amount))\n\n(defn invert\n  \"Return the inversion of a color.\"\n  [color]\n  (as-color (merge-with - {:red 255 :green 255 :blue 255} (as-rgb color))))\n\n(defn mix\n  \"Mix two or more colors by averaging their RGB channels.\"\n  ([color-1 color-2]\n     (let [c1 (restrict-rgb (as-rgb color-1))\n           c2 (restrict-rgb (as-rgb color-2))]\n       (as-color (merge-with util/average c1 c2))))\n  ([color-1 color-2 & more]\n     (reduce mix (mix color-1 color-2) more)))\n\n;;;; Color wheel functions.\n\n(defn complement\n  \"Return the complement of a color.\"\n  [color]\n  (rotate-hue color 180))\n\n(defn- hue-rotations\n  ([color & amounts]\n     (map (partial rotate-hue color) amounts)))\n\n(defn analogous\n  \"Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.\"\n  ([color]\n     (analogous color true))\n  ([color clockwise?]\n     (let [sign (if clockwise? + -)]\n       (hue-rotations color 0 (sign 30) (sign 60)))))\n\n(defn triad\n  \"Given a color return a triple of colors which are equidistance apart\n  on the color wheel.\"\n  [color]\n  (hue-rotations color 0 120 240))\n\n(defn split-complement\n  \"Given a color return a triple of the color and the two colors on\n  either side of it's complement.\"\n  ([color]\n     (split-complement color 130))\n  ([color distance-from-complement]\n     (let [d (util/clip 1 179 distance-from-complement)]\n         (hue-rotations color 0 d (- d)))))\n\n(defn tetrad\n  \"Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).\"\n  ([color]\n     (tetrad color 90))\n  ([color angle]\n     (let [a (util/clip 1 90 (Math/abs (:magnitude angle angle)))\n           color-2 (rotate-hue color a)]\n       [(rotate-hue color 0)\n        (complement color)\n        color-2\n        (complement color-2)])))\n\n(defn shades\n  \"Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.\"\n  ([color]\n     (shades color 10))\n  ([color step]\n     (let [c (as-hsl color)]\n       (for [i (range 1 (Math/floor (/ 100.0 step)))]\n         (assoc c :lightness (* i step))))))\n\n;; ---------------------------------------------------------------------\n;; CSS color name conversion\n\n(def color-name->hex\n  {:aquamarine \"#7fffd4\"\n   :aliceblue \"#f0f8ff\"\n   :antiquewhite \"#faebd7\"\n   :aqua \"#00ffff\"\n   :azure \"#f0ffff\"\n   :beige \"#f5f5dc\"\n   :bisque \"#ffe4c4\"\n   :black \"#000000\"\n   :blanchedalmond \"#ffebcd\"\n   :blue \"#0000ff\"\n   :blueviolet \"#8a2be2\"\n   :brown \"#a52a2a\"\n   :burlywood \"#deb887\"\n   :cadetblue \"#5f9ea0\"\n   :chartreuse \"#7fff00\"\n   :chocolate \"#d2691e\"\n   :coral \"#ff7f50\"\n   :cornflowerblue \"#6495ed\"\n   :cornsilk \"#fff8dc\"\n   :crimson \"#dc143c\"\n   :cyan \"#00ffff\"\n   :darkblue \"#00008b\"\n   :darkcyan \"#008b8b\"\n   :darkgoldenrod \"#b8860b\"\n   :darkgray \"#a9a9a9\"\n   :darkgreen \"#006400\"\n   :darkgrey \"#a9a9a9\"\n   :darkkhaki \"#bdb76b\"\n   :darkmagenta \"#8b008b\"\n   :darkolivegreen \"#556b2f\"\n   :darkorange \"#ff8c00\"\n   :darkorchid \"#9932cc\"\n   :darkred \"#8b0000\"\n   :darksalmon \"#e9967a\"\n   :darkseagreen \"#8fbc8f\"\n   :darkslateblue \"#483d8b\"\n   :darkslategray \"#2f4f4f\"\n   :darkslategrey \"#2f4f4f\"\n   :darkturquoise \"#00ced1\"\n   :darkviolet \"#9400d3\"\n   :deeppink \"#ff1493\"\n   :deepskyblue \"#00bfff\"\n   :dimgray \"#696969\"\n   :dimgrey \"#696969\"\n   :dodgerblue \"#1e90ff\"\n   :firebrick \"#b22222\"\n   :floralwhite \"#fffaf0\"\n   :forestgreen \"#228b22\"\n   :fuchsia \"#ff00ff\"\n   :gainsboro \"#dcdcdc\"\n   :ghostwhite \"#f8f8ff\"\n   :gold \"#ffd700\"\n   :goldenrod \"#daa520\"\n   :gray \"#808080\"\n   :green \"#008000\"\n   :greenyellow \"#adff2f\"\n   :honeydew \"#f0fff0\"\n   :hotpink \"#ff69b4\"\n   :indianred \"#cd5c5c\"\n   :indigo \"#4b0082\"\n   :ivory \"#fffff0\"\n   :khaki \"#f0e68c\"\n   :lavender \"#e6e6fa\"\n   :lavenderblush \"#fff0f5\"\n   :lawngreen \"#7cfc00\"\n   :lemonchiffon \"#fffacd\"\n   :lightblue \"#add8e6\"\n   :lightcoral \"#f08080\"\n   :lightcyan \"#e0ffff\"\n   :lightgoldenrodyellow \"#fafad2\"\n   :lightgray \"#d3d3d3\"\n   :lightgreen \"#90ee90\"\n   :lightgrey \"#d3d3d3\"\n   :lightpink \"#ffb6c1\"\n   :lightsalmon \"#ffa07a\"\n   :lightseagreen \"#20b2aa\"\n   :lightskyblue \"#87cefa\"\n   :lightslategray \"#778899\"\n   :lightslategrey \"#778899\"\n   :lightsteelblue \"#b0c4de\"\n   :lightyellow \"#ffffe0\"\n   :lime \"#00ff00\"\n   :limegreen \"#32cd32\"\n   :linen \"#faf0e6\"\n   :magenta \"#ff00ff\"\n   :maroon \"#800000\"\n   :mediumaquamarine \"#66cdaa\"\n   :mediumblue \"#0000cd\"\n   :mediumorchid \"#ba55d3\"\n   :mediumpurple \"#9370db\"\n   :mediumseagreen \"#3cb371\"\n   :mediumslateblue \"#7b68ee\"\n   :mediumspringgreen \"#00fa9a\"\n   :mediumturquoise \"#48d1cc\"\n   :mediumvioletred \"#c71585\"\n   :midnightblue \"#191970\"\n   :mintcream \"#f5fffa\"\n   :mistyrose \"#ffe4e1\"\n   :moccasin \"#ffe4b5\"\n   :navajowhite \"#ffdead\"\n   :navy \"#000080\"\n   :oldlace \"#fdf5e6\"\n   :olive \"#808000\"\n   :olivedrab \"#6b8e23\"\n   :orange \"#ffa500\"\n   :orangered \"#ff4500\"\n   :orchid \"#da70d6\"\n   :palegoldenrod \"#eee8aa\"\n   :palegreen \"#98fb98\"\n   :paleturquoise \"#afeeee\"\n   :palevioletred \"#db7093\"\n   :papayawhip \"#ffefd5\"\n   :peachpuff \"#ffdab9\"\n   :peru \"#cd853f\"\n   :pink \"#ffc0cb\"\n   :plum \"#dda0dd\"\n   :powderblue \"#b0e0e6\"\n   :purple \"#800080\"\n   :red \"#ff0000\"\n   :rosybrown \"#bc8f8f\"\n   :royalblue \"#4169e1\"\n   :saddlebrown \"#8b4513\"\n   :salmon \"#fa8072\"\n   :sandybrown \"#f4a460\"\n   :seagreen \"#2e8b57\"\n   :seashell \"#fff5ee\"\n   :sienna \"#a0522d\"\n   :silver \"#c0c0c0\"\n   :skyblue \"#87ceeb\"\n   :slateblue \"#6a5acd\"\n   :slategray \"#708090\"\n   :slategrey \"#708090\"\n   :snow \"#fffafa\"\n   :springgreen \"#00ff7f\"\n   :steelblue \"#4682b4\"\n   :tan \"#d2b48c\"\n   :teal \"#008080\"\n   :thistle \"#d8bfd8\"\n   :tomato \"#ff6347\"\n   :turquoise \"#40e0d0\"\n   :violet \"#ee82ee\"\n   :wheat \"#f5deb3\"\n   :white \"#ffffff\"\n   :whitesmoke \"#f5f5f5\"\n   :yellow \"#ffff00\"\n   :yellowgreen \"#9acd32\"})\n\n(defn- ex-info-color-name\n  \"Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors.\"\n  [n]\n  (ex-info\n   (str \"Unknown color \" (pr-str n) \" see (:expected (ex-data e)) for a list of color names\")\n   {:given n\n    :expected (set (keys color-name->hex))}))\n\n(def\n  ^{:private true\n    :doc \"Helper function for from-name.\"}\n  color-name->color\n  (memoize (fn [k] (color-name->hex k))))\n\n(defn from-name\n  \"Given a CSS color name n return an instance of CSSColor.\"\n  [n]\n  (if-let [h (color-name->color (keyword n))]\n    h\n    (throw (ex-info-color-name n))))\n\n(defn- scale-color-value\n  ([value amount]\n    (scale-color-value value amount 0 100))\n  ([value amount min-val max-val]\n    (util/clip min-val max-val (* value (+ 1 (/ amount 100))))))\n\n\n(defn scale-lightness\n  \"Scales the lightness of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :lightness scale-color-value amount))\n\n(defn scale-saturation\n  \"Scales the saturation of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :saturation scale-color-value amount))\n\n(defn scale-alpha\n  \"Scales the alpha of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :alpha #(zero-to-one-clip (* %1 (+ 1 (/ %2 100)))) amount))\n\n(defn- decrown-hex [hex]\n  (string/replace hex #\"^#\" \"\"))\n\n(defn- crown-hex [hex]\n  (if (re-find #\"^#\" hex)\n    hex\n    (str \"#\" hex)))\n\n(defn- expand-hex\n  \"(expand-hex \\\"#abc\\\") -> \\\"aabbcc\\\"\n   (expand-hex \\\"333333\\\") -> \\\"333333\\\"\"\n  [hex]\n  (as-> (decrown-hex hex) _\n        (cond\n         (= 3 (count _)) (string/join (mapcat vector _ _))\n         (= 1 (count _)) (string/join (repeat 6 _))\n         :else _)))\n\n(defn- hex->long\n  \"(hex->long \\\"#abc\\\") -> 11189196\"\n  [hex]\n  (-> hex\n      (string/replace #\"^#\" \"\")\n      (expand-hex)\n      #?(:clj (Long/parseLong 16)\n         :cljs (js/parseInt 16))))\n\n(defn- long->hex\n  \"(long->hex 11189196) -> \\\"aabbcc\\\"\"\n  [long]\n  #?(:clj (Integer/toHexString long)\n     :cljs (.toString long 16)))\n\n(defn weighted-mix\n  \"`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string.\"\n  [color-1 color-2 weight]\n  (let [[weight-1 weight-2] (map #(/ % 100) [(- 100 weight) weight])\n        [long-1 long-2] (map (comp hex->long as-hex)\n                             [color-1 color-2])]\n    (-> (+ (* long-1 weight-1) (* long-2 weight-2))\n        (long->hex)\n        (expand-hex)\n        (crown-hex))))\n"]}