{"version":3,"file":"cljs.stacktrace.js","sources":["cljs/stacktrace.cljc"],"mappings":"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","names":["method-table__4382__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4383__auto__","method-cache__4384__auto__","cached-hierarchy__4385__auto__","hierarchy__4386__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/parse-stacktrace","repl-env","st","err","opts","cljs.stacktrace/parse-int","s","js/parseInt","cljs.stacktrace/starts-with?","s0","s1","goog.string/startsWith","cljs.stacktrace/ends-with?","goog.string/endsWith","cljs.stacktrace/string->regex","js/RegExp","cljs.stacktrace/output-directory","or__3922__auto__","cljs.core/-add-method","cljs.stacktrace/parse-file-line-column","flc","cljs.core/not","cljs.core/re-find","vec__27551","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__27554","xs","clojure.string.split.cljs$core$IFn$_invoke$arity$2","pre","line","column","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__27557","p__27558","vec__27560","vec__27563","post","x","i","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","cljs.core.range.cljs$core$IFn$_invoke$arity$3","cljs.core/count","file","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__27568","clojure.string/replace","G__27574","G__27575","p__27591","p__27592","map__27594","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__27595","cljs.stacktrace/parse-file","host","host-port","port","asset-path","urlpat","match","cljs.core/contains?","and__3911__auto__","temp__5455__auto__","asset-root","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/chrome-st-el->frame","st-el","vec__27618","vec__27621","function","cljs.core/first","cljs.core/last","clojure.string/blank?","clojure.string/split-lines","p1__27634#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","p1__27637#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","p1__27638#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/vec","cljs.stacktrace/safari-st-el->frame","vec__27655","vec__27658","clojure.string/trim","p1__27678#","p1__27679#","p1__27680#","cljs.stacktrace/firefox-clean-function","f","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","idx","cljs.stacktrace/firefox-st-el->frame","vec__27706","vec__27709","p1__27728#","p1__27729#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p1__27731#","p__27744","map__27745","output-dir","frame-str","vec__27784","vec__27787","file-side","line-fn-side","process-frame","p__27816","map__27820","vec__27840","vec__27843","file-and-line","file-part","line-part","p__27873","map__27874","clojure.string/starts-with?","vec__27904","vec__27907","parts","file&line","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/second","col-part","G__27919","parse-source-loc-info","cljs.stacktrace/remove-ext","cljs.stacktrace/mapped-line-column-call","sms","source-map","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","columns","p1__27954#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core/keys","mapped","p1__27955#","p2__27956#","cljs.core/inc","cljs.core/identity","default","adjust","get-best-column","p__27989","map__27990","cljs.stacktrace/mapped-frame","vec__27994","no-source-file?","line'","column'","call","file'","var_args","G__28015","cljs.stacktrace/mapped-stacktrace","js/Error","stacktrace","cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3","cljs.core/PersistentHashMap","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","munged-fn-name","unmunged-call-name","cljs.core/munge","mapped-frames","p1__28012#","cljs.core/memoize","call-merge","p1__28013#","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","call->function","G__28042","cljs.stacktrace/mapped-stacktrace-str","cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3","sb__4430__auto__","js/goog.string.StringBuffer","*print-newline*28043","cljs.core/*print-newline*","*print-fn*28044","cljs.core/*print-fn*","x__4431__auto__","seq__28047","cljs.core/seq","chunk__28048","count__28049","i__28050","map__28052","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__28061","cljs.core/next","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":[";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.stacktrace\n  (:require #?@(:clj  [[cljs.util :as util]\n                       [clojure.java.io :as io]]\n                :cljs [[goog.string :as gstring]])\n            [clojure.string :as string])\n  #?(:clj (:import [java.util.regex Pattern]\n                   [java.io File])))\n\n(defmulti parse-stacktrace\n  \"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str\"\n  (fn [repl-env st err opts] (:ua-product err)))\n\n(defn parse-int [s]\n  #?(:clj  (Long/parseLong s)\n     :cljs (js/parseInt s 10)))\n\n(defn starts-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.startsWith s0 s1)\n     :cljs (gstring/startsWith s0 s1)))\n\n(defn ends-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.endsWith s0 s1)\n     :cljs (gstring/endsWith s0 s1)))\n\n(defn string->regex [s]\n  #?(:clj  (Pattern/compile s)\n     :cljs (js/RegExp. s)))\n\n(defn output-directory [opts]\n  #?(:clj  (util/output-directory opts)\n     :cljs (or (:output-dir opts) \"out\")))\n\n(defmethod parse-stacktrace :default\n  [repl-env st err opts] st)\n\n(defn parse-file-line-column [flc]\n  (if-not (re-find #\":\" flc)\n    [flc nil nil]\n    (let [xs (string/split flc #\":\")\n          [pre [line column]]\n          (reduce\n            (fn [[pre post] [x i]]\n              (if (<= i 2)\n                [pre (conj post x)]\n                [(conj pre x) post]))\n            [[] []] (map vector xs (range (count xs) 0 -1)))\n          file (string/join \":\" pre)]\n      [(cond-> file\n         (starts-with? file \"(\") (string/replace \"(\" \"\"))\n       (parse-int\n         (cond-> line\n           (ends-with? line \")\") (string/replace \")\" \"\")))\n       (parse-int\n         (cond-> column\n           (ends-with? column \")\") (string/replace \")\" \"\")))])))\n\n(defn parse-file\n  \"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.\"\n  [{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]\n  (let [urlpat (if host\n                 (string->regex\n                   (str \"http://\" host \":\" (or host-port port) \"/\"))\n                 \"\")\n        match  (if host\n                 (re-find urlpat file)\n                 (contains? opts :output-dir))]\n    (if match\n      (-> file\n        (string/replace urlpat \"\")\n        (string/replace\n          (string->regex\n            ;; if :asset-path specified drop leading slash\n            (str \"^\" (or (and asset-path (string/replace asset-path #\"^/\" \"\"))\n                         (output-directory opts)) \"/\"))\n          \"\"))\n      (if-let [asset-root (:asset-root opts)]\n        (string/replace file asset-root \"\")\n        (throw\n          (ex-info (str \"Could not relativize URL \" file)\n            {:type :parse-stacktrace\n             :reason :relativize-url}))))))\n\n;; -----------------------------------------------------------------------------\n;; Chrome Stacktrace\n\n(defn chrome-st-el->frame\n  [repl-env st-el opts]\n  (let [xs (-> st-el\n             (string/replace #\"\\s+at\\s+\" \"\")\n             (string/split #\"\\s+\"))\n        [function flc] (if (== 1 (count xs))\n                         [nil (first xs)]\n                         [(first xs) (last xs)])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/replace function #\"Object\\.\" \"\")\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/replace function #\"Object\\.\" \"\")\n         :line nil\n         :column nil}))))\n\n(comment\n  (chrome-st-el->frame {:host \"localhost\" :port 9000}\n    \"\\tat cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\" {})\n  )\n\n(defmethod parse-stacktrace :chrome\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"    at eval\")))\n    (map #(chrome-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\n    at http://localhost:9000/out/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/out/cljs/core.js:16972:3)\n    at http://localhost:9000/out/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/out/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/out/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/out/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    nil)\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/js/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/js/cljs/core.js:5356:34)\n    at http://localhost:9000/js/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/js/cljs/core.js:16972:3)\n    at http://localhost:9000/js/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/js/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/js/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/js/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    {:asset-path \"/js\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4259:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4289:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5357:18)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:1:106)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:9:3)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:14:4)\n    at http://localhost:9000/out/clojure/browser/repl.js:23:267\n    at clojure$browser$repl$evaluate_javascript (http://localhost:9000/out/clojure/browser/repl.js:26:4)\n    at Object.callback (http://localhost:9000/out/clojure/browser/repl.js:121:169)\n    at goog.messaging.AbstractChannel.deliver (http://localhost:9000/out/goog/messaging/abstractchannel.js:142:13)\"\n    {:ua-product :chrome}\n    nil)\n\n  ;; Node.js example\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3999:8)\n    at Object.cljs$core$first [as first] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:4018:19)\n    at cljs$core$ffirst (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:5161:34)\n    at /home/my/cool/project/.cljs_bootstrap/cljs/core.js:16006:88\n    at cljs.core.map.cljs$core$IFn$_invoke$arity$2 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:16007:3)\n    at cljs.core.LazySeq.sval (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10244:109)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10335:10)\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3980:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28084:14)\n    at cljs.core.LazySeq.cljs$core$IPrintWithWriter$_pr_writer$arity$3 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28812:18)\"\n    {:ua-product :chrome}\n    {:output-dir \"/home/my/cool/project/.cljs_bootstrap\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Safari Stacktrace\n\n(defn safari-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/trim function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/trim function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\" {})\n\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/js/cljs/core.js:4259:17\" {:asset-path \"js\"})\n  )\n\n(defmethod parse-stacktrace :safari\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"eval code\")))\n    (remove string/blank?)\n    (map #(safari-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {}\n    \"cljs$core$seq@out/cljs/core.js:3999:17\n    cljs$core$first@out/cljs/core.js:4018:22\n    cljs$core$ffirst@out/cljs/core.js:5161:39\n    global code\"\n    {:ua-product :safari}\n    {:output-dir \"out\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4289:22\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5357:39\nhttp://localhost:9000/out/cljs/core.js:16972:92\nhttp://localhost:9000/out/cljs/core.js:16973:3\nhttp://localhost:9000/out/cljs/core.js:10982:133\nsval@http://localhost:9000/out/cljs/core.js:10983:3\ncljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11074:14\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4240:44\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28707:17\ncljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29386:38\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28912:57\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29011:32\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29015:20\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29078:24\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29092:48\ncljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29130:34\ncljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29139:39\neval code\neval@[native code]\nhttp://localhost:9000/out/clojure/browser/repl.js:23:271\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:26:4\nhttp://localhost:9000/out/clojure/browser/repl.js:121:173\ndeliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:21\nxpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:19\nmessageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:23\nfireListener@http://localhost:9000/out/goog/events/events.js:741:25\nhandleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:34\nhttp://localhost:9000/out/goog/events/events.js:276:42\"\n    {:ua-product :safari}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Firefox Stacktrace\n\n(defn firefox-clean-function [f]\n  (as-> f f\n    (cond\n      (string/blank? f) nil\n      (not= (.indexOf f \"</\") -1)\n      (let [idx (.indexOf f \"</\")]\n        (.substring f (+ idx 2)))\n      :else f)\n    (-> f\n      (string/replace #\"<\" \"\")\n      (string/replace #?(:clj #\"\\/\" :cljs (js/RegExp. \"\\\\/\")) \"\"))))\n\n(defn firefox-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (firefox-clean-function function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (firefox-clean-function function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\" {})\n  )\n\n(defmethod parse-stacktrace :firefox\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(= (.indexOf % \"> eval\") -1))\n    (remove string/blank?)\n    (map #(firefox-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4288:9\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5356:24\ncljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\ncljs.core.map</cljs$core$map__2/<@http://localhost:9000/out/cljs/core.js:16970:1\ncljs.core.LazySeq.prototype.sval/self__.s<@http://localhost:9000/out/cljs/core.js:10981:119\ncljs.core.LazySeq.prototype.sval@http://localhost:9000/out/cljs/core.js:10981:13\ncljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11073:1\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4239:8\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28706:4\ncljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29385:8\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28911:8\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29010:8\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29014:1\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29077:1\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29091:23\ncljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\ncljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:25\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:2\nclojure$browser$repl$evaluate_javascript/result<@http://localhost:9000/out/clojure/browser/repl.js:23:267\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:23:15\nclojure$browser$repl$connect/</<@http://localhost:9000/out/clojure/browser/repl.js:121:128\ngoog.messaging.AbstractChannel.prototype.deliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:5\ngoog.net.xpc.CrossPageChannel.prototype.xpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:7\ngoog.net.xpc.NativeMessagingTransport.messageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:1\ngoog.events.fireListener@http://localhost:9000/out/goog/events/events.js:741:10\ngoog.events.handleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:1\ngoog.events.getProxy/f<@http://localhost:9000/out/goog/events/events.js:276:16\"\n    {:ua-product :firefox}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Rhino Stacktrace\n\n(defmethod parse-stacktrace :rhino\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (== -1 (.indexOf frame-str \"\\tat\")))\n              (let [[file-side line-fn-side] (string/split frame-str #\":\")\n                   file                      (string/replace file-side #\"\\s+at\\s+\" \"\")\n                   [line function]           (string/split line-fn-side #\"\\s+\")]\n               {:file     (string/replace file\n                            (str output-dir\n                              #?(:clj File/separator :cljs \"/\"))\n                            \"\")\n                :function (when function\n                            (-> function\n                              (string/replace \"(\" \"\")\n                              (string/replace \")\" \"\")))\n                :line     (when (and line (not (string/blank? line)))\n                            (parse-int line))\n                :column   0})))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"\\tat .cljs_rhino_repl/goog/../cljs/core.js:4215 (seq)\n     \\tat .cljs_rhino_repl/goog/../cljs/core.js:4245 (first)\n     \\tat .cljs_rhino_repl/goog/../cljs/core.js:5295 (ffirst)\n     \\tat <cljs repl>:1\n     \\tat <cljs repl>:1\"\n    {:ua-product :rhino}\n    {:output-dir \".cljs_rhino_repl\"})\n\n  (parse-stacktrace {}\n    \"org.mozilla.javascript.JavaScriptException: Error: 1 is not ISeqable (.cljs_rhino_repl/goog/../cljs/core.js#3998)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:3998 (cljs$core$seq)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:4017 (cljs$core$first)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:5160 (cljs$core$ffirst)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:16005\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:16004\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:10243\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:10334\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:3979 (cljs$core$seq)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28083 (cljs$core$pr_sequential_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28811\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28267 (cljs$core$pr_writer_impl)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28349 (cljs$core$pr_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28353 (cljs$core$pr_seq_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28416 (cljs$core$pr_sb_with_opts)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28430 (cljs$core$pr_str_with_opts)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28524\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28520 (cljs$core$pr_str)\n   at <cljs repl>:1\n   \"\n    {:ua-product :rhino}\n    {:output-dir \".cljs_rhino_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Nashorn Stacktrace\n\n(defmethod parse-stacktrace :nashorn\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (== -1 (.indexOf frame-str \"\\tat\")))\n              (let [frame-str               (string/replace frame-str #\"\\s+at\\s+\" \"\")\n                    [function file-and-line] (string/split frame-str #\"\\s+\")\n                    [file-part line-part]    (string/split file-and-line #\":\")]\n                {:file     (string/replace (.substring file-part 1)\n                             (str output-dir\n                               #?(:clj File/separator :cljs \"/\"))\n                             \"\")\n                 :function function\n                 :line     (when (and line-part (not (string/blank? line-part)))\n                             (parse-int\n                               (.substring line-part 0\n                                 (dec (count line-part)))))\n                 :column   0})))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    \\tat cljs$core$seq (.cljs_nashorn_repl/goog/../cljs/core.js:3998)\n    \\tat cljs$core$first (.cljs_nashorn_repl/goog/../cljs/core.js:4017)\n    \\tat cljs$core$ffirst (.cljs_nashorn_repl/goog/../cljs/core.js:5160)\n    \\tat <anonymous> (.cljs_nashorn_repl/goog/../cljs/core.js:16005)\n    \\tat <anonymous> (.cljs_nashorn_repl/goog/../cljs/core.js:16004)\n    \\tat sval (.cljs_nashorn_repl/goog/../cljs/core.js:10243)\n    \\tat cljs$core$ISeqable$_seq$arity$1-6 (.cljs_nashorn_repl/goog/../cljs/core.js:10334)\n    \\tat cljs$core$seq (.cljs_nashorn_repl/goog/../cljs/core.js:3979)\n    \\tat cljs$core$pr_sequential_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28083)\n    \\tat cljs$core$IPrintWithWriter$_pr_writer$arity$3-5 (.cljs_nashorn_repl/goog/../cljs/core.js:28811)\n    \\tat cljs$core$pr_writer_impl (.cljs_nashorn_repl/goog/../cljs/core.js:28267)\n    \\tat cljs$core$pr_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28349)\n    \\tat cljs$core$pr_seq_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28353)\n    \\tat cljs$core$pr_sb_with_opts (.cljs_nashorn_repl/goog/../cljs/core.js:28416)\n    \\tat cljs$core$pr_str_with_opts (.cljs_nashorn_repl/goog/../cljs/core.js:28430)\n    \\tat cljs$core$IFn$_invoke$arity$variadic-71 (.cljs_nashorn_repl/goog/../cljs/core.js:28524)\n    \\tat cljs$core$pr_str (.cljs_nashorn_repl/goog/../cljs/core.js:28520)\n    \\tat <anonymous> (<eval>:1)\n    \\tat <program> (<eval>:1)\\n\"\n    {:ua-product :nashorn}\n    {:output-dir \".cljs_nashorn_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Node.js Stacktrace\n\n(defmethod parse-stacktrace :nodejs\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(parse-source-loc-info [x]\n            (when (and x (not (string/blank? x)))\n              (parse-int x)))\n          (process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (nil? (re-find #\"^\\s+at\" frame-str)))\n              (let [frame-str (string/replace frame-str #\"\\s+at\\s+\" \"\")]\n                (when-not (string/starts-with? frame-str \"repl:\")\n                  (let [parts (string/split frame-str #\"\\s+\")\n                        [function file&line] (if (== 2 (count parts))\n                                                   [(first parts)\n                                                    (subs (second parts) 1\n                                                      (dec (count (second parts))))]\n                                                   [nil (first parts)])\n                        [file-part line-part col-part] (string/split file&line #\":\")]\n                    {:file     (if function\n                                 (cond-> file-part\n                                   output-dir\n                                   (string/replace\n                                     (str output-dir\n                                       #?(:clj File/separator :cljs \"/\"))\n                                     \"\"))\n                                 file-part)\n                     :function function\n                     :line     (parse-source-loc-info line-part)\n                     :column   (parse-source-loc-info col-part)})))))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at cljs$core$seq (.cljs_node_repl/cljs/core.cljs:1118:20)\n    at repl:1:65\n    at repl:9:4\n    at repl:17:3\n    at repl:22:4\n    at Object.exports.runInThisContext (vm.js:54:17)\n    at Domain.<anonymous> ([stdin]:41:34)\n    at Domain.run (domain.js:228:14)\n    at Socket.<anonymous> ([stdin]:40:25)\n    at emitOne (events.js:77:13)\"\n\n    {:ua-product :nodejs}\n    {:output-dir \".cljs_node_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Stacktrace Mapping\n\n(defn remove-ext [file]\n  (-> file\n    (string/replace #\"\\.js$\" \"\")\n    (string/replace #\"\\.cljs$\" \"\")\n    (string/replace #\"\\.cljc$\" \"\")\n    (string/replace #\"\\.clj$\" \"\")))\n\n(defn mapped-line-column-call\n  \"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.\"\n  [sms file line column]\n  (let [source-map (get sms (symbol (string/replace (remove-ext file) \"/\" \".\")))]\n    ;; source maps are 0 indexed for columns\n    ;; multiple segments may exist at column\n    ;; the last segment seems most accurate\n    (letfn [(get-best-column [columns column]\n             (last (or (get columns\n                         (last (filter #(<= % (dec column))\n                                 (sort (keys columns)))))\n                     (second (first columns)))))\n           (adjust [mapped]\n             (vec (map #(%1 %2) [inc inc identity] mapped)))]\n     (let [default [line column nil]]\n       ;; source maps are 0 indexed for lines\n       (if-let [columns (get source-map (dec line))]\n         (adjust (map (get-best-column columns column) [:line :col :name]))\n         default)))))\n\n(defn mapped-frame\n  \"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.\"\n  [{:keys [function file line column]} sms opts]\n  (let [no-source-file?      (if-not file true (starts-with? file \"<\"))\n        [line' column' call] (if no-source-file?\n                               [line column nil]\n                               (mapped-line-column-call sms file line column))\n        file'                (when-not no-source-file?\n                               (if (ends-with? file \".js\")\n                                 (str (subs file 0 (- (count file) 3)) \".cljs\")\n                                 file))]\n    {:function function\n     :call     call\n     :file     (if no-source-file?\n                 (str \"NO_SOURCE_FILE\" (when file (str \" \" file)))\n                 file')\n     :line     line'\n     :column   column'}))\n\n(defn mapped-stacktrace\n  \"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.\"\n  ([stacktrace sms]\n   (mapped-stacktrace stacktrace sms nil))\n  ([stacktrace sms opts]\n   (letfn [(call->function [x]\n             (if (:call x)\n               (hash-map :function (:call x))\n               {}))\n           (call-merge [function call]\n             (merge-with\n               (fn [munged-fn-name unmunged-call-name]\n                 (if (= munged-fn-name\n                        (string/replace (munge unmunged-call-name) \".\" \"$\"))\n                   unmunged-call-name\n                   munged-fn-name))\n               function call))]\n     (let [mapped-frames (map (memoize #(mapped-frame % sms opts)) stacktrace)]\n       ;; take each non-nil :call and optionally merge it into :function one-level\n       ;; up to avoid replacing with local symbols, we only replace munged name if\n       ;; we can munge call symbol back to it\n       (vec (map call-merge\n              (map #(dissoc % :call) mapped-frames)\n              (concat (rest (map call->function mapped-frames)) [{}])))))))\n\n(defn mapped-stacktrace-str\n  \"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.\"\n  ([stacktrace sms]\n   (mapped-stacktrace-str stacktrace sms nil))\n  ([stacktrace sms opts]\n   (with-out-str\n     (doseq [{:keys [function file line column]}\n             (mapped-stacktrace stacktrace sms opts)]\n       (println \"\\t\"\n         (str (when function (str function \" \"))\n              \"(\" file (when line (str \":\" line))\n                       (when column (str \":\" column)) \")\"))))))\n\n(comment\n  (require '[cljs.closure :as cljsc]\n           '[clojure.data.json :as json]\n           '[cljs.source-map :as sm]\n           '[clojure.pprint :as pp])\n\n  (cljsc/build \"samples/hello/src\"\n    {:optimizations :none\n     :output-dir \"samples/hello/out\"\n     :output-to \"samples/hello/out/hello.js\"\n     :source-map true})\n\n  (def sms\n    {'hello.core\n     (sm/decode\n       (json/read-str\n         (slurp \"samples/hello/out/hello/core.js.map\")\n         :key-fn keyword))})\n\n  (pp/pprint sms)\n\n  ;; maps to :line 5 :column 24\n  (mapped-stacktrace\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n\n  (mapped-stacktrace-str\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n  )\n"]}