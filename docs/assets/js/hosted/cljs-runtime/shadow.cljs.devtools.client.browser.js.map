{"version":3,"file":"shadow.cljs.devtools.client.browser.js","sources":["shadow/cljs/devtools/client/browser.cljs"],"mappings":"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","names":["shadow.cljs.devtools.client.browser/active-modules-ref","cljs.core/volatile!","shadow.cljs.devtools.client.browser/repl-ns-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.browser/module-loaded","name","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.browser/socket-ref","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","shadow.cljs.devtools.client.browser/devtools-msg","seq48173","G__48174","cljs.core/first","cljs.core/next","self__4486__auto__","msg","args","js/console","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/ws-msg","temp__5455__auto__","cljs.core/deref","s","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/console.warn","shadow.cljs.devtools.client.browser/scripts-to-load","shadow.cljs.devtools.client.browser/loaded?","js/goog.isProvided_","shadow.cljs.devtools.client.browser/goog-is-loaded?","js/SHADOW_ENV.isLoaded","shadow.cljs.devtools.client.browser/goog-base-rc","p__48178","map__48179","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/src-is-loaded?","resource-id","output-name","src","or__3922__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/module-is-active?","module","cljs.core/contains?","shadow.cljs.devtools.client.browser/script-eval","code","node","js/document.createElement","js/document.createTextNode","js/document.body.appendChild","js/document.body.removeChild","shadow.cljs.devtools.client.browser/do-js-load","sources","seq__48181","cljs.core/seq","chunk__48182","count__48183","i__48184","map__48185","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__48187","resource-name","js","js/SHADOW_ENV.setLoaded","shadow.cljs.devtools.client.browser.devtools_msg.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.devtools.client.env/before-load-src","shadow.cljs.devtools.client.browser/do-js-reload","complete-fn","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","fn-sym","shadow.cljs.devtools.client.browser/do-js-requires","js-requires","seq__48201","chunk__48202","count__48203","i__48204","js-ns","require-str","shadow.cljs.devtools.client.browser/load-sources","callback","cljs.core/empty?","G__48219","G__48220","G__48221","G__48222","G__48223","G__48224","goog.net.XhrIo/send","shadow.cljs.devtools.client.env/files-url","res","req","content","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__48226","map__48227","shadow.cljs.devtools.client.browser/handle-build-complete","info","reload-info","map__48229","compiled","warnings","iter__4292__auto__","s__48232","cljs.core/LazySeq","xs__6012__auto__","map__48237","iterys__4288__auto__","s__48234","c__4290__auto__","size__4291__auto__","b__48236","cljs.core/chunk-buffer","i__48235","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48233","cljs.core/cons","cljs.core/rest","fs__4289__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__48231","cljs.core/not","warning","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","seq__48239","chunk__48240","count__48241","i__48242","map__48243","map__48245","line","column","w","shadow.cljs.devtools.client.env/autoload","shadow.cljs.devtools.client.hud/load-end-success","shadow.cljs.devtools.client.env/ignore-warnings","sources-to-get","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__48253","map__48254","rc","shadow.cljs.devtools.client.env/module-format","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__48250","map__48251","ns","p__48247","map__48248","p1__48225#","p__48292","map__48293","shadow.cljs.devtools.client.browser/handle-asset-watch","updates","seq__48295","chunk__48297","count__48298","i__48299","path","clojure.string/ends-with?","js/document.querySelector","new-link","G__48301","G__48302","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","goog.dom/insertSiblingAfter","goog.dom/removeNode","shadow.cljs.devtools.client.browser/get-ua-product","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","shadow.cljs.devtools.client.browser/get-asset-root","loc","js/goog.Uri","js/document.location.href","cbp","js/CLOSURE_BASE_PATH","clojure.string/replace","shadow.cljs.devtools.client.browser/repl-error","e","js/console.error","shadow.cljs.devtools.client.env/repl-error","p__48329","map__48330","shadow.cljs.devtools.client.browser/repl-invoke","id","result","shadow.cljs.devtools.client.env/repl-call","js/eval","p__48332","map__48333","shadow.cljs.devtools.client.browser/repl-require","reload-namespaces","sources-to-load","p__48335","map__48336","provides","and__3911__auto__","cljs.core/some","p__48338","map__48339","shadow.cljs.devtools.client.browser/repl-init","repl-state","cljs.core/reset!","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__48341","map__48342","shadow.cljs.devtools.client.browser/repl-set-ns","shadow.cljs.devtools.client.browser/close-reason-ref","p__48344","map__48345","shadow.cljs.devtools.client.browser/handle-message","type","G__48347","cljs.core/Keyword","shadow.cljs.devtools.client.hud/hud-warnings","shadow.cljs.devtools.client.hud/load-end","shadow.cljs.devtools.client.hud/hud-error","shadow.cljs.devtools.client.hud/hud-hide","shadow.cljs.devtools.client.hud/load-start","cljs.core/vreset!","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.browser/compile","text","G__48349","G__48350","G__48351","G__48352","G__48353","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/repl-host","shadow.cljs.devtools.client.env/repl-port","shadow.cljs.devtools.client.env/proc-id","actions","shadow.cljs.devtools.client.browser/heartbeat!","js/Date.now","js/setTimeout","shadow.cljs.devtools.client.browser/ws-connect","print-fn","cljs.core/*print-fn*","ws-url","shadow.cljs.devtools.client.env/ws-url","socket","js/WebSocket","shadow.cljs.devtools.client.env/process-ws-msg","shadow.cljs.devtools.client.hud/connection-error-clear!","js/goog","js/goog.constructNamespace_","shadow.cljs.devtools.client.env/set-print-fns!","shadow.cljs.devtools.client.hud/connection-error","shadow.cljs.devtools.client.env/reset-print-fns!","shadow.cljs.devtools.client.env/enabled","js/window.addEventListener"],"sourcesContent":["(ns shadow.cljs.devtools.client.browser\n  (:require\n    [cljs.reader :as reader]\n    [clojure.string :as str]\n    [goog.dom :as gdom]\n    [goog.object :as gobj]\n    [goog.net.jsloader :as loader]\n    [goog.userAgent.product :as product]\n    [goog.Uri]\n    [goog.net.XhrIo :as xhr]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.cljs.devtools.client.console]\n    [shadow.cljs.devtools.client.hud :as hud]\n    ))\n\n(defonce active-modules-ref\n  (volatile! #{}))\n\n(defonce repl-ns-ref (atom nil))\n\n(defn module-loaded [name]\n  (vswap! active-modules-ref conj (keyword name)))\n\n(defonce socket-ref (volatile! nil))\n\n(defn devtools-msg [msg & args]\n  (.apply (.-log js/console) nil (into-array (into [(str \"%cshadow-cljs: \" msg) \"color: blue;\"] args))))\n\n(defn ws-msg [msg]\n  (if-let [s @socket-ref]\n    (.send s (pr-str msg))\n    (js/console.warn \"WEBSOCKET NOT CONNECTED\" (pr-str msg))))\n\n(defonce scripts-to-load (atom []))\n\n(def loaded? js/goog.isProvided_)\n\n(defn goog-is-loaded? [name]\n  (js/SHADOW_ENV.isLoaded name))\n\n(def goog-base-rc\n  [:shadow.build.classpath/resource \"goog/base.js\"])\n\n(defn src-is-loaded? [{:keys [resource-id output-name] :as src}]\n  ;; FIXME: don't like this special case handling, but goog/base.js will always be loaded\n  ;; but not as a separate file\n  (or (= goog-base-rc resource-id)\n      (goog-is-loaded? output-name)))\n\n(defn module-is-active? [module]\n  (contains? @active-modules-ref module))\n\n(defn script-eval\n  \"js/eval doesn't get optimized properly, this hack seems to do the trick\"\n  [code]\n  (let [node (js/document.createElement \"script\")]\n    (.appendChild node (js/document.createTextNode code))\n    (js/document.body.appendChild node)\n    (js/document.body.removeChild node)))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-id output-name resource-name js] :as src} sources]\n    ;; should really stop using this and rather maintain our own record\n    ;; but without this hot-reload will reload shadow-js files with each cycle\n    ;; since they don't set it\n    (js/SHADOW_ENV.setLoaded output-name)\n\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload [msg sources complete-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      (fn [fn-sym]\n        (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn))\n\n(defn do-js-requires\n  \"when (require '[\\\"some-str\\\" :as x]) is done at the REPL we need to manually call the shadow.js.require for it\n   since the file only adds the shadow$provide. only need to do this for shadow-js.\"\n  [js-requires]\n  (doseq [js-ns js-requires]\n    (let [require-str (str \"var \" js-ns \" = shadow.js.require(\\\"\" js-ns \"\\\");\")]\n      (script-eval require-str))))\n\n(defn load-sources [sources callback]\n  (if (empty? sources)\n    (callback [])\n    (xhr/send\n      (env/files-url)\n      (fn [res]\n        (this-as ^goog req\n          (let [content\n                (-> req\n                    (.getResponseText)\n                    (reader/read-string))]\n            (callback content)\n            )))\n      \"POST\"\n      (pr-str {:client :browser\n               :sources (into [] (map :resource-id) sources)})\n      #js {\"content-type\" \"application/edn; charset=utf-8\"})))\n\n(defn handle-build-complete [{:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (doseq [{:keys [msg line column resource-name] :as w} warnings]\n      (js/console.warn (str \"BUILD-WARNING in \" resource-name \" at [\" line \":\" column \"]\\n\\t\" msg)))\n\n    (if-not env/autoload\n      (hud/load-end-success)\n      ;; load all files for current build:\n      ;; of modules that are active\n      ;; and are either not loaded yet\n      ;; or specifically marked for reload\n      (when (or (empty? warnings) env/ignore-warnings)\n        (let [sources-to-get\n              (->> sources\n                   (filter\n                     (fn [{:keys [module] :as rc}]\n                       (or (= \"js\" env/module-format)\n                           (module-is-active? module))))\n                   ;; don't reload namespaces that have ^:dev/never-reload meta\n                   (remove (fn [{:keys [ns]}]\n                             (contains? (:never-load reload-info) ns)))\n                   (filter\n                     (fn [{:keys [ns resource-id] :as src}]\n                       (or (contains? (:always-load reload-info) ns)\n                           (not (src-is-loaded? src))\n                           (and (contains? compiled resource-id)\n                                ;; never reload files from jar\n                                ;; they can't be hot-swapped so the only way they get re-compiled\n                                ;; is if they have warnings, which we can't to anything about\n                                (not (:from-jar src))))))\n                   (into []))]\n\n          (if-not (seq sources-to-get)\n            (hud/load-end-success)\n            (load-sources sources-to-get #(do-js-reload msg % hud/load-end-success))\n            ))))))\n\n(defn handle-asset-watch [{:keys [updates] :as msg}]\n  (doseq [path updates\n          ;; FIXME: could support images?\n          :when (str/ends-with? path \"css\")]\n    (when-let [node (js/document.querySelector (str \"link[href^=\\\"\" path \"\\\"]\"))]\n      (let [new-link\n            (doto (js/document.createElement \"link\")\n              (.setAttribute \"rel\" \"stylesheet\")\n              (.setAttribute \"href\" (str path \"?r=\" (rand))))]\n\n        (devtools-msg \"load CSS\" path)\n        (gdom/insertSiblingAfter new-link node)\n        (gdom/removeNode node)\n        ))))\n\n;; from https://github.com/clojure/clojurescript/blob/master/src/main/cljs/clojure/browser/repl.cljs\n;; I don't want to pull in all its other dependencies just for this function\n(defn get-ua-product []\n  (cond\n    product/SAFARI :safari\n    product/CHROME :chrome\n    product/FIREFOX :firefox\n    product/IE :ie))\n\n(defn get-asset-root []\n  (let [loc (js/goog.Uri. js/document.location.href)\n        cbp (js/goog.Uri. js/CLOSURE_BASE_PATH)\n        s (.toString (.resolve loc cbp))]\n    ;; FIXME: stacktrace starts with file:/// but resolve returns file:/\n    ;; how does this look on windows?\n    (str/replace s #\"^file:/\" \"file:///\")\n    ))\n\n(defn repl-error [e]\n  (js/console.error \"repl/invoke error\" e)\n  (-> (env/repl-error e)\n      (assoc :ua-product (get-ua-product)\n             :asset-root (get-asset-root))))\n\n(defn repl-invoke [{:keys [id js]}]\n  (let [result (env/repl-call #(js/eval js) repl-error)]\n    (-> result\n        (assoc :id id)\n        (ws-msg))))\n\n(defn repl-require [{:keys [id sources reload-namespaces js-requires] :as msg}]\n  (let [sources-to-load\n        (->> sources\n             (remove (fn [{:keys [provides] :as src}]\n                       (and (src-is-loaded? src)\n                            (not (some reload-namespaces provides)))))\n             (into []))]\n\n    (load-sources\n      sources-to-load\n      (fn [sources]\n        (do-js-load sources)\n        (when (seq js-requires)\n          (do-js-requires js-requires))\n        (ws-msg {:type :repl/require-complete :id id})\n        ))))\n\n(defn repl-init [{:keys [repl-state id]}]\n  (reset! repl-ns-ref (get-in repl-state [:current :ns]))\n  (load-sources\n    ;; maybe need to load some missing files to init REPL\n    (->> (:repl-sources repl-state)\n         (remove src-is-loaded?)\n         (into []))\n    (fn [sources]\n      (do-js-load sources)\n      (ws-msg {:type :repl/init-complete :id id})\n      (devtools-msg \"REPL init successful\"))))\n\n(defn repl-set-ns [{:keys [id ns]}]\n  (reset! repl-ns-ref ns)\n  (ws-msg {:type :repl/set-ns-complete :id id :ns ns}))\n\n(def close-reason-ref (volatile! nil))\n\n;; FIXME: core.async-ify this\n(defn handle-message [{:keys [type] :as msg}]\n  ;; (js/console.log \"ws-msg\" msg)\n  (case type\n    :asset-watch\n    (handle-asset-watch msg)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/require\n    (repl-require msg)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/init\n    (repl-init msg)\n\n    :build-complete\n    (do (hud/hud-warnings msg)\n        (handle-build-complete msg))\n\n    :build-failure\n    (do (hud/load-end)\n        (hud/hud-error msg))\n\n    :build-init\n    (hud/hud-warnings msg)\n\n    :build-start\n    (do (hud/hud-hide)\n        (hud/load-start))\n\n    :pong\n    nil\n\n    :client/stale\n    (vreset! close-reason-ref \"Stale Client! You are not using the latest compilation output!\")\n\n    :client/no-worker\n    (vreset! close-reason-ref (str \"watch for build \\\"\" env/build-id \"\\\" not running\"))\n\n    ;; default\n    :ignored))\n\n(defn compile [text callback]\n  (xhr/send\n    (str \"http\" (when env/ssl \"s\") \"://\" env/repl-host \":\" env/repl-port \"/worker/compile/\" env/build-id \"/\" env/proc-id \"/browser\")\n    (fn [res]\n      (this-as ^goog req\n        (let [actions\n              (-> req\n                  (.getResponseText)\n                  (reader/read-string))]\n          (when callback\n            (callback actions)))))\n    \"POST\"\n    (pr-str {:input text})\n    #js {\"content-type\" \"application/edn; charset=utf-8\"}))\n\n(defn heartbeat! []\n  (when-let [s @socket-ref]\n    (.send s (pr-str {:type :ping :v (js/Date.now)}))\n    (js/setTimeout heartbeat! 30000)))\n\n\n(defn ws-connect []\n  (let [print-fn\n        cljs.core/*print-fn*\n\n        ws-url\n        (env/ws-url :browser)\n\n        socket\n        (js/WebSocket. ws-url)]\n\n    (vreset! socket-ref socket)\n\n    (set! (.-onmessage socket)\n      (fn [e]\n        (env/process-ws-msg (. e -data) handle-message)\n        ))\n\n    (set! (.-onopen socket)\n      (fn [e]\n        (hud/connection-error-clear!)\n        (vreset! close-reason-ref nil)\n        ;; :module-format :js already patches provide\n        (when (= \"goog\" env/module-format)\n          ;; patch away the already declared exception\n          (set! (.-provide js/goog) js/goog.constructNamespace_))\n\n        (env/set-print-fns! ws-msg)\n\n        (devtools-msg \"WebSocket connected!\")\n        ))\n\n    (set! (.-onclose socket)\n      (fn [e]\n        ;; not a big fan of reconnecting automatically since a disconnect\n        ;; may signal a change of config, safer to just reload the page\n        (devtools-msg \"WebSocket disconnected!\")\n        (hud/connection-error (or @close-reason-ref \"Connection closed!\"))\n        (vreset! socket-ref nil)\n        (env/reset-print-fns!)\n        ))\n\n    (set! (.-onerror socket)\n      (fn [e]\n        (hud/connection-error \"Connection failed!\")\n        (devtools-msg \"websocket error\" e)))\n\n    (js/setTimeout heartbeat! 30000)\n    ))\n\n(when ^boolean env/enabled\n  ;; disconnect an already connected socket, happens if this file is reloaded\n  ;; pretty much only for me while working on this file\n  (when-let [s @socket-ref]\n    (devtools-msg \"connection reset!\")\n    (set! (.-onclose s) (fn [e]))\n    (.close s)\n    (vreset! socket-ref nil))\n\n  ;; for /browser-repl in case the page is reloaded\n  ;; otherwise the browser seems to still have the websocket open\n  ;; when doing the reload\n  (js/window.addEventListener \"beforeunload\"\n    (fn []\n      (when-let [s @socket-ref]\n        (.close s))))\n\n  (ws-connect))\n"]}