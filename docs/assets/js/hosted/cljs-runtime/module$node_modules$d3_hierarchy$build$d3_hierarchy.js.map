{
"version":3,
"file":"module$node_modules$d3_hierarchy$build$d3_hierarchy.js",
"lineCount":27,
"mappings":"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",
"sources":["node_modules/d3-hierarchy/build/d3-hierarchy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_hierarchy$build$d3_hierarchy\"] = function(global,process,require,module,exports) {\n// https://d3js.org/d3-hierarchy/ Version 1.1.5. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\nfunction meanX(children) {\n  return children.reduce(meanXReduce, 0) / children.length;\n}\n\nfunction meanXReduce(x, c) {\n  return x + c.x;\n}\n\nfunction maxY(children) {\n  return 1 + children.reduce(maxYReduce, 0);\n}\n\nfunction maxYReduce(y, c) {\n  return Math.max(y, c.y);\n}\n\nfunction leafLeft(node) {\n  var children;\n  while (children = node.children) node = children[0];\n  return node;\n}\n\nfunction leafRight(node) {\n  var children;\n  while (children = node.children) node = children[children.length - 1];\n  return node;\n}\n\nvar cluster = function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = false;\n\n  function cluster(root) {\n    var previousNode,\n        x = 0;\n\n    // First walk, computing the initial x & y values.\n    root.eachAfter(function(node) {\n      var children = node.children;\n      if (children) {\n        node.x = meanX(children);\n        node.y = maxY(children);\n      } else {\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\n        node.y = 0;\n        previousNode = node;\n      }\n    });\n\n    var left = leafLeft(root),\n        right = leafRight(root),\n        x0 = left.x - separation(left, right) / 2,\n        x1 = right.x + separation(right, left) / 2;\n\n    // Second walk, normalizing x & y to the desired size.\n    return root.eachAfter(nodeSize ? function(node) {\n      node.x = (node.x - root.x) * dx;\n      node.y = (root.y - node.y) * dy;\n    } : function(node) {\n      node.x = (node.x - x0) / (x1 - x0) * dx;\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n    });\n  }\n\n  cluster.separation = function(x) {\n    return arguments.length ? (separation = x, cluster) : separation;\n  };\n\n  cluster.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n  };\n\n  cluster.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return cluster;\n};\n\nfunction count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nvar node_count = function() {\n  return this.eachAfter(count);\n};\n\nvar node_each = function(callback) {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n  return this;\n};\n\nvar node_eachBefore = function(callback) {\n  var node = this, nodes = [node], children, i;\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n  return this;\n};\n\nvar node_eachAfter = function(callback) {\n  var node = this, nodes = [node], next = [], children, i, n;\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n  while (node = next.pop()) {\n    callback(node);\n  }\n  return this;\n};\n\nvar node_sum = function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n};\n\nvar node_sort = function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n};\n\nvar node_path = function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n};\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n\nvar node_ancestors = function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n};\n\nvar node_descendants = function() {\n  var nodes = [];\n  this.each(function(node) {\n    nodes.push(node);\n  });\n  return nodes;\n};\n\nvar node_leaves = function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n};\n\nvar node_links = function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don\u2019t include the root\u2019s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n};\n\nfunction hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nfunction computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nfunction Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};\n\nvar slice = Array.prototype.slice;\n\nfunction shuffle(array) {\n  var m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n\nvar enclose = function(circles) {\n  var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;\n\n  while (i < n) {\n    p = circles[i];\n    if (e && enclosesWeak(e, p)) ++i;\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n  }\n\n  return e;\n};\n\nfunction extendBasis(B, p) {\n  var i, j;\n\n  if (enclosesWeakAll(p, B)) return [p];\n\n  // If we get here then B must have at least one element.\n  for (i = 0; i < B.length; ++i) {\n    if (enclosesNot(p, B[i])\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n      return [B[i], p];\n    }\n  }\n\n  // If we get here then B must have at least two elements.\n  for (i = 0; i < B.length - 1; ++i) {\n    for (j = i + 1; j < B.length; ++j) {\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n        return [B[i], B[j], p];\n      }\n    }\n  }\n\n  // If we get here then something is very wrong.\n  throw new Error;\n}\n\nfunction enclosesNot(a, b) {\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\n}\n\nfunction enclosesWeak(a, b) {\n  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction enclosesWeakAll(a, B) {\n  for (var i = 0; i < B.length; ++i) {\n    if (!enclosesWeak(a, B[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction encloseBasis(B) {\n  switch (B.length) {\n    case 1: return encloseBasis1(B[0]);\n    case 2: return encloseBasis2(B[0], B[1]);\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\n  }\n}\n\nfunction encloseBasis1(a) {\n  return {\n    x: a.x,\n    y: a.y,\n    r: a.r\n  };\n}\n\nfunction encloseBasis2(a, b) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n      l = Math.sqrt(x21 * x21 + y21 * y21);\n  return {\n    x: (x1 + x2 + x21 / l * r21) / 2,\n    y: (y1 + y2 + y21 / l * r21) / 2,\n    r: (l + r1 + r2) / 2\n  };\n}\n\nfunction encloseBasis3(a, b, c) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x3 = c.x, y3 = c.y, r3 = c.r,\n      a2 = x1 - x2,\n      a3 = x1 - x3,\n      b2 = y1 - y2,\n      b3 = y1 - y3,\n      c2 = r2 - r1,\n      c3 = r3 - r1,\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n      ab = a3 * b2 - a2 * b3,\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n      xb = (b3 * c2 - b2 * c3) / ab,\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n      yb = (a2 * c3 - a3 * c2) / ab,\n      A = xb * xb + yb * yb - 1,\n      B = 2 * (r1 + xa * xb + ya * yb),\n      C = xa * xa + ya * ya - r1 * r1,\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n  return {\n    x: x1 + xa + xb * r,\n    y: y1 + ya + yb * r,\n    r: r\n  };\n}\n\nfunction place(a, b, c) {\n  var ax = a.x,\n      ay = a.y,\n      da = b.r + c.r,\n      db = a.r + c.r,\n      dx = b.x - ax,\n      dy = b.y - ay,\n      dc = dx * dx + dy * dy;\n  if (dc) {\n    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),\n        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n    c.x = ax + x * dx + y * dy;\n    c.y = ay + x * dy - y * dx;\n  } else {\n    c.x = ax + db;\n    c.y = ay;\n  }\n}\n\nfunction intersects(a, b) {\n  var dx = b.x - a.x,\n      dy = b.y - a.y,\n      dr = a.r + b.r;\n  return dr * dr - 1e-6 > dx * dx + dy * dy;\n}\n\nfunction score(node) {\n  var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction Node$1(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\n\nfunction packEnclose(circles) {\n  if (!(n = circles.length)) return 0;\n\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle\u2026\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node$1(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // \u201cCloseness\u201d is determined by linear distance along the front-chain.\n    // \u201cAhead\u201d or \u201cbehind\u201d is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n  return c.r;\n}\n\nvar siblings = function(circles) {\n  packEnclose(circles);\n  return circles;\n};\n\nfunction optional(f) {\n  return f == null ? null : required(f);\n}\n\nfunction required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n\nfunction constantZero() {\n  return 0;\n}\n\nvar constant = function(x) {\n  return function() {\n    return x;\n  };\n};\n\nfunction defaultRadius(d) {\n  return Math.sqrt(d.value);\n}\n\nvar index = function() {\n  var radius = null,\n      dx = 1,\n      dy = 1,\n      padding = constantZero;\n\n  function pack(root) {\n    root.x = dx / 2, root.y = dy / 2;\n    if (radius) {\n      root.eachBefore(radiusLeaf(radius))\n          .eachAfter(packChildren(padding, 0.5))\n          .eachBefore(translateChild(1));\n    } else {\n      root.eachBefore(radiusLeaf(defaultRadius))\n          .eachAfter(packChildren(constantZero, 1))\n          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n    }\n    return root;\n  }\n\n  pack.radius = function(x) {\n    return arguments.length ? (radius = optional(x), pack) : radius;\n  };\n\n  pack.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n  };\n\n  pack.padding = function(x) {\n    return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n  };\n\n  return pack;\n};\n\nfunction radiusLeaf(radius) {\n  return function(node) {\n    if (!node.children) {\n      node.r = Math.max(0, +radius(node) || 0);\n    }\n  };\n}\n\nfunction packChildren(padding, k) {\n  return function(node) {\n    if (children = node.children) {\n      var children,\n          i,\n          n = children.length,\n          r = padding(node) * k || 0,\n          e;\n\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\n      e = packEnclose(children);\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n      node.r = e + r;\n    }\n  };\n}\n\nfunction translateChild(k) {\n  return function(node) {\n    var parent = node.parent;\n    node.r *= k;\n    if (parent) {\n      node.x = parent.x + k * node.x;\n      node.y = parent.y + k * node.y;\n    }\n  };\n}\n\nvar roundNode = function(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n};\n\nvar treemapDice = function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n};\n\nvar partition = function() {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 =\n    root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function(node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function(x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function(x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n};\n\nvar keyPrefix = \"$\";\nvar preroot = {depth: -1};\nvar ambiguous = {};\n\nfunction defaultId(d) {\n  return d.id;\n}\n\nfunction defaultParentId(d) {\n  return d.parentId;\n}\n\nvar stratify = function() {\n  var id = defaultId,\n      parentId = defaultParentId;\n\n  function stratify(data) {\n    var d,\n        i,\n        n = data.length,\n        root,\n        parent,\n        node,\n        nodes = new Array(n),\n        nodeId,\n        nodeKey,\n        nodeByKey = {};\n\n    for (i = 0; i < n; ++i) {\n      d = data[i], node = nodes[i] = new Node(d);\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = keyPrefix + (node.id = nodeId);\n        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], nodeId = parentId(data[i], i, data);\n      if (nodeId == null || !(nodeId += \"\")) {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      } else {\n        parent = nodeByKey[keyPrefix + nodeId];\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node);\n        else parent.children = [node];\n        node.parent = parent;\n      }\n    }\n\n    if (!root) throw new Error(\"no root\");\n    root.parent = preroot;\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n\n    return root;\n  }\n\n  stratify.id = function(x) {\n    return arguments.length ? (id = required(x), stratify) : id;\n  };\n\n  stratify.parentId = function(x) {\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\n  };\n\n  return stratify;\n};\n\nfunction defaultSeparation$1(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-\u2019s ancestor is a sibling of v, returns vi-\u2019s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nvar tree = function() {\n  var separation = defaultSeparation$1,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.\u2019s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n};\n\nvar treemapSlice = function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n};\n\nvar phi = (1 + Math.sqrt(5)) / 2;\n\nfunction squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nvar squarify = ((function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n}))(phi);\n\nvar index$1 = function() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n};\n\nvar binary = function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n};\n\nvar sliceDice = function(parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n};\n\nvar resquarify = ((function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n}))(phi);\n\nexports.cluster = cluster;\nexports.hierarchy = hierarchy;\nexports.pack = index;\nexports.packSiblings = siblings;\nexports.packEnclose = enclose;\nexports.partition = partition;\nexports.stratify = stratify;\nexports.tree = tree;\nexports.treemap = index$1;\nexports.treemapBinary = binary;\nexports.treemapDice = treemapDice;\nexports.treemapSlice = treemapSlice;\nexports.treemapSliceDice = sliceDice;\nexports.treemapSquarify = squarify;\nexports.treemapResquarify = resquarify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","factory","define","amd","d3","defaultSeparation","a","b","parent","meanXReduce","x","c","maxYReduce","y","Math","max","leafLeft","node","children","leafRight","length","count","sum","i","value","hierarchy","data","root","Node","valued","nodes","child","childs","n","defaultChildren","pop","Array","push","depth","eachBefore","computeHeight","d","copyData","height","enclosesNot","dr","r","dx","dy","enclosesWeak","enclosesWeakAll","B","encloseBasis2","x1","y1","r1","x2","y2","r2","x21","y21","r21","l","sqrt","encloseBasis3","x3","y3","r3","a2","a3","b2","b3","c2","c3","d1","d2","ab","xa","xb","ya","yb","A","C","place","ax","ay","da","db","dc","intersects","score","_","next","Node$1","circle","previous","packEnclose","circles","j","k","sj","sk","aa","ca","enclose","required","f","Error","constantZero","defaultRadius","radiusLeaf","radius","packChildren","padding","e","translateChild","defaultId","id","defaultParentId","parentId","defaultSeparation$1","nextLeft","v","t","nextRight","TreeNode","s","m","z","treeRoot","tree","squarifyRatio","ratio","x0","y0","rows","row","nodeValue","i1","i0","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","dice","slice","treemapDice","treemapSlice","prototype","constructor","node_count","eachAfter","each","node_each","callback","current","reverse","node_eachAfter","node_eachBefore","node_sum","sort","node_sort","compare","path","node_path","end","start","aNodes","ancestors","bNodes","ancestor","splice","node_ancestors","descendants","node_descendants","leaves","node_leaves","links","node_links","source","target","copy","node_copy","call","array","random","p","constant","roundNode","round","preroot","ambiguous","Object","create","phi","squarify","custom","squarify.ratio","resquarify","_squarify","resquarify.ratio","cluster","previousNode","reduce","separation","left","right","nodeSize","cluster.separation","arguments","size","cluster.size","cluster.nodeSize","pack","index","min","pack.radius","pack.size","pack.padding","packSiblings","siblings","partition","positionNode","partition.round","partition.size","partition.padding","stratify","nodeId","nodeByKey","nodeKey","keyPrefix","stratify.id","stratify.parentId","firstWalk","secondWalk","sizeNode","bottom","tx","kx","ky","w","shift","change","midpoint","vop","vip","vom","sip","sop","sim","vim","som","wp","wm","tree.separation","tree.size","tree.nodeSize","treemap","index$1","paddingStack","paddingInner","paddingLeft","paddingTop","paddingRight","paddingBottom","tile","treemap.round","treemap.size","treemap.tile","treemap.padding","paddingOuter","treemap.paddingInner","treemap.paddingOuter","treemap.paddingTop","treemap.paddingRight","treemap.paddingBottom","treemap.paddingLeft","treemapBinary","binary","valueOffset","sums","valueTarget","hi","mid","valueLeft","valueRight","xk","yk","treemapSliceDice","sliceDice","treemapSquarify","treemapResquarify","defineProperty"]
}
