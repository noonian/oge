{
"version":3,
"file":"module$node_modules$d3_format$build$d3_format.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/d3-format/build/d3-format.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_format$build$d3_format\"] = function(global,process,require,module,exports) {\n// https://d3js.org/d3-format/ Version 1.2.2. Copyright 2018 Mike Bostock.\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nvar formatDecimal = function(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, \u00b1Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n};\n\nvar exponent = function(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n};\n\nvar formatGroup = function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n};\n\nvar formatNumerals = function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n};\n\nvar formatDefault = function(x, p) {\n  x = x.toPrecision(p);\n\n  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (x[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      case \"e\": break out;\n      default: if (i0 > 0) i0 = 0; break;\n    }\n  }\n\n  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;\n};\n\nvar prefixExponent;\n\nvar formatPrefixAuto = function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n};\n\nvar formatRounded = function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n};\n\nvar formatTypes = {\n  \"\": formatDefault,\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": function(x) { return Math.round(x).toString(10); },\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n\n// [[fill]align][sign][symbol][0][width][,][.precision][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\n\nfunction formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n\n  var match,\n      fill = match[1] || \" \",\n      align = match[2] || \">\",\n      sign = match[3] || \"-\",\n      symbol = match[4] || \"\",\n      zero = !!match[5],\n      width = match[6] && +match[6],\n      comma = !!match[7],\n      precision = match[8] && +match[8].slice(1),\n      type = match[9] || \"\";\n\n  // The \"n\" type is an alias for \",g\".\n  if (type === \"n\") comma = true, type = \"g\";\n\n  // Map invalid types to the default format.\n  else if (!formatTypes[type]) type = \"\";\n\n  // If zero fill is specified, padding goes after sign and before digits.\n  if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n  this.fill = fill;\n  this.align = align;\n  this.sign = sign;\n  this.symbol = symbol;\n  this.zero = zero;\n  this.width = width;\n  this.comma = comma;\n  this.precision = precision;\n  this.type = type;\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + this.type;\n};\n\nvar identity = function(x) {\n  return x;\n};\n\nvar prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\u00b5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nvar formatLocale = function(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        type = specifier.type;\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = !type || /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? (type ? 6 : 12)\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer \u201cvalue\u201d part that can be\n        // grouped, and fractional or exponential \u201csuffix\u201d part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n};\n\nvar locale;\n\n\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nfunction defaultLocale(definition) {\n  locale = formatLocale(definition);\n  exports.format = locale.format;\n  exports.formatPrefix = locale.formatPrefix;\n  return locale;\n}\n\nvar precisionFixed = function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n};\n\nvar precisionPrefix = function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n};\n\nvar precisionRound = function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n};\n\nexports.formatDefaultLocale = defaultLocale;\nexports.formatLocale = formatLocale;\nexports.formatSpecifier = formatSpecifier;\nexports.precisionFixed = precisionFixed;\nexports.precisionPrefix = precisionPrefix;\nexports.precisionRound = precisionRound;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","factory","define","amd","d3","formatSpecifier","specifier","FormatSpecifier","match","re","exec","Error","fill","align","sign","symbol","zero","width","comma","precision","slice","type","formatTypes","defaultLocale","definition","locale","formatLocale","format","formatPrefix","formatDecimal","x","p","i","indexOf","toExponential","coefficient","length","exponent","Math","abs","NaN","formatGroup","grouping","thousands","value","t","j","g","max","push","substring","reverse","join","formatNumerals","numerals","replace","prefixExponent","formatRounded","d","Array","formatDefault","toPrecision","n","i0","i1","%","toFixed","b","round","toString","c","e","f","o","formatPrefixAuto","min","floor","X","toUpperCase","prototype","FormatSpecifier.prototype.toString","identity","prefixes","newFormat","valuePrefix","prefix","valueSuffix","suffix","formatType","valueNegative","maybeSuffix","charCodeAt","decimal","group","Infinity","padding","currency","test","toLowerCase","percent","format.toString","k","pow","formatDefaultLocale","precisionFixed","step","precisionPrefix","precisionRound","Object","defineProperty"]
}
