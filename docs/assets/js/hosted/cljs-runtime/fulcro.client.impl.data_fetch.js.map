{"version":3,"file":"fulcro.client.impl.data_fetch.js","sources":["fulcro/client/impl/data_fetch.cljc"],"mappings":"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","names":["fulcro.client.impl.data-fetch/optional","pred","cljs.spec.alpha/or-spec-impl","cljs.core/nil?","cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.core/string?","cljs.core/vector?","cljs.core/symbol?","cljs.core/map?","cljs.core/boolean?","cljs.spec.alpha/map-spec-impl","G__42826","cljs.core/contains?","cljs.core/fn?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__42860","cljs.core/coll?","G__42864","cljs.core/any?","G__42880","fulcro.client.impl.data-fetch/data-state?","state","type","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data-fetch/ready?","is-kind?","fulcro.client.impl.data-fetch/loading?","fulcro.client.impl.data-fetch/failed?","fulcro.client.impl.data-fetch/is-direct-table-load?","load-marker","cljs.core/not","fulcro.client.impl.data-fetch/data-field","fulcro.util/ident?","fulcro.client.impl.data-fetch/data-query-key","fulcro.client.impl.data-fetch/marker-table","fulcro.client.impl.data-fetch/place-load-marker","state-map","marker","marker-id","fulcro.client.impl.data-fetch/data-marker","legacy-marker?","cljs.core/Keyword","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","fulcro.client.impl.data-fetch/data-path","current-val","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/assoc-in","fulcro.client.impl.data-fetch/place-load-markers","items-to-load","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","s","item","i","fulcro.client.impl.data-fetch/set-loading!","G__42914","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","fulcro.client.impl.data-fetch/data-uuid","fulcro.client.impl.data-fetch/data-marker?","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/cat-impl","fulcro.client.impl.data-fetch/earliest-load-time","load-markers","cljs.core/min","fulcro.history/max-tx-time","cljs.core.map.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data-fetch/mark-parallel-loading!","remote-name","reconciler","fulcro.client.primitives/app-state","queued-items","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","is-eligible?","and__3911__auto__","fulcro.client.impl.data-fetch/data-remote","other-items-loading?","cljs.core/boolean","cljs.core/seq","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","remaining-items","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","loading?","history-atom","fulcro.client.primitives/get-history","ok","fulcro.client.impl.data-fetch/loaded-callback","error","fulcro.client.impl.data-fetch/error-callback","tx-time","cljs.core/empty?","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","iter__4292__auto__","s__42926","cljs.core/LazySeq","temp__5457__auto__","cljs.core/chunked-seq?","c__4290__auto__","size__4291__auto__","cljs.core/count","b__42928","cljs.core/chunk-buffer","i__42927","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__42925","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","G__42935","G__42936","fulcro.client.impl.data-fetch/full-query","fulcro.client.primitives/reconciler?","var_args","G__42960","fulcro.client.impl.data-fetch/dedupe-by","js/Error","keys-fn","rf","keys-seen","cljs.core/volatile!","result","input","input-keys","cljs.core/set","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","cljs.core/-vreset!","cljs.core/-deref","clojure.set.union.cljs$core$IFn$_invoke$arity$2","coll","cljs.core.sequence.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data_fetch.dedupe_by.cljs$core$IFn$_invoke$arity$1","fulcro.client.impl.data-fetch/join-key-or-nil","expr","fulcro.util/join?","join-key-or-ident","fulcro.util/join-key","fulcro.client.impl.data-fetch/split-items-ready-to-load","items-ready-to-load","map__42978","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","item-keys","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data-fetch/data-query","abort-id-conflict?","items-going?","active-abort-id","abort-id","or__3922__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","can-go-now?","p__42979","map__42980","items","current-keys","current-abort-id","items-to-load-now","acc","G__42983","clojure.set/union","cljs.core/reduced","items-to-defer","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","fulcro.client.impl.data-fetch/mark-loading","remote","vec__42995","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","all-items","items-for-other-remotes","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data-fetch/valid-types","G__43008","fulcro.client.impl.data-fetch/make-data-state","fulcro.client.impl.data_fetch.make_data_state.cljs$core$IFn$_invoke$arity$2","params","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","p__43016","map__43017","fulcro.client.impl.data-fetch/elide-ast-nodes","key","union-key","children","ast","elision-set","union-elision?","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic","e43020","e__33343__auto__","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$3","c","p1__43013#","fulcro.client.impl.data-fetch/inject-query-params","p1__43027#","temp__5455__auto__","new-params","cljs.core/merge","p__43032","map__43033","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fulcro.client.impl.data-fetch/ready-state","ident","field","without","query","post-mutation","post-mutation-params","fallback","parallel","refresh","target","env","initialize","old-ast","fulcro.client.primitives/query->ast","G__43037","cljs.core/not-empty","query-field","query'","fulcro.client.primitives/ast->query","cljs.core/random-uuid","cljs.core/with-meta","G__43039","fulcro.client.primitives/get-current-time","p__43049","map__43050","fulcro.client.impl.data-fetch/mark-ready","config","marker?","load-request","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__43054","fulcro.client.impl.data-fetch/data-target","fulcro.client.impl.data-fetch/data-ident","fulcro.client.impl.data-fetch/data-refresh","node","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","fulcro.client.impl.data-fetch/data-params","G__43077","fulcro.client.impl.data-fetch/set-ready!","fulcro.client.impl.data_fetch.set_ready_BANG_.cljs$core$IFn$_invoke$arity$2","set-type","G__43079","fulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$2","rv","G__43084","fulcro.client.impl.data-fetch/set-failed!","fulcro.client.impl.data_fetch.set_failed_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","fulcro.client.impl.data-fetch/set-global-loading!","state-atom","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","fulcro.client.impl.data-fetch/replacement-target?","t","fulcro.client.impl.data-targeting/replacement-target?","fulcro.client.impl.data-fetch/prepend-target?","fulcro.client.impl.data-targeting/prepend-target?","fulcro.client.impl.data-fetch/append-target?","fulcro.client.impl.data-targeting/append-target?","fulcro.client.impl.data-fetch/multiple-targets?","fulcro.client.impl.data-targeting/multiple-targets?","fulcro.client.impl.data-fetch/special-target?","fulcro.client.impl.data-targeting/special-target?","fulcro.client.impl.data-fetch/process-target","fulcro.client.impl.data-targeting/process-target","fulcro.client.impl.data-fetch/relocate-targeted-results!","default-target","explicit-target","relocate?","fulcro.client.impl.data-fetch/remove-marker","app-state","path","data","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","fulcro.client.impl.data-fetch/callback-env","original-env","map__43109","G__43111","fulcro.client.impl.data-fetch/tick!","r","fulcro.client.impl.protocols/tick!","response","base-merge","initial-state","item-tree","fulcro.util.deep_merge.cljs$core$IFn$_invoke$arity$variadic","loading-items","cljs.core.into.cljs$core$IFn$_invoke$arity$2","refresh-set","marked-response","fulcro.client.primitives/mark-missing","to-refresh","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","ran-mutations","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","remove-markers!","seq__43121","chunk__43122","count__43123","i__43124","c__4319__auto__","cljs.core/chunk-first","cljs.core/next","G__43125","G__43128","cljs.core/disj","run-post-mutations!","seq__43130","chunk__43131","count__43132","i__43133","mutation-symbol","cljs.core/reset!","cljs.core/meta","G__43134","G__43141","G__43135","G__43136","G__43137","G__43142","G__43143","G__43144","fulcro.client.mutations/mutate","fulcro.client.primitives.merge_BANG_.cljs$core$IFn$_invoke$arity$3","fulcro.client.primitives/force-root-render!","fulcro.client.util.force_render.cljs$core$IFn$_invoke$arity$2","ran-fallbacks","mark-errors","seq__43196","chunk__43197","count__43198","i__43199","G__43200","G__43201","run-fallbacks","seq__43205","chunk__43206","count__43207","i__43208","fallback-symbol","G__43209","G__43216","G__43210","G__43211","G__43212","G__43217","G__43218","G__43219","fulcro.client.impl.data-fetch/is-deferred-transaction?"],"sourcesContent":["(ns fulcro.client.impl.data-fetch\n  (:require [fulcro.client.primitives :as prim :refer [integrate-ident]]\n            [fulcro.client.impl.data-targeting :as targeting]\n            [fulcro.util :as util]\n            [fulcro.client.util :refer [force-render]]\n            [clojure.walk :refer [prewalk]]\n            [clojure.set :as set]\n            [fulcro.logging :as log]\n            [fulcro.history :as hist]\n            [fulcro.client.mutations :as m]\n            [fulcro.client.impl.protocols :as p]\n    #?(:clj\n            [clojure.future :refer :all])\n            [clojure.spec.alpha :as s]))\n\n(defn optional [pred] (s/or :nothing nil? :value pred))\n(s/def ::type keyword?)\n(s/def ::uuid string?)\n(s/def ::target (optional vector?))\n(s/def ::field (optional keyword?))\n(s/def ::post-mutation (optional symbol?))\n(s/def ::post-mutation-params (optional map?))\n(s/def ::refresh (optional vector?))\n(s/def ::marker (s/or :kw keyword? :bool boolean? :nothing nil?))\n(s/def ::parallel (optional boolean?))\n(s/def ::fallback (optional symbol?))\n(s/def ::original-env map?)\n(s/def ::load-marker (s/keys :req [::type ::uuid ::prim/query ::original-env ::hist/tx-time]\n                       :opt [::target ::prim/remote ::prim/ident ::field ::post-mutation-params ::post-mutation\n                             ::refresh ::marker ::parallel ::fallback :fulcro.client.network/abort-id]))\n\n(s/def ::on-load fn?)\n(s/def ::on-error fn?)\n(s/def ::load-descriptors (s/coll-of ::load-marker))\n(s/def ::payload (s/keys :req [::prim/query ::on-load ::on-error ::hist/history-atom ::hist/tx-time] :opt [::load-descriptors]))\n(s/def ::network-error any?)\n(s/def ::network-result (s/keys :opt [::load-descriptors ::network-error]))\n\n(declare data-marker data-remote data-target data-path data-uuid data-field data-query-key data-query set-loading! full-query loaded-callback error-callback data-marker?)\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Implementation for public api\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; Built-in mutation for adding a remote query to the network requests.\n(defn data-state?\n  \"Test if the given bit of state is a data fetch state-tracking marker\"\n  [state] (and (map? state) (contains? state ::type)))\n\n(letfn [(is-kind? [state type]\n          (if (data-state? state)\n            (= type (::type state))\n            false))]\n  (defn ready?\n    \"Test if the given item is a data state marker that is in the ready state\"\n    [state] (is-kind? state :ready))\n  (defn loading?\n    \"Test if the given item is a data state marker in the loading state\"\n    [state] (is-kind? state :loading))\n  (defn failed?\n    \"Test if the given item is a data state marker in the failed state\"\n    [state] (is-kind? state :failed)))\n\n(defn is-direct-table-load? [load-marker]\n  (and\n    (not (data-field load-marker))\n    (util/ident? (data-query-key load-marker))))\n\n(def marker-table\n  :ui.fulcro.client.data-fetch.load-markers/by-id)\n\n(defn- place-load-marker [state-map marker]\n  (let [marker-id      (data-marker marker)\n        legacy-marker? (-> marker-id keyword? not)]\n    (if legacy-marker?\n      (update-in state-map (data-path marker)\n        (fn [current-val]\n          (if (is-direct-table-load? marker)\n            (when (map? current-val) (assoc current-val :ui/fetch-state marker))\n            {:ui/fetch-state marker})))\n      (assoc-in state-map [marker-table marker-id] marker))))\n\n(defn- place-load-markers\n  \"Place load markers in the app state at their data paths so that UI rendering can see them.\"\n  [state-map items-to-load]\n  (reduce (fn [s item]\n            (let [i (set-loading! item)]\n              (cond-> (update s :fulcro/loads-in-progress (fnil conj #{}) (data-uuid i))\n                (data-marker? i) (place-load-marker i))))\n    state-map items-to-load))\n\n(s/fdef place-load-markers\n  :args (s/cat :state map? :items ::load-descriptors)\n  :ret map?)\n\n(defn earliest-load-time\n  \"Given a sequence of load markers, returns the history tx-time of the earliest one. Returns hist/max-tx-time if there\n  are no markers or none have a time.\"\n  [load-markers]\n  (reduce min hist/max-tx-time (map ::hist/tx-time load-markers)))\n\n(defn mark-parallel-loading!\n  \"Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  .\"\n  [remote-name reconciler]\n  (let [state                (prim/app-state reconciler)\n        queued-items         (get @state :fulcro/ready-to-load)\n        is-eligible?         (fn [item] (and (::parallel item) (= remote-name (data-remote item))))\n        other-items-loading? (boolean (seq (get @state :fulcro/loads-in-progress)))\n        items-to-load        (filter is-eligible? queued-items)\n        remaining-items      (filter (comp not is-eligible?) queued-items)\n        loading?             (or (boolean (seq items-to-load)) other-items-loading?)\n        history-atom         (prim/get-history reconciler)\n        ok                   (loaded-callback reconciler)\n        error                (error-callback reconciler)\n        tx-time              (earliest-load-time items-to-load)]\n    (when-not (empty? items-to-load)\n      (swap! state (fn [s] (-> s\n                             (place-load-markers items-to-load)\n                             (assoc :ui/loading-data loading? :fulcro/ready-to-load remaining-items))))\n      (for [item items-to-load]\n        {::prim/query        (full-query [item])\n         ::prim/remote       remote-name\n         ::hist/tx-time      tx-time\n         ::hist/history-atom history-atom\n         ::on-load           ok\n         ::on-error          error\n         ::load-descriptors  [item]}))))\n\n(s/fdef mark-parallel-loading!\n  :args (s/cat :remote keyword? :reconciler prim/reconciler?)\n  :ret ::load-descriptors)\n\n(defn dedupe-by\n  \"Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided.\"\n  ([keys-fn]                                                ;; transducer fn\n   (fn [rf]\n     (let [keys-seen (volatile! #{})]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n          (let [input-keys (set (keys-fn input))]\n            ;; if no keys seen, include input in the reduction\n            (if (empty? (set/intersection @keys-seen input-keys))\n              (do (vswap! keys-seen set/union input-keys)\n                  (rf result input))\n              result)))))))\n  ([keys-fn coll] (sequence (dedupe-by keys-fn) coll)))\n\n(defn join-key-or-nil [expr]\n  (when (util/join? expr)\n    (let [join-key-or-ident (util/join-key expr)]\n      (if (util/ident? join-key-or-ident)\n        (first join-key-or-ident)\n        join-key-or-ident))))\n\n(defn split-items-ready-to-load\n  \"This function is used to split accidental colliding queries into separate network\n  requests. The most general description of this issue is\n  from two unrelated `load` calls when black-box composing functions. The two\n  separate queries: One issues `[{:entitlements [:foo]}]`, and the other\n  asks for `[{:entitlements [:bar]}]`. Fulcro merges these into a single query\n  [{:entitlements [:foo]} {:entitlements [:bar]}]. However, the response to a query\n  is a map, and such a query would result in the backend parser being called twice (once per key in the subquery)\n  but one would stomp on the other.\n\n  The other potential collision is if a load includes and abort ID. In this case such a load should not be batched\n  with others because aborting it would take others down with it.\n\n  Thus, this function ensures such accidental collisions are not combined into a single network request.\n\n  This functions returns a list of the load items that can be batched (from the beginning, in order) and the\n  remainder of the items which must be deferred to another request.\"\n  [items-ready-to-load]\n  (let [item-keys          (fn [item] (set (keep join-key-or-nil (data-query item))))\n        abort-id-conflict? (fn [items-going? active-abort-id abort-id]\n                             (and items-going? (or abort-id active-abort-id) (not= active-abort-id abort-id)))\n        can-go-now?        (fn [{:keys [items current-keys current-abort-id]} item]\n                             (let [abort-id (:fulcro.client.network/abort-id item)]\n                               (and\n                                 (not (abort-id-conflict? (seq items) current-abort-id abort-id))\n                                 (empty? (set/intersection current-keys (item-keys item))))))\n        {items-to-load-now :items} (reduce\n                                     (fn [acc item]\n                                       (if (can-go-now? acc item)\n                                         (cond-> acc\n                                           (:fulcro.client.network/abort-id item) (assoc :current-abort-id (:fulcro.client.network/abort-id item))\n                                           :always (update :current-keys set/union (item-keys item))\n                                           :always (update :items conj item))\n                                         (reduced acc)))\n                                     {:current-keys #{} :current-abort-id nil :items []}\n                                     items-ready-to-load)\n        items-to-defer     (->> items-ready-to-load (drop (count items-to-load-now)) vec)]\n    [items-to-load-now items-to-defer]))\n\n(defn mark-loading\n  \"Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  .\"\n  [remote reconciler]\n  (let [state                   (prim/app-state reconciler)\n        is-eligible?            (fn [item] (= remote (data-remote item)))\n        all-items               (get @state :fulcro/ready-to-load)\n        items-ready-to-load     (filter is-eligible? all-items)\n        items-for-other-remotes (filter (comp not is-eligible?) all-items)\n        other-items-loading?    (boolean (seq (get @state :fulcro/loads-in-progress)))\n        [items-to-load-now items-to-defer] (split-items-ready-to-load items-ready-to-load)\n        remaining-items         (concat items-for-other-remotes items-to-defer)\n        loading?                (or (boolean (seq items-to-load-now)) other-items-loading?)\n        ; CAUTION: We use the earliest time of all items, so that we don't accidentally clear history for something we have not even sent.\n        tx-time                 (earliest-load-time all-items)]\n    (when-not (empty? items-to-load-now)\n      (swap! state (fn [s]\n                     (-> s\n                       (place-load-markers items-to-load-now)\n                       (assoc :ui/loading-data loading? :fulcro/ready-to-load remaining-items))))\n      {::prim/query                    (full-query items-to-load-now)\n       ::hist/history-atom             (prim/get-history reconciler)\n       ::prim/remote                   remote\n       ::hist/tx-time                  tx-time\n       ::on-load                       (loaded-callback reconciler)\n       ::on-error                      (error-callback reconciler)\n       :fulcro.client.network/abort-id (first (keep :fulcro.client.network/abort-id items-to-load-now))\n       ::load-descriptors              items-to-load-now})))\n\n(s/fdef mark-loading\n  :args (s/cat :remote keyword? :reconciler prim/reconciler?)\n  :ret ::payload)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Testing API, used to write tests against specific data states\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; not-present represented by nil\n;; ok represented by data\n(def valid-types #{:ready :loading :failed})\n\n(defn make-data-state\n  \"This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed.\"\n  ([type]\n   (make-data-state type {}))\n\n  ([type params]\n   (if (get valid-types type)\n     {::type type ::params params}\n     (throw (ex-info (str \"INVALID DATA STATE TYPE: \" type) {})))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Helpers -- not intended for public use\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn elide-ast-nodes\n  \"Remove items from a query (AST) that have a key listed in the elision-set\"\n  [{:keys [key union-key children] :as ast} elision-set]\n  (let [union-elision? (contains? elision-set union-key)]\n    (when-not (or union-elision? (contains? elision-set key))\n      (when (and union-elision? (<= (count children) 2))\n        (log/warn \"Unions are not designed to be used with fewer than two children. Check your calls to Fulcro\n        load functions where the :without set contains \" (pr-str union-key)))\n      (update ast :children (fn [c] (vec (keep #(elide-ast-nodes % elision-set) c)))))))\n\n(defn inject-query-params\n  \"Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  \"\n  [ast params]\n  (update-in ast [:children] #(map (fn [c] (if-let [new-params (get params (:dispatch-key c))]\n                                             (update c :params merge new-params)\n                                             c)) %)))\n\n(defn ready-state\n  \"Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging.\"\n  [{:keys [ident field params remote without query post-mutation post-mutation-params fallback parallel refresh marker\n           target env initialize abort-id]\n    :or   {remote :remote without #{} refresh [] marker true}}]\n  (assert (or field query) \"You must supply a query or a field/ident pair\")\n  (assert (or (not field) (and field (util/ident? ident))) \"Field requires ident\")\n  (let [old-ast     (prim/query->ast query)\n        ast         (cond-> old-ast\n                      (not-empty without) (elide-ast-nodes without)\n                      (and field params (not (contains? params field))) (inject-query-params {field params})\n                      params (inject-query-params params))\n        query-field (first query)\n        key         (if (util/join? query-field) (util/join-key query-field) query-field)\n        query'      (prim/ast->query ast)]\n    (assert (or (not field) (= field key)) \"Component fetch query does not match supplied field.\")\n    {::type                          :ready\n     ::uuid                          #?(:cljs (str (cljs.core/random-uuid))\n                                        :clj  (str (System/currentTimeMillis)))\n     ::target                        target\n     ::prim/remote                   remote\n     ::prim/ident                    ident                  ; only for component-targeted loads\n     ::field                         field                  ; for component-targeted load\n     ::prim/query                    query'                 ; query, relative to root of db OR component\n     ::post-mutation                 post-mutation\n     ::post-mutation-params          post-mutation-params\n     ::initialize                    initialize\n     ::refresh                       refresh\n     ::marker                        marker\n     ::parallel                      parallel\n     ::fallback                      fallback\n     ; stored on metadata so it doesn't interfere with serializability (this marker ends up in state)\n     ::original-env                  (with-meta {} env)\n     :fulcro.client.network/abort-id abort-id\n     ::hist/tx-time                  (if (some-> env :reconciler)\n                                       (prim/get-current-time (:reconciler env))\n                                       (do hist/max-tx-time))}))\n\n(defn mark-ready\n  \"Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load` and `load-field` functions in `fulcro.client.data-fetch` for the public API.\"\n  [{:keys [env] :as config}]\n  (let [state        (get env :state)\n        marker?      (not (identical? false (:marker config)))\n        load-request (ready-state (merge {:marker true :refresh [] :without #{} :env env} config))]\n    (swap! state (fn [s]\n                   (cond-> (update s :fulcro/ready-to-load (fnil conj []) load-request)\n                     marker? (place-load-marker load-request))))))\n\n(defn data-target\n  \"Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field.\"\n  [state] (::target state))\n(defn data-ident\n  \"Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field.\"\n  [state] (::prim/ident state))\n(defn data-query\n  \"Get the query that will be sent to the server as a result of the given data state marker\"\n  [state]\n  (if (data-ident state)\n    [{(data-ident state) (::prim/query state)}]\n    (::prim/query state)))\n(defn data-field\n  \"Get the target field (if any) from the data state marker\"\n  [state] (::field state))\n(defn data-uuid\n  \"Get the UUID of the data fetch\"\n  [state] (::uuid state))\n(defn data-marker\n  \"Returns the ID of the data marker, or nil/false if there isn't one. True means to use the old marker behavior of\n  replacing the data in app state with a marker (DEPRECATED)\"\n  [state] (::marker state))\n(defn data-marker?\n  \"Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data.\"\n  [state] (boolean (::marker state)))\n(defn data-refresh\n  \"Get the list of query keywords that should be refreshed (re-rendered) when this load completes.\"\n  [state] (::refresh state))\n(defn data-remote\n  \"Get the remote that this marker is meant to talk to\"\n  [state] (::prim/remote state))\n(defn data-query-key\n  \"Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)\"\n  [state]\n  (let [ast  (prim/query->ast (-> state ::prim/query))\n        node (-> ast :children first)]\n    (:key node)))\n\n(defn data-path\n  \"Get the app-state database path of the target of the load that the given data state marker is trying to load.\"\n  [state]\n  (let [target (data-target state)]\n    (cond\n      (and (nil? (data-field state)) (vector? target) (not-empty target)) target\n      (and (vector? (data-ident state)) (keyword? (data-field state))) (conj (data-ident state) (data-field state))\n      (util/ident? (data-query-key state)) (data-query-key state)\n      :otherwise [(data-query-key state)])))\n\n(defn data-params\n  \"Get the parameters that the user wants to add to the first join/keyword of the data fetch query.\"\n  [state] (::params state))\n\n;; Setters\n(letfn [(set-type [state type params]\n          (merge state {::type   type\n                        ::params params}))]\n  (defn set-ready!\n    \"Returns a state (based on the input state) that is in the 'ready' to load state.\"\n    ([state] (set-ready! state nil))\n    ([state params] (set-type state :ready params)))\n  (defn set-loading!\n    \"Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)\"\n    ([state] (set-loading! state nil))\n    ([state params] (let [rv (set-type state :loading params)]\n                      (with-meta rv {:state rv}))))\n  (defn set-failed!\n    \"Returns a marker (based on the input state) that is in the error state\"\n    ([state] (set-failed! state nil))\n    ([state params]\n     (set-type state :failed params))))\n\n(defn full-query\n  \"Composes together the queries of a sequence of data states into a single query.\"\n  [items] (vec (mapcat (fn [item] (data-query item)) items)))\n\n(defn- set-global-loading! [reconciler]\n  \"Sets the global :ui/loading-data to false if there are no loading fetch states in the entire app-state, otherwise sets to true.\"\n  (let [state-atom (prim/app-state reconciler)\n        loading?   (boolean (seq (get @state-atom :fulcro/loads-in-progress)))]\n    (swap! state-atom assoc :ui/loading-data loading?)))\n\n(defn replacement-target? [t] (targeting/replacement-target? t))\n(defn prepend-target? [t] (targeting/prepend-target? t))\n(defn append-target? [t] (targeting/append-target? t))\n(defn multiple-targets? [t] (targeting/multiple-targets? t))\n(defn special-target? [t] (targeting/special-target? t))\n\n(def process-target targeting/process-target)\n\n(defn relocate-targeted-results!\n  \"For items that are manually targeted, move them in app state from their result location to their target location.\"\n  [state-atom items]\n  (swap! state-atom\n    (fn [state-map]\n      (reduce (fn [state item]\n                (let [default-target  (data-query-key item)\n                      explicit-target (or (data-target item) [])\n                      relocate?       (and\n                                        (nil? (data-field item))\n                                        (not-empty explicit-target))]\n                  (if relocate?\n                    (process-target state default-target explicit-target)\n                    state))) state-map items))))\n\n(defn- remove-marker\n  \"Returns app-state without the load marker for the given item.\"\n  [app-state item]\n  (let [marker-id      (data-marker item)\n        legacy-marker? (-> marker-id keyword? not)]\n    (if legacy-marker?\n      (let [path (data-path item)\n            data (get-in app-state path)]\n        (cond\n          (and (map? data) (= #{:ui/fetch-state} (set (keys data)))) (assoc-in app-state path nil) ; to-many (will become a vector)\n          (and (map? data) (contains? data :ui/fetch-state)) (update-in app-state path dissoc :ui/fetch-state)\n          :else (assoc-in app-state path nil)))\n      (update app-state marker-table dissoc marker-id))))\n\n(defn callback-env\n  \"Build a callback env for post mutations and fallbacks\"\n  [reconciler load-request original-env]\n  (let [state (prim/app-state reconciler)\n        {:keys [::target ::prim/remote ::prim/ident ::field ::prim/query ::post-mutation ::post-mutation-params ::refresh ::marker ::parallel ::fallback]} load-request]\n    (merge original-env\n      {:state state\n       :load-request\n              (cond-> {:target target :remote remote :marker marker :server-query query :parallel (boolean parallel)}\n                post-mutation (assoc :post-mutation post-mutation)\n                post-mutation-params (assoc :post-mutation-params post-mutation-params)\n                refresh (assoc :refresh refresh)\n                fallback (assoc :fallback fallback))})))\n\n(defn- tick! \"Ability to mock in tests\"\n  [r]\n  (p/tick! r))\n\n(defn- loaded-callback\n  \"Generates a callback that processes all of the post-processing steps once a remote ***load*** has completed. This includes:\n\n  - Marking the items that were queried for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Triggering re-render for all data item refresh lists\n  - Removing the activity from history tracking\n  \"\n  [reconciler]\n  (fn [response items]\n    (let [query               (full-query items)\n          base-merge          (reduce (fn [initial-state item]\n                                        (if-let [item-tree (::initialize item)]\n                                          (merge initial-state item-tree)\n                                          initial-state)) {} items)\n          response            (util/deep-merge base-merge response)\n          loading-items       (into #{} (map set-loading! items))\n          refresh-set         (into #{:ui/loading-data :ui/fetch-state marker-table} (mapcat data-refresh items))\n          marked-response     (prim/mark-missing response query)\n          to-refresh          (into (vec refresh-set) (remove symbol?) (keys marked-response))\n          app-state           (prim/app-state reconciler)\n          ran-mutations       (atom false)\n          remove-markers!     (fn [] (doseq [item loading-items]\n                                       (swap! app-state (fn [s]\n                                                          (cond-> s\n                                                            :always (update :fulcro/loads-in-progress disj (data-uuid item))\n                                                            (data-marker? item) (remove-marker item))))))\n          run-post-mutations! (fn [] (doseq [item loading-items]\n                                       (when-let [mutation-symbol (::post-mutation item)]\n                                         (reset! ran-mutations true)\n                                         (let [params       (or (::post-mutation-params item) {})\n                                               original-env (-> item ::original-env meta)]\n                                           (some-> (m/mutate (callback-env reconciler item original-env) mutation-symbol params)\n                                             :action\n                                             (apply []))))))]\n      (remove-markers!)\n      (prim/merge! reconciler marked-response query)\n      (relocate-targeted-results! app-state loading-items)\n      (run-post-mutations!)\n      (set-global-loading! reconciler)\n      (tick! reconciler)\n      (if (contains? refresh-set :fulcro/force-root)\n        (prim/force-root-render! reconciler)\n        (force-render reconciler to-refresh)))))\n\n(defn- error-callback\n  \"Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:fulcro/server-error)\n  - Refreshes UI (from root if there were fallbacks)\n  \"\n  [reconciler]\n  (fn [error items]\n    (let [loading-items (into #{} (map set-loading! items))\n          app-state     (prim/app-state reconciler)\n          ; TODO: currently forcing root refresh, so these are not needed. Perhaps that should be optimized?\n          ;refresh-set   (into #{:ui/loading-data :ui/fetch-state marker-table} (mapcat data-refresh items))\n          ;to-refresh    (vec refresh-set)\n          ran-fallbacks (atom false)\n          mark-errors   (fn []\n                          (swap! app-state assoc :fulcro/server-error error)\n                          (doseq [item loading-items]\n                            (swap! app-state (fn [s]\n                                               (cond-> s\n                                                 (and (data-marker? item) (keyword? (data-marker item))) (update-in [marker-table (data-marker item)] set-failed! error)\n                                                 (and (data-marker? item) (identical? true (data-marker item))) (update-in (conj (data-path item) :ui/fetch-state) set-failed! error)\n                                                 :always (update :fulcro/loads-in-progress disj (data-uuid item)))))))\n          run-fallbacks (fn [] (doseq [item loading-items]\n                                 (when-let [fallback-symbol (::fallback item)]\n                                   (let [original-env (-> item ::original-env meta)\n                                         env          (callback-env reconciler item original-env)]\n                                     (reset! ran-fallbacks true)\n                                     (some->\n                                       (m/mutate env fallback-symbol {:error error})\n                                       :action\n                                       (apply []))))))]\n      (mark-errors)\n      (run-fallbacks)\n      (set-global-loading! reconciler)\n      (tick! reconciler)\n      (prim/force-root-render! reconciler))))\n\n(defn is-deferred-transaction?\n  \"Returns true if the outgoing query is just a placeholder indicator for a deferred transaction in the load queue.\"\n  [query]\n  (boolean (and query (vector? query) (= ::deferred-transaction (first query)))))\n"]}