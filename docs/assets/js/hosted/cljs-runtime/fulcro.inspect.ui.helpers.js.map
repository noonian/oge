{"version":3,"file":"fulcro.inspect.ui.helpers.js","sources":["fulcro/inspect/ui/helpers.cljs"],"mappings":"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","names":["fulcro.inspect.ui.helpers/js-get-in","x","path","G__42402","G__42403","goog.object/getValueByKeys","cljs.core/clj->js","fulcro.inspect.ui.helpers/html-attr-merge","a","b","cljs.core/map?","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","fulcro.inspect.ui.helpers/props->html","seq42408","G__42409","cljs.core/first","cljs.core/next","self__4486__auto__","attrs","props","p1__42406#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/merge-with","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","p__42410","vec__42411","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","_","cljs.core/simple-keyword?","fulcro.inspect.ui.helpers/expand-classes","css","classes","clojure.string.join.cljs$core$IFn$_invoke$arity$2","fulcro.inspect.ui.helpers/props","comp","defaults","fulcro.inspect.ui.helpers.props__GT_html.cljs$core$IFn$_invoke$arity$variadic","fulcro.client.primitives/props","fulcro.inspect.ui.helpers/props+classes","fulcro.client.primitives/react-type","fulcro-css.css/get-classnames","G__42451","fulcro.inspect.ui.helpers/computed-factory","js/Error","class","fulcro.inspect.ui.helpers.computed_factory.cljs$core$IFn$_invoke$arity$2","options","factory","fulcro.client.primitives.factory.cljs$core$IFn$_invoke$arity$2","fulcro$inspect$ui$helpers$real_factory.cljs$core$IFn$_invoke$arity$2","computed","G__42452","fulcro.client.primitives/computed","fulcro.inspect.ui.helpers/normalize-id","id","temp__5455__auto__","vec__42455","prefix","cljs.core/re-find","cljs.core/Keyword","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/Symbol","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","fulcro.inspect.ui.helpers/ref-app-id","ref","cljs.core/vector?","cljs.core/second","vec__42461","vec__42465","app-id","fulcro.inspect.ui.helpers/comp-app-id","fulcro.client.primitives.get_ident.cljs$core$IFn$_invoke$arity$1","fulcro.inspect.ui.helpers/all-apps","state","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","fulcro.inspect.ui.helpers/matching-apps","nid","p1__42474#","cljs.core/filterv","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","fulcro.inspect.ui.helpers/update-matching-apps","f","apps","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","s","app"],"sourcesContent":["(ns fulcro.inspect.ui.helpers\n  (:require [fulcro-css.css :as css]\n            [clojure.string :as str]\n            [goog.object :as gobj]\n            [fulcro.client.primitives :as fp]))\n\n(defn js-get-in [x path]\n  (gobj/getValueByKeys x (clj->js path)))\n\n(defn html-attr-merge [a b]\n  (cond\n    (map? a) (merge a b)\n    (string? a) (str a \" \" b)\n    :else b))\n\n(defn props->html\n  [attrs & props]\n  (->> (mapv #(dissoc % :react-key) props)\n       (apply merge-with html-attr-merge (dissoc attrs :react-key))\n       (into {} (filter (fn [[k _]] (simple-keyword? k))))\n       (clj->js)))\n\n(defn expand-classes [css classes]\n  {:className (str/join \" \" (mapv css classes))})\n\n(defn props\n  [comp defaults]\n  (props->html defaults (fp/props comp)))\n\n(defn props+classes [comp defaults]\n  (let [props (fp/props comp)\n        css   (-> comp fp/react-type css/get-classnames)]\n    (props->html defaults\n                 (expand-classes css (:fulcro.inspect.ui.core/classes props))\n                 props)))\n\n(defn computed-factory\n  ([class] (computed-factory class {}))\n  ([class options]\n   (let [factory (fp/factory class options)]\n     (fn real-factory\n       ([props] (real-factory props {}))\n       ([props computed]\n        (factory (fp/computed props computed)))))))\n\n(defn normalize-id [id]\n  (if-let [[_ prefix] (re-find #\"(.+?)(-\\d+)$\" (str id))]\n    (cond\n      (keyword? id) (keyword (subs prefix 1))\n      (symbol? id) (symbol prefix)\n      :else prefix)\n    id))\n\n(defn ref-app-id\n  \"Extracts the app id from a reference.\"\n  [ref]\n  (assert (and (vector? ref)\n               (vector? (second ref)))\n    \"Ref with app it must be in the format: [:id-key [::app-id app-id]]\")\n  (let [[_ [_ app-id]] ref]\n    (normalize-id app-id)))\n\n(defn comp-app-id [comp]\n  (-> comp fp/get-ident ref-app-id))\n\n(defn all-apps [state]\n  (->> (get-in state [:fulcro.inspect.ui.multi-inspector/multi-inspector\n                      \"main\"\n                      :fulcro.inspect.ui.multi-inspector/inspectors])\n       (mapv second)))\n\n(defn matching-apps [state app-id]\n  (let [nid (normalize-id app-id)]\n    (->> (all-apps state)\n         (filterv #(= nid (normalize-id %))))))\n\n(defn update-matching-apps [state app-id f]\n  (let [apps (matching-apps state app-id)]\n    (reduce\n      (fn [s app]\n        (f s app))\n      state\n      apps)))\n"]}