{"version":3,"file":"com.wsscode.pathom.profile.js","sources":["com/wsscode/pathom/profile.cljc"],"mappings":";;;;;AAOA,uCAAA,vCAAOA,sFAAWC,IAAIC;AAAtB,AACE,GACE,AAACC,qBAAKF;AACN,yDAAA,lDAACG,8CAAMH,6GAAWC;;AAFpB,AAKEA;;;;AAEJ,6CAAA,7CAAMG;AAAN,AAEW,OAAU,KAAAC;;AAErB,4CAAA,2CAAA,vFAAKC,sMAEF,gEAAgCC;AAAhC,AACE,6GAAyCC,IAAIC;AAA7C,AACE,IAAAC,WAAQ,kDAAA,lDAACP,8CAAMK,mHAAe,6CAAA,7CAACI;IAA/BD,WAAyCF;AAAzC,AAAA,oFAAAC,SAAAC,6BAAAD,SAAAC,3HAACJ,uCAAAA,0DAAAA;;GAJR,4GAOG,8DAA8BM;AAA9B,AACE,yGAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;UAAAA,NAC0CP;oBAD1C,AAAAW,4CAAAJ,eAAA,3EACYK;WADZ,AAAAD,4CAAAJ,eAAA,lEACgCM;AADhC,AAEE,GAAI,6CAAA,7CAACE,4JAAY,AAACC,qCAAehB;AAAjC,OAAAc,gBACGF;;AACD,IAAMK,aAAW,AAACrB;IACZsB,MAAW,CAACb,uCAAAA,4CAAAA,PAAOL,wBAAAA;AADzB,AAEE,AAACmB,0DAAMP,cAASQ,oBAAUP,KAAKtB,uFAC7B,CAAG,AAACK,+CAAiBqB;;AACvBC;;;GAhBX,+GAmBG,gEAAgCG;AAAhC,AACE,6GAAAC,SAC+BE,EAAEC;AADjC,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAf,gCAAA,AAAAe,+BAAA,KAAA,OAAA,QAAA,AAAAd,8CAAAC,mBAAAa,YAAAA;UAAAA,NAC0BvB;oBAD1B,AAAAW,4CAAAY,eAAA,3EACYX;AADZ,AAEE,IAAMc,MAAI,CAACL,uCAAAA,qDAAAA,hBAAOrB,iCAAAA,7BAAIwB,iCAAAA,/BAAEC,iCAAAA;AAAxB,AACE,IAAAE,WAAQD;AAAR,AAAA,oBACE,AAAA,uFAASA;AACT,sDAAAC,SAAA,xDAACC,iHACC;kBAAKC;AAAL,AACE;;AAAA,AACE,IAAMZ,aAAW,AAACrB;IACZsB,MAAW,CAACW,uCAAAA,yCAAAA;AADlB,AAEE,AAACC,mDAAMlB,cAASmB,gBAAMP,EAAE,CAAG,AAAC5B,+CAAiBqB;;AAC7CC;;;;;;AARVS;;;;AAUT,oDAAA,pDAAMK,gHAAkBC;AAAxB,AACE,GAAI,AAACvC,qBAAKuC;AACR,uBACK,AAACC,+CAAO,WAAAC,1EACRI;AADQ,AAAA,IAAAH,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAMZ;QAAN,AAAAa,4CAAAD,WAAA,IAAA,/DAAQ3C;AAAR,AAAY,SAAK,kDAAA,lDAAC6C,gDAAKd,iHAAU,6CAAA,7CAACT,kKAAetB;GADzDwC;;AADP;;;AAYC,mCAAA,nCAAMO,8EAAOC;AAAb,AACE,IAAMC,IAAE,AAACC;AAAT,AACE,WAAA,XAACC;;AAAD,AAAgB,iEAAA,1DAACC,wDAAKH;;CAAUD;;AAChCC;;AAEP,gDAAA,hDAAMI,wGAAoBC;AAA1B,AACE,kBAAAC,SACkBxB,EAAE2B;AADpB,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAzC,gCAAA,AAAAyC,+BAAA,KAAA,OAAA,QAAA,AAAAxC,8CAAAC,mBAAAuC,YAAAA;UAAAA,NACajD;cADb,AAAAW,4CAAAsC,eAAA,rEAAcC;AAAd,AAEE,IAAAE,aAAwB,AAACC,sCAAgBrD;IAAzCoD,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA5C,gCAAA,AAAA4C,+BAAA,KAAA,OAAA,QAAA,AAAA3C,8CAAAC,mBAAA0C,YAAAA;WAAA,AAAAzC,4CAAAyC,eAAA,lEAAiBvC;IACXI,aAAW,AAACrB;IACZsB,MAAW,CAAC6B,kCAAAA,2CAAAA,XAAE/C,uBAAAA,nBAAIwB,uBAAAA,rBAAE2B,uBAAAA;AAF1B,AAGE,oBAAID;AACF,oBAAI,AAACI,qCAAS,AAAA,oFAAQpC;AACpB,AACE,kLAAA,lLAACC,0DAAM+B,QAAQ9B,oBAAUP,KAAKtB;;AAC9B,IAAAgE,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA;kBAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,AAAA,oFACsB5C;IADtB0C,kBAAAA;AAAA,AAAA,OAAAG,4CAAAH,gBAAA,IAAAE;;AAAA,GAAA,CAAAD,oBAAA;AAAA,IAAAG,aAAA,CAAAJ,YAAA;IAAAA,kBAAA,iBAAAK,iBAAAL;AAAA,AAAA,CAAAK,eAAA,OAAAD;;AAAAC;;AAAA,AAAA,AAAA,IAAAC,uBAAAN;AAAA,AAAA,CAAAM,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAL,oBAAA;AAAA,IAAAM,aAAA,AAAArD,gBAEsCoC;IAFtCkB,aAAA,+CAAAD,/CAE8BiC,0DAAgBvF;IAF9CwD,aAAA,kDAAAD,lDAEYpC;IAFZ4B,kBAAAA;AAAA,AAAA,AAAA,oBAAAS;AAAA,IAAAC,uBAAAV;AAAA,AAAA,CAAAU,qBAAA,OAAA;;AAAAA;AAAA,IAAAC,uBAAAX;AAAA,AAAA,CAAAW,qBAAA,OAAA;;AAAAA;;AAAA;;AAAA,GAAA,CAAAV,oBAAA;AAAA,IAAAG,aAAA,CAAAJ,YAAA;IAAAY,aAAA,CAAAZ,YAAA;IAAAa,aAAA,AAKU7E;IALV8E,aAAA,CAAAD,aAK2BxD;IAL3B0D,aAAA,kLAAAD,lLAIKvD,0DAAM+B,QAAQ9B,oBAAUP,KAAKtB;IAJlCqF,aAAA,kDAAA,sDAAAZ,xGAMKrE,8CAAMuB;IANX0C,kBAAA,iBAAAiB,iBAAAjB;AAAA,AAAA,CAAAiB,eAAA,OAAAF;;AAAA,CAAAE,eAAA,OAAAL;;AAAAK;;AAAA,AAAA,OAAAC,6CAAAlB,gBAAAgB;;AAAA,GAAA,CAAAf,oBAAA;AAAA,IAAAkB,aAAA,iCAAA,jCAGWvC;IAHXoB,kBAAAA;AAAA,AAAA,OAAAG,4CAAAH,gBAAA,IAAAmB;;AAAA,GAAA,CAAAlB,oBAAA;AAAA,IAAAD,kBAAAA;AAAA,AAAA,AAAA,IAAAoB,uBAAApB;AAAA,AAAA,CAAAoB,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAnB,oBAAA;AAAA,IAAAoB,aAAA,CAAArB,YAAA;IAAAA,kBAAAA;AAAA,AAAA,AAAA,IAAAsB,uBAAAtB;AAAA,AAAA,CAAAsB,qBAAA,OAAAD;;AAAA,CAAAC,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAArB,oBAAA;AAAA,IAAAsB,aAAA,CAAAvB,YAAA;IAAAA,kBAAA,iBAAAwB,iBAAAxB;AAAA,AAAA,CAAAwB,eAAA,QAAAD;;AAAAC;;AAAA,AAAA,AAAA,IAAAC,uBAAAzB;AAAA,AAAA,CAAAyB,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;AAAA,AAAA;;;;AAAA,AAAA,IAAAC,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;iGAAA1B;;AAAA,AAAA,IAAA4B,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAA9B,sBAAAC;AAAA,AAAA,GAAA,AAAA8B,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,GAAA,CAAAE,kBAAAC;AAAA,IAAAC,oBAAAF;AAAA,AAAA,IAAAG,uBAAAlC;AAAA,AAAA,CAAAkC,qBAAA,OAAAD;;AAAAC;AAAA,AAAAC,mDAAAnC;;AAAA;;AAAA,AAAA,MAAA+B;;;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAA5B;;;;AAAA4B;;;;;wFAAA5B;;;;;iGAAAA;;;;;;;;;;IAAAoC,uBAAA,iBAAAC,iBAAA,CAAAvC,iDAAAA,mDAAAA;AAAA,AAAA,CAAAuC,eAAAC,AAAA,OAAA3C;;AAAA0C;;AAAA,AAAA,OAAAE,2DAAAH;;;;AAAAzC;;AAOF,AACE,AAACpC,0DAAM+B,QAAQ9B,oBAAUP,KAAKtB,uFAC5B,CAAG,AAACK,+CAAiBqB;;AACvBC;;;AACJA;;;;AAIR,uCAAA,vCAAMmF,sFAAWC;AAAjB,AACE,GACE,AAACC,wBAAQD;AAAG,yDAAA,lDAACE,sDAAwB,AAACC,4CAAIJ,qCAAUC;;AADtD,AAEQ,oDAAKA;;;;AAEf,wCAAA,xCAAMI,wFAAYJ;AAAlB,AACE,GAAI,AAAC5G,qBAAK4G;AACR,IAAAK,mBAAI,AAAA,uIAAQL;AAAZ,AAAA,oBAAAK;AAAAA;;AAAe,OAAClG,8CAAMmG,iBAAE,AAACH,4CAAIC,sCAAW,AAACG,eAAKP;;;AAC9CA;;;AAIJ,mDAAA,nDAAMQ,8GAAe7E;AAArB,AAEO,oDAAA,7CAAC8E,8EAAQ,AAACC,6CAAK,+CAAA,WAAAC,1DAACC;AAAD,AAAS,oDAAA,7CAACnG,sJAAS,gBAAAkG,hBAAC1E;IACpB,AAAC4E,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA/E,4CAAAgF,WAAA,IAAA,/DAAM7F;QAAN,AAAAa,4CAAAgF,WAAA,IAAA,/DAAQ5H;AAAR,AACE,IAAA6H,WAAA,2CAAA,6FAAA,xCAAe,AAACjB,qCAAU7E,yDAAU,AAACkF,sCAAWjH;AAAhD,AAAA,GACE,AAACC,qBAAKD;AAAG,qDAAA6H,SAAA,vDAAC3H,oHAAgB,CAACmH,iFAAAA,oFAAAA,LAAcrH,gEAAAA;;AAD3C6H;;KAHtBrF;;AAMP;;;;;;;;6CAAA,7CAAMsF,kGAOHC;AAPH,AAQE,IAAMC,QAAM,AAAChH,8CAAMmG,iBAAE,AAACH,4CAAIC,sCAAW,AAACG,eAAKW;AAA3C,AAAA,kDAAA,qDAAA,OAAA,4DAAA,NAEaC,mEACA,AAACX,iDAAcU;;AAK9B,AAAKE,qDAAqBH","names":["com.wsscode.pathom.profile/append-at","cur","v","cljs.core/map?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","com.wsscode.pathom.profile/current-time-ms","js/Date","com.wsscode.pathom.profile/profile-plugin","parser","env","tx","G__47633","G__47634","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reader","p__47635","map__47636","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","profile*","path","cljs.core/deref","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.core/key-dispatch","start-time","res","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","mutate","p__47638","map__47639","k","params","out","G__47641","cljs.core.update.cljs$core$IFn$_invoke$arity$3","action","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","com.wsscode.pathom.profile/process-pending?","m","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__47642","vec__47643","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","com.wsscode.pathom.profile/sleep","ms","c","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","js/setTimeout","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.profile/async-wrap-profile","f","p__47646","map__47647","profile","p","map__47649","com.wsscode.pathom.core/normalize-env","com.wsscode.pathom.async/chan?","c__33851__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__33852__auto__","switch__32834__auto__","state_47673","state_val_47674","inst_47651","cljs.core.async.impl.ioc-helpers/take!","inst_47653","statearr-47675","statearr-47676","inst_47655","inst_47656","inst_47657","statearr-47677","statearr-47678","inst_47667","inst_47668","inst_47669","inst_47670","inst_47671","statearr-47679","cljs.core.async.impl.ioc-helpers/return-chan","inst_47659","statearr-47680","inst_47665","statearr-47681","inst_47661","statearr-47682","statearr-47683","statearr-47684","state-machine__32835__auto__","ret-value__32836__auto__","result__32837__auto__","cljs.core/keyword-identical?","e47685","js/Object","ex__32838__auto__","statearr-47686","cljs.core.async.impl.ioc-helpers/process-exception","state__33853__auto__","statearr-47687","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.profile/node-name","x","cljs.core/vector?","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.profile/node-value","or__3922__auto__","cljs.core/+","cljs.core/vals","com.wsscode.pathom.profile/profile->nvc*","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p1__47696#","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__47697","vec__47698","G__47701","com.wsscode.pathom.profile/profile->nvc","data","total","com.wsscode.pathom.profile/profile->flame-graph"],"sourcesContent":["(ns com.wsscode.pathom.profile\n  #?(:cljs (:require-macros [cljs.core.async.macros :refer [go]]))\n  (:require #?(:clj [clojure.core.async :refer [<! go chan put! thread]])\n    #?(:cljs [cljs.core.async :refer [<! chan put!]])\n                    [com.wsscode.pathom.core :as p]\n                    [com.wsscode.pathom.async :as pa]))\n\n(defn- append-at [cur v]\n  (cond\n    (map? cur)\n    (assoc cur ::self v)\n\n    :else\n    v))\n\n(defn current-time-ms []\n  #?(:clj  (System/currentTimeMillis)\n     :cljs (.getTime (js/Date.))))\n\n(def profile-plugin\n  {::p/wrap-parser\n   (fn profile-plugin-wrap-parser [parser]\n     (fn profile-plugin-wrap-parser-internal [env tx]\n       (parser (assoc env ::profile* (atom {})) tx)))\n\n   ::p/wrap-read\n   (fn profile-plugin-wrap-read [reader]\n     (fn profile-plugin-wrap-read-internal\n       [{::keys [profile*] ::p/keys [path] :as env}]\n       (if (= ::profile (p/key-dispatch env))\n         @profile*\n         (let [start-time (current-time-ms)\n               res        (reader env)]\n           (swap! profile* update-in path append-at\n             (- (current-time-ms) start-time))\n           res))))\n\n   ::p/wrap-mutate\n   (fn profile-plugin-wrap-mutate [mutate]\n     (fn profile-plugin-wrap-mutate-internal\n       [{::keys [profile*] :as env} k params]\n       (let [out (mutate env k params)]\n         (cond-> out\n           (:action out)\n           (update :action\n             (fn [action]\n               (fn []\n                 (let [start-time (current-time-ms)\n                       res        (action)]\n                   (swap! profile* assoc k (- (current-time-ms) start-time))\n                   res))))))))})\n\n(defn process-pending? [m]\n  (if (map? m)\n    (->> m\n         (filter (fn [[k v]] (and (not= k ::self) (= ::processing v))))\n         first)))\n\n#?(:clj\n   (defn sleep [ms]\n     (go\n       (Thread/sleep ms)\n       ::done))\n\n   :cljs\n   (defn sleep [ms]\n     (let [c (chan)]\n       (js/setTimeout #(put! c ::done) ms)\n       c)))\n\n(defn async-wrap-profile [f]\n  (fn [{::keys [profile]\n        :as    env} k p]\n    (let [{::p/keys [path]} (p/normalize-env env)\n          start-time (current-time-ms)\n          res        (f env k p)]\n      (if profile\n        (if (pa/chan? (:value res))\n          (do\n            (swap! profile update-in path append-at ::processing)\n            (go\n              (let [v (<! (:value res))]\n                (while (process-pending? (get-in @profile path))\n                  (<! (sleep 1)))\n                (swap! profile update-in path append-at\n                  (- (current-time-ms) start-time))\n                (assoc res :value v))))\n          (do\n            (swap! profile update-in path append-at\n              (- (current-time-ms) start-time))\n            res))\n        res))))\n\n;; Helper computing functions\n\n(defn node-name [x]\n  (cond\n    (vector? x) (clojure.string/join \"_\" (map node-name x))\n    :else (str x)))\n\n(defn node-value [x]\n  (if (map? x)\n    (or (::self x) (apply + (map node-value (vals x))))\n    x))\n\n;; Flame graph conversion\n\n(defn profile->nvc* [m]\n  (->> m\n       (into [] (comp (remove #(= ::self (first %)))\n                      (map (fn [[k v]]\n                             (cond-> {:name (node-name k) :value (node-value v)}\n                               (map? v) (assoc :children (profile->nvc* v)))))))))\n\n(defn profile->nvc\n  \"Convert data into format of maps containg the keys:\n    name: the current attribute name\n    value: the total time spent on the node + children\n    children: the children elements (recursive)\n\n   This for is suitable for some d3 flamegraph plugins on the browser\"\n  [data]\n  (let [total (apply + (map node-value (vals data)))]\n    {:name     \"Root\"\n     :value    total\n     :children (profile->nvc* data)}))\n\n;; DEPRECATED\n\n; old name, kept for compatibility\n(def profile->flame-graph profile->nvc)\n"]}