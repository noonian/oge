{"version":3,"file":"com.wsscode.pathom.connect.js","sources":["com/wsscode/pathom/connect.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/symbol?","cljs.core/keyword?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__47024","cljs.core/set?","cljs.spec.alpha/or-spec-impl","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","G__47025","cljs.core/map?","i__14798__auto__","v__14799__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__47026","cljs.core/vector?","cljs.spec.alpha/map-spec-impl","G__47027","cljs.core/contains?","G__47031","G__47033","G__47034","G__47035","G__47036","G__47037","G__47046","com.wsscode.pathom.connect/resolver-data","env","sym","idx","G__47097","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.connect/spec-keys","form","p1__47103#","p2__47102#","select-keys'","cljs.core/select-keys","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core/vals","cljs.core/concat","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","com.wsscode.pathom.connect/resolver->in-out","fspec","com.wsscode.spec-inspec/safe-form","in","cljs.core/first","com.wsscode.spec-inspec/spec->root-sym","out","cljs.core/set","com.wsscode.pathom.connect/flat-query","query","fulcro.client.primitives/query->ast","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.connect/normalize-io","output","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","x","vec__47122","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","com.wsscode.pathom.connect/merge-io","a","b","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","merge-attrs","com.wsscode.pathom.connect/merge-oir","p1__47135#","p2__47136#","cljs.core/into","method-table__4382__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4383__auto__","method-cache__4384__auto__","cached-hierarchy__4385__auto__","hierarchy__4386__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.connect/index-merger","_","cljs.core/-add-method","ia","ib","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","com.wsscode.pathom.connect/merge-indexes","cljs.core/reduce-kv","p1__47158#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","var_args","G__47171","com.wsscode.pathom.connect/add","js/Error","indexes","com.wsscode.pathom.connect.add.cljs$core$IFn$_invoke$arity$3","sym-data","map__47193","cljs.core/PROTOCOL_SENTINEL","cljs.core.get.cljs$core$IFn$_invoke$arity$2","input","input'","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","G__47200","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","out-attr","G__47202","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","G__47228","p__47236","map__47238","com.wsscode.pathom.connect/pick-resolver","dependency-track","e","com.wsscode.pathom.core.entity.cljs$core$IFn$_invoke$arity$1","temp__5455__auto__","attr-resolvers","or__3922__auto__","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__47262","vec__47263","attrs","missing","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/some","p__47250","map__47254","e47256","com.wsscode.pathom.core.entity.cljs$core$IFn$_invoke$arity$2","cljs.core.update.cljs$core$IFn$_invoke$arity$4","com.wsscode.pathom.core/elide-items","cljs.core/seq","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__47277","cljs.core/qualified-symbol?","cljs.core/any?","G__47279","com.wsscode.pathom.connect/index-reader","p__47292","map__47293","com.wsscode.pathom.core.join.cljs$core$IFn$_invoke$arity$2","p__47299","map__47301","com.wsscode.pathom.connect/indexed-ident","attr","com.wsscode.pathom.core/ident-key","com.wsscode.pathom.core/ident-value","com.wsscode.pathom.connect/ident-reader","ent","com.wsscode.pathom.connect/all-readers","com.wsscode.pathom.connect/cached","cache","f","cljs.core/deref","res","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","p__47335","map__47336","com.wsscode.pathom.connect/discover-attrs","index-io","index","ctx","base-keys","tree","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","p1__47329#","p2__47328#","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","G__47341","G__47342","cljs.core/reverse","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","cljs.core/next","available","collected","matches","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__47345","vec__47346","p1__47331#","p2__47332#","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","G__47374","cljs.core/coll?","p__47375","map__47376","com.wsscode.pathom.connect/reprocess-index","index-resolvers","com.wsscode.pathom.connect/data->shape","data","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/sequential?","shape","q","com.wsscode.pathom.core/merge-queries"],"sourcesContent":["(ns com.wsscode.pathom.connect\n  (:require [clojure.spec.alpha :as s]\n            [com.wsscode.pathom.core :as p]\n            [com.wsscode.spec-inspec :as si]\n            [clojure.set :as set]\n            [fulcro.client.primitives :as fp]))\n\n(s/def ::sym symbol?)\n(s/def ::attribute keyword?)\n(s/def ::attributes-set (s/coll-of ::attribute :kind set?))\n\n(s/def ::idents ::attributes-set)\n(s/def ::input ::attributes-set)\n(s/def ::out-attribute (s/or :plain ::attribute :composed (s/map-of ::attribute ::output)))\n(s/def ::output (s/coll-of ::out-attribute :kind vector?))\n\n(s/def ::resolver-data (s/keys :req [::sym] :opt [::input ::output ::cache?]))\n\n(s/def ::index-resolvers (s/map-of ::sym ::resolver-data))\n\n(s/def ::io-map (s/map-of ::attribute ::io-map))\n(s/def ::index-io (s/map-of ::attributes-set ::io-map))\n\n(s/def ::index-oir (s/map-of ::attribute (s/map-of ::attributes-set (s/coll-of ::sym :kind set?))))\n\n(s/def ::indexes (s/keys :req [::index-resolvers ::index-io ::index-oir]\n                         :opt [::idents]))\n\n(defn resolver-data [env sym]\n  (let [idx (cond-> env\n              (contains? env ::indexes)\n              ::indexes)]\n    (get-in idx [::index-resolvers sym])))\n\n(defn spec-keys [form]\n  (let [select-keys' #(select-keys %2 %1)]\n    (->> form (drop 1) (apply hash-map) (select-keys' [:req :opt]) vals (apply concat)\n         (into #{}) vec)))\n\n(defn resolver->in-out [sym]\n  (let [fspec (->> (si/safe-form sym) (drop 1) (apply hash-map))\n        in    (->> fspec :args (drop 4) first si/spec->root-sym spec-keys)\n        out   (->> fspec :ret si/spec->root-sym spec-keys)]\n    {::input  (set in)\n     ::output out}))\n\n(defn- flat-query [query]\n  (->> query fp/query->ast :children (mapv :key)))\n\n(defn- normalize-io [output]\n  (into {} (map (fn [x] (if (map? x)\n                          (let [[k v] (first x)]\n                            [k (normalize-io v)])\n                          [x {}])))\n        output))\n\n(defn merge-io [a b]\n  (letfn [(merge-attrs [a b]\n            (cond\n              (and (map? a) (map? b))\n              (merge-with merge-attrs a b)\n\n              (map? a) a\n              (map? b) b\n\n              :else b))]\n    (merge-with merge-attrs a b)))\n\n(defn merge-oir [a b]\n  (merge-with #(merge-with into % %2) a b))\n\n(defmulti index-merger (fn [k _ _] k))\n\n(defmethod index-merger ::index-io [_ ia ib]\n  (merge-io ia ib))\n\n(defmethod index-merger ::index-oir [_ ia ib]\n  (merge-oir ia ib))\n\n(defmethod index-merger :default [_ a b]\n  (cond\n    (and (set? a) (set? b))\n    (into a b)\n\n    (and (map? a) (map? b))\n    (merge a b)\n\n    :else\n    b))\n\n(defn merge-indexes [ia ib]\n  (reduce-kv\n    (fn [idx k v]\n      (if (contains? idx k)\n        (update idx k #(index-merger k % v))\n        (assoc idx k v)))\n    ia ib))\n\n(defn add\n  ([indexes sym] (add indexes sym {}))\n  ([indexes sym sym-data]\n   (let [{::keys [input output] :as sym-data} (merge {::sym sym}\n                                                     (resolver->in-out sym)\n                                                     sym-data)]\n     (let [input' (if (and (= 1 (count input))\n                           (contains? (get-in indexes [::index-io #{}]) (first input)))\n                    #{}\n                    input)]\n       (merge-indexes indexes\n         (cond-> {::index-resolvers {sym sym-data}\n                  ::index-io        {input' (normalize-io output)}\n                  ::index-oir       (reduce (fn [indexes out-attr]\n                                              (cond-> indexes\n                                                (not= #{out-attr} input)\n                                                (update-in [out-attr input] (fnil conj #{}) sym)))\n                                            {}\n                                            (flat-query output))}\n           (= 1 (count input'))\n           (assoc ::idents #{(first input')})))))))\n\n(s/fdef add\n  :args (s/cat :indexes (s/or :index ::indexes :blank #{{}})\n               :sym ::sym\n               :sym-data (s/? (s/keys :opt [::input ::output])))\n  :ret ::indexes)\n\n(defn pick-resolver [{::keys [indexes dependency-track] :as env}]\n  (let [k (-> env :ast :key)\n        e (p/entity env)]\n    (if-let [attr-resolvers (get-in indexes [::index-oir k])]\n      (or\n        (->> attr-resolvers\n             (map (fn [[attrs sym]]\n                    (let [missing (set/difference attrs (set (keys e)))]\n                      {:sym     sym\n                       :attrs   attrs\n                       :missing missing})))\n             (sort-by (comp count :missing))\n             (some (fn [{:keys [sym attrs]}]\n                     (if-not (contains? dependency-track [sym attrs])\n                       (let [e       (try\n                                       (->> (p/entity (update env ::dependency-track (fnil conj #{}) [sym attrs]) attrs)\n                                            (p/elide-items #{::p/reader-error}))\n                                       (catch #?(:clj Throwable :cljs :default) _ {}))\n                             missing (set/difference (set attrs) (set (keys e)))]\n                         (when-not (seq missing)\n                           ; TODO: better algorithm to pick the output\n                           {:e (select-keys e attrs) :f (first sym)}))))))\n        (throw (ex-info (str \"Attribute \" k \" is defined but requirements could not be met.\")\n                 {:attr k :entity e :requirements (keys attr-resolvers)}))))))\n\n(s/def ::dependency-track (s/coll-of (s/tuple qualified-symbol? ::attributes-set) :kind set?))\n\n(s/fdef pick-resolver\n  :args (s/cat :env (s/keys :req [::indexes] :opt [::dependency-track])))\n\n#?(:clj\n   (defn reader [env]\n     (let [k (-> env :ast :key)]\n       (if-let [{:keys [e f]} (pick-resolver env)]\n         (let [{::keys [cache?] :or {cache? true}} (get-in env [::indexes ::index-resolvers f])\n               response (if cache?\n                          (p/cached env [f e] ((resolve f) env e))\n                          ((resolve f) env e))\n               env'     (get response ::env env)\n               response (dissoc response ::env)]\n           (if-not (or (nil? response) (map? response))\n             (throw (ex-info \"Response from reader must be a map.\" {:sym f :response response})))\n           (p/swap-entity! env' #(merge % response))\n           (let [x (get response k)]\n             (cond\n               (sequential? x)\n               (->> x (map atom) (p/join-seq env'))\n\n               (nil? x)\n               x\n\n               :else\n               (p/join (atom (get response k)) env'))))\n         ::p/continue))))\n\n(def index-reader\n  {::indexes\n   (fn [{::keys [indexes] :as env}]\n     (p/join indexes env))})\n\n(defn indexed-ident [{::keys [indexes] :as env}]\n  (if-let [attr (p/ident-key env)]\n    (if (contains? (::idents indexes) attr)\n      {attr (p/ident-value env)}\n      false)\n    false))\n\n(defn ident-reader [env]\n  (if-let [ent (indexed-ident env)]\n    (p/join (atom ent) env)\n    ::p/continue))\n\n(def all-readers [#?(:clj reader) ident-reader index-reader])\n\n;;;;;;;;;;;;;;;;;;;\n\n(defn- cached [cache x f]\n  (if cache\n    (if (contains? @cache x)\n      (get @cache x)\n      (let [res (f)]\n        (swap! cache assoc x res)\n        res))\n    (f)))\n\n(defn discover-attrs [{::keys [index-io cache] :as index} ctx]\n  (cached cache ctx\n    (fn []\n      (let [base-keys\n            (if (> (count ctx) 1)\n              (let [tree (->> ctx\n                              (repeat (dec (count ctx)))\n                              (map-indexed #(drop (- (count %2) (inc %)) %2))\n                              (reduce (fn [a b]\n                                        (let [attrs (discover-attrs index (vec b))]\n                                          (if (nil? a)\n                                            attrs\n                                            (update-in a (reverse (drop-last b)) merge-io attrs))))\n                                      nil))]\n                (get-in tree (->> ctx reverse next vec)))\n              (merge-io (get-in index-io [#{} (first ctx)])\n                        (get index-io #{(first ctx)} {})))]\n        (loop [available index-io\n               collected base-keys]\n          (let [attrs   (->> collected keys set)\n                matches (remove (fn [[k _]] (seq (set/difference k attrs))) available)]\n            (if (seq matches)\n              (recur\n                (reduce #(dissoc % %2) available (keys matches))\n                (reduce merge-io collected (vals matches)))\n              collected)))))))\n\n(s/fdef discover-attrs\n  :args (s/cat :indexes ::indexes :ctx (s/coll-of ::attribute))\n  :ret ::io-map)\n\n(defn reprocess-index\n  \"This will use the index-fio to re-buildl the index. You might need that if in development you changed some definitions\n  and got in a dirty state somehow\"\n  [{::keys [index-resolvers]}]\n  (reduce-kv add {} index-resolvers))\n\n(defn data->shape\n  \"Helper function to transform a data into an output shape.\"\n  [data]\n  (if (map? data)\n    (reduce-kv\n      (fn [out k v]\n        (conj out\n          (cond\n            (map? v)\n            {k (data->shape v)}\n\n            (sequential? v)\n            (let [shape (reduce\n                          (fn [q x]\n                            (p/merge-queries q (data->shape x)))\n                          []\n                          v)]\n              (if (seq shape)\n                {k shape}\n                k))\n\n            :else\n            k)))\n      []\n      data)))\n"]}