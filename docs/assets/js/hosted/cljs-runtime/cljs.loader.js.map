{"version":3,"file":"cljs.loader.js","sources":["cljs/loader.cljs"],"mappings":"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","names":["cljs.loader/module-infos","cljs.core/MODULE_INFOS","cljs.loader/module-uris","cljs.core/MODULE_URIS","cljs.loader/deps-for","x","graph","depends-on","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p1__27074#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core/vec","cljs.loader/munge-kw","G__27079","cljs.core/Keyword","cljs.core/name","cljs.core/munge","cljs.loader/to-js","m","cljs.core/reduce-kv","ret","k","xs","arr","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","G__27092","G__27093","G__27094","G__27095","goog.object/set","cljs.loader/create-module-manager","mm","goog/module.ModuleManager","ml","goog/module.ModuleLoader","cljs.loader/*module-manager*","cljs.loader/loaded?","module-name","js/Error","cljs.core/contains?","mname","module","var_args","G__27164","cljs.loader/load","cljs.loader.load.cljs$core$IFn$_invoke$arity$2","cb","cljs.loader/set-loaded!","seq__27198","cljs.core/seq","chunk__27199","count__27200","i__27201","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.loader/prefetch"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software\n\n(ns cljs.loader\n  (:require [goog.object :as gobj])\n  (:import [goog.module ModuleLoader]\n           [goog.module ModuleManager]))\n\n(def module-infos MODULE_INFOS) ;; set by compiler\n(def module-uris MODULE_URIS) ;; set by compiler\n\n(defn deps-for [x graph]\n  (let [depends-on (get graph x)]\n    (-> (mapcat #(deps-for % graph) depends-on)\n      (concat depends-on) distinct vec)))\n\n(defn munge-kw [x]\n  (cond-> x\n    (keyword? x) (-> name munge)))\n\n(defn to-js [m]\n  (reduce-kv\n    (fn [ret k xs]\n      (let [arr (into-array (map munge-kw xs))]\n        (doto ret (gobj/set (-> k name munge) arr))))\n    #js {} m))\n\n(defn create-module-manager []\n  (let [mm (ModuleManager.)\n        ml (ModuleLoader.)]\n    (.setLoader mm ml)\n    mm))\n\n(defonce ^:dynamic *module-manager* (create-module-manager))\n\n(.setAllModuleInfo *module-manager* (to-js module-infos))\n(.setModuleUris *module-manager* (to-js module-uris))\n\n(defn loaded?\n  \"Return true if modules is loaded. module-name should be a keyword matching\n   a :modules module definition.\"\n  [module-name]\n  (assert (contains? module-infos module-name)\n    (str \"Module \" module-name \" does not exist\"))\n  (let [mname (-> module-name name munge)\n        module (.getModuleInfo *module-manager* mname)]\n    (when (some? module)\n      (.isLoaded module))))\n\n(defn load\n  \"Load a module. module-name should be a keyword matching a :modules module\n   definition.\"\n  ([module-name]\n    (load module-name nil))\n  ([module-name cb]\n   (assert (contains? module-infos module-name)\n     (str \"Module \" module-name \" does not exist\"))\n   (let [mname (-> module-name name munge)]\n     (if-not (nil? cb)\n       (.execOnLoad *module-manager* mname cb)\n       (.load *module-manager* mname)))))\n\n(defn set-loaded!\n  \"Set a module as being loaded. module-name should be a keyword matching a\n  :modules module definition. Will mark all parent modules as also being\n  loaded.\"\n  [module-name]\n  (assert (contains? module-infos module-name)\n    (str \"Module \" module-name \" does not exist\"))\n  (let [xs (deps-for module-name module-infos)]\n    (doseq [x xs]\n      (.setLoaded *module-manager* (munge-kw x)))\n    (.setLoaded *module-manager* (munge-kw module-name))))\n\n(defn prefetch\n  \"Prefetch a module. module-name should be a keyword matching a :modules\n  module definition. Will download the module but not evaluate it. To\n  complete module load, one must also call cljs.loader/load after prefetching\n  the module. Does nothing if the module is loading or has been loaded.\"\n  [module-name]\n  (assert (contains? module-infos module-name)\n          (str \"Module \" module-name \" does not exist\"))\n  (when-not (loaded? module-name)\n    (let [mname (-> module-name name munge)]\n      (when-not (.isModuleLoading *module-manager* mname)\n        (.prefetchModule *module-manager* mname)))))\n"]}