{"version":3,"file":"fulcro.client.localized_dom_common.js","sources":["fulcro/client/localized_dom_common.cljc"],"mappings":"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","names":["s","clojure.string/replace","k","cljs.core/re-seq","cljs.core/name","fulcro.client.localized-dom-common/parse","tokens","get-tokens","id","p1__42226#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/re-matches","cljs.core/first","classes","p1__42227#","global-classes","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p1__42228#","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$1","sanitized-id","remove-separators","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__42230","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","fulcro.client.localized-dom-common/combined-classes","classes-seq","classes-str","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/seq","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p","nm","dflt","cljs.core/map?","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/object?","G__42269","G__42270","G__42271","goog.object/get","v","G__42273","G__42274","G__42275","goog.object/set","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","G__42278","G__42279","goog.object/remove","fulcro.client.localized-dom-common/fold-in-classes","props","component","temp__5455__auto__","extra-classes","pget","old-classes","pdissoc","clz","fulcro.client.primitives/react-type","new-classes","cljs.core.map.cljs$core$IFn$_invoke$arity$2","c","G__42286","clojure.string/starts-with?","fulcro_css.css.local_class.cljs$core$IFn$_invoke$arity$2","strip-prefix","passoc","fulcro.client.localized-dom-common/add-kwprops-to-props","kw","map__42308","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","fulcro.client.primitives/*parent*","p1__42306#","goog.object/clone","existing-classes","G__42314","G__42315","G__42316","G__42319","or__3922__auto__"],"sourcesContent":["(ns fulcro.client.localized-dom-common\n  (:refer-clojure :exclude [map meta time])\n  (:require\n    #?(:clj [cljs.tagged-literals :refer [->JSValue]])\n    #?@(:cljs [[cljsjs.react]\n               [cljsjs.react.dom]\n               [cljsjs.react.dom.server]\n               [goog.object :as gobj]])\n            [fulcro.client.primitives :as prim]\n            [clojure.string :as str]))\n\n\n(letfn [(remove-separators [s] (when s (str/replace s #\"^[.#$]\" \"\")))\n        (get-tokens [k] (re-seq #\"[#.$]?[^#.$]+\" (name k)))]\n  (defn- parse\n    \"Parse CSS shorthand keyword and return map of id/classes.\n\n    (parse :.klass3#some-id.klass1.klass2)\n    => {:id        \\\"some-id\\\"\n        :classes [\\\"klass3\\\" \\\"klass1\\\" \\\"klass2\\\"]}\"\n    [k]\n    (if k\n      (let [tokens         (get-tokens k)\n            id             (->> tokens (filter #(re-matches #\"^#.*\" %)) first)\n            classes        (->> tokens (filter #(re-matches #\"^\\..*\" %)))\n            global-classes (into []\n                             (comp\n                               (filter #(re-matches #\"^[$].*\" %))\n                               (clojure.core/map (fn [k] (-> k\n                                                           name\n                                                           (str/replace \"$\" \"\")))))\n                             tokens)\n            sanitized-id   (remove-separators id)]\n        (when-not (re-matches #\"^(\\.[^.#$]+|#[^.#$]+|[$][^.#$]+)+$\" (name k))\n          (throw (ex-info \"Invalid style keyword. It contains something other than classnames and IDs.\" {})))\n        (cond-> {:global-classes global-classes\n                 :classes        (into [] (keep remove-separators classes))}\n          sanitized-id (assoc :id sanitized-id)))\n      {})))\n\n(defn- combined-classes\n  \"Takes a sequence of classname strings and a string with existing classes. Returns a string of these properly joined.\n\n  classes-str can be nil or and empty string, and classes-seq can be nil or empty.\"\n  [classes-seq classes-str]\n  (str/join \" \" (if (seq classes-str) (conj classes-seq classes-str) classes-seq)))\n\n(letfn [(pget [p nm dflt] (cond\n                            #?@(:clj [(instance? cljs.tagged_literals.JSValue p) (get-in p [:val nm] dflt)])\n                            (map? p) (get p nm dflt)\n                            #?@(:cljs [(object? p) (gobj/get p (name nm) dflt)])))\n        (passoc [p nm v] (cond\n                           #?@(:clj [(instance? cljs.tagged_literals.JSValue p) (->JSValue (assoc (.-val p) nm v))])\n                           (map? p) (assoc p nm v)\n                           #?@(:cljs [(object? p) (do (gobj/set p (name nm) v) p)])))\n        (pdissoc [p nm] (cond\n                          #?@(:clj [(instance? cljs.tagged_literals.JSValue p) (->JSValue (dissoc (.-val p) nm))])\n                          (map? p) (dissoc p nm)\n                          #?@(:cljs [(object? p) (do (gobj/remove p (name nm)) p)])))\n        (strip-prefix [s] (str/replace s #\"^[:.#$]*\" \"\"))]\n  (defn fold-in-classes\n    \"Update the :className prop in the given props to include the classes in the :classes entry of props. Works on js objects and CLJ maps as props.\n    If using js props, they must be mutable.\"\n    [props component]\n    (if-let [extra-classes (pget props :classes nil)]\n      (let [old-classes (pget props :className \"\")]\n        (pdissoc\n          (if component\n            (let [clz         (prim/react-type component)\n                  new-classes (combined-classes (clojure.core/map (fn [c]\n                                                                    (let [c (some-> c name)]\n                                                                      (cond\n                                                                        (nil? c) \"\"\n                                                                        (str/starts-with? c \".\") (fulcro-css.css/local-class clz (strip-prefix c))\n                                                                        (str/starts-with? c \"$\") (strip-prefix c)\n                                                                        :else c))) extra-classes) old-classes)]\n              (passoc props :className new-classes))\n            (let [new-classes (combined-classes (clojure.core/map strip-prefix extra-classes) old-classes)]\n              (passoc props :className new-classes)))\n          :classes))\n      props)))\n\n(defn add-kwprops-to-props\n  \"Combine a hiccup-style keyword with props that are either a JS or CLJS map.\"\n  [props kw]\n  (let [{:keys [global-classes classes id] :or {classes []}} (parse kw)\n        classes (vec (concat\n                       (if prim/*parent*\n                         (clojure.core/map #(fulcro-css.css/local-class (prim/react-type prim/*parent*) %) classes)\n                         classes)\n                       global-classes))]\n    (fold-in-classes\n      (if #?(:clj false :cljs (or (nil? props) (object? props)))\n        #?(:clj  props\n           :cljs (let [props            (gobj/clone props)\n                       existing-classes (gobj/get props \"className\")]\n                   (when (seq classes) (gobj/set props \"className\" (combined-classes classes existing-classes)))\n                   (when id (gobj/set props \"id\" id))\n                   props))\n        (let [existing-classes (:className props)]\n          (cond-> (or props {})\n            (seq classes) (assoc :className (combined-classes classes existing-classes))\n            id (assoc :id id))))\n      prim/*parent*)))\n\n\n"]}