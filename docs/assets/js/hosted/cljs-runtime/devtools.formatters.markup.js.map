{"version":3,"file":"devtools.formatters.markup.js","sources":["devtools/formatters/markup.cljs"],"mappings":"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","names":["var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","devtools.formatters.markup/print-with","p__29785","vec__29786","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq29781","G__29782","cljs.core/first","cljs.core/next","G__29783","G__29784","self__4486__auto__","method","value","tag","max-level","job-fn","G__29789","G__29790","G__29791","devtools.formatters.markup/get-markup-db","*print-level*29792","cljs.core/*print-level*","devtools.formatters.markup/print-via-writer","p__29800","vec__29801","seq29797","G__29798","G__29799","devtools.formatters.markup.print_with.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.printing/managed-print-via-writer","devtools.formatters.markup/print-via-protocol","p__29810","vec__29811","seq29807","G__29808","G__29809","devtools.formatters.printing/managed-print-via-protocol","devtools.formatters.markup/<expandable>","seq29817","self__4487__auto__","cljs.core/seq","children","inner-markup","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","devtools.formatters.markup/<raw-surrogate>","seq29821","args","devtools.formatters.markup/<surrogate>","p__29830","vec__29831","seq29825","object","header","body","start-index","devtools.formatters.markup._LT_expandable_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup._LT_raw_surrogate_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<reference>","seq29845","devtools.formatters.markup/<reference-surrogate>","seq29850","devtools.formatters.markup._LT_reference_GT_.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","devtools.formatters.markup/<circular-reference>","seq29858","devtools.formatters.markup._LT_reference_surrogate_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<native-reference>","reference","p1__29862#","devtools.formatters.state/set-prevent-recursion","devtools.formatters.markup/<header-expander>","devtools.formatters.state/reset-depth-limits","devtools.formatters.markup/<cljs-land>","seq29863","devtools.formatters.markup/<nil>","devtools.formatters.markup/<bool>","bool","devtools.formatters.markup/<keyword>","keyword","devtools.formatters.markup/<symbol>","symbol","devtools.formatters.markup/<number>","number","cljs.core/integer?","devtools.formatters.markup/<string>","string","dq","devtools.formatters.helpers/pref","re-nl","js/RegExp","nl-marker","inline-string","max-inline-string-size","quote-string","s","should-abbreviate?","cljs.core/count","abbreviated-string","devtools.formatters.helpers/abbreviate-long-string","abbreviated-string-markup","string-with-nl-markers","details-markup","devtools.formatters.markup/<preview>","devtools.formatters.markup.print_via_writer.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<body>","markup","devtools.formatters.markup/<aligned-body>","markups-lists","prepend-li-tag","line","aligned-lines","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","devtools.formatters.markup/<standard-body>","p__29869","vec__29870","seq29867","G__29868","no-margin?","ol-tag","li-tag","lines-markups","devtools.formatters.markup/<standard-body-reference>","o","devtools.formatters.markup/<index>","devtools.formatters.markup/body-line","index","index-markup","value-markup","devtools.formatters.markup/prepare-body-lines","data","starting-index","work","lines","cljs.core/empty?","cljs.core/rest","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","devtools.formatters.markup/body-lines","seq","max-number-body-items","chunk","cljs.core.take.cljs$core$IFn$_invoke$arity$2","rest","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","continue?","more-label-markup","more-markup","devtools.formatters.markup/<details>","has-continuation?","body-markup","devtools.formatters.markup._LT_standard_body_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<list-details>","items","_opts","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/list","devtools.formatters.markup/<list>","p__29882","vec__29883","seq29879","G__29880","G__29881","max-count","opts","items-markups","more-count","more?","separator","or__3922__auto__","more-symbol","temp__5455__auto__","cljs.core/fn?","devtools.formatters.helpers/get-more-marker","preview-markup","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","default-details-fn","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","devtools.formatters.markup/<meta>","metadata","body-fn","devtools.formatters.markup/<meta-wrapper>","seq29889","G__29890","js/Error","devtools.formatters.markup/<function-details>","fn-obj","ns","_name","arities","prefix","devtools.formatters.helpers/wrap-arity","make-arity-markup-list","arity","arities-markupts-lists","ns-markups-list","native-markups-list","devtools.formatters.markup/<arities>","multi-arity?","devtools.formatters.markup/<function>","vec__29894","name","devtools.munging/parse-fn-info","lambda?","spacer-symbol","rest-symbol","multi-arity-symbol","devtools.munging/extract-arities","arities-markup","name-markup","icon-markup","prefix-markup","details-fn","cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<type-basis-item>","basis-item","cljs.core/name","devtools.formatters.markup/<type-basis>","basis","item-markups","children-markups","devtools.formatters.markup/<type-details>","constructor-fn","ns-markup","basis-markup","native-markup","devtools.formatters.markup/<type>","p__29899","vec__29900","seq29897","G__29898","header-tag","vec__29903","devtools.munging/parse-constructor-info","details-markup-fn","devtools.formatters.markup/<standalone-type>","p__29911","vec__29912","seq29909","G__29910","devtools.formatters.markup._LT_type_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<protocol-method-arity>","arity-fn","devtools.formatters.markup/<protocol-method-arities-details>","fns","devtools.formatters.markup/<protocol-method-arities>","p__29920","vec__29921","seq29918","G__29919","max-fns","aritites-markups","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devtools.formatters.markup/<protocol-method>","devtools.formatters.markup/<protocol-details>","obj","selector","_fast?","protocol-obj","devtools.munging/get-protocol-object","methods","devtools.munging/collect-protocol-methods","methods-markups","p__29927","vec__29928","methods-markups-lists","devtools.formatters.markup/<protocol>","p__29934","vec__29935","seq29931","G__29932","G__29933","protocol","map__29938","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","fast?","devtools.formatters.markup/<more-protocols>","fake-protocol","devtools.formatters.markup._LT_protocol_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<protocols-list>","p__29946","vec__29947","seq29943","G__29944","G__29945","protocols","max-protocols","protocols-markups","devtools.formatters.markup._LT_list_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<field>","p1__29953#","devtools.formatters.markup._LT_surrogate_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.state/set-managed-print-level","devtools.formatters.markup/<fields-details-row>","field","vec__29954","devtools.formatters.markup/<fields>","p__29959","vec__29960","seq29957","G__29958","fields","max-fields","fields-markups","p__29963","vec__29964","devtools.formatters.markup/<fields-details>","devtools.munging/scan-protocols","has-protocols?","fields-markup","protocols-list-markup","devtools.formatters.markup/<instance>","vec__29970","devtools.formatters.helpers/get-constructor","_ns","custom-printing?","type-markup","devtools.formatters.helpers/fetch-fields-values","devtools.formatters.markup._LT_fields_GT_.cljs$core$IFn$_invoke$arity$variadic","fields-details-markup-fn","fields-preview-markup","custom-printing-markup","devtools.formatters.markup/<header>","devtools.formatters.markup._LT_cljs_land_GT_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.markup/<surrogate-header>","surrogate","devtools.formatters.templating/get-surrogate-header","devtools.formatters.templating/get-surrogate-target","devtools.formatters.markup/<surrogate-target>","target","cljs.core/seqable?","devtools.formatters.templating/get-surrogate-start-index","devtools.formatters.markup/<surrogate-body>","devtools.formatters.templating/get-surrogate-body","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","devtools.formatters.markup/<atomic>","devtools.formatters.helpers/should-render?","cljs.core/nil?","devtools.formatters.helpers/bool?","cljs.core/string?","cljs.core/number?","cljs.core/keyword?","cljs.core/symbol?","devtools.formatters.helpers/should-render-instance?","devtools.formatters.helpers/cljs-type?","devtools.formatters.helpers/cljs-function?","devtools.formatters.markup/*markup-db*","cljs.core/PersistentHashMap"],"sourcesContent":["(ns devtools.formatters.markup\n  (:require-macros [devtools.formatters.markup :refer [emit-markup-db]])\n  (:require [devtools.formatters.helpers :refer [bool? cljs-function? cljs-type? cljs-instance?\n                                                 should-render-instance? expandable? abbreviated?\n                                                 abbreviate-long-string get-constructor pref should-render?\n                                                 get-more-marker wrap-arity fetch-fields-values]]\n            [devtools.formatters.printing :refer [managed-print-via-writer managed-print-via-protocol]]\n            [devtools.formatters.state :refer [set-prevent-recursion set-managed-print-level reset-depth-limits]]\n            [devtools.formatters.templating :refer [get-surrogate-body\n                                                    get-surrogate-target\n                                                    get-surrogate-start-index\n                                                    get-surrogate-header]]\n            [devtools.munging :as munging]))\n\n; reusable hiccup-like templates\n\n(declare get-markup-db)\n\n; -- cljs printing  ---------------------------------------------------------------------------------------------------------\n\n(defn print-with [method value tag & [max-level]]\n  (let [job-fn #(method value tag (get-markup-db))]\n    (if (some? max-level)\n      (binding [*print-level* (inc max-level)]                                                                                ; when printing do at most print-level deep recursion\n        (job-fn))\n      (job-fn))))\n\n(defn print-via-writer [value tag & [max-level]]\n  (print-with managed-print-via-writer value tag max-level))\n\n(defn print-via-protocol [value tag & [max-level]]\n  (print-with managed-print-via-protocol value tag max-level))\n\n; -- references -------------------------------------------------------------------------------------------------------------\n\n(defn <expandable> [& children]\n  (let [inner-markup (concat [:expandable-inner-tag] children)]\n    [:expandable-tag :expandable-symbol inner-markup]))\n\n(defn <raw-surrogate> [& args]\n  (concat [\"surrogate\"] args))\n\n(defn <surrogate> [& [object header body start-index]]\n  (let [header (if (some? body) (<expandable> header) header)]\n    (<raw-surrogate> object header body start-index)))\n\n(defn <reference> [& args]\n  (concat [\"reference\"] args))\n\n(defn <reference-surrogate> [& args]\n  (<reference> (apply <surrogate> args)))\n\n(defn <circular-reference> [& children]\n  (<reference-surrogate> nil [:circular-reference-tag :circular-ref-icon] (concat [:circular-reference-body-tag] children)))\n\n(defn <native-reference> [object]\n  (let [reference (<reference> object #(set-prevent-recursion % true))]\n    [:native-reference-wrapper-tag :native-reference-background [:native-reference-tag reference]]))\n\n(defn <header-expander> [object]\n  (<reference> (<raw-surrogate> object :header-expander-symbol :target) reset-depth-limits))\n\n; -- simple markup ----------------------------------------------------------------------------------------------------------\n\n(defn <cljs-land> [& children]\n  (concat [:cljs-land-tag] children))\n\n(defn <nil> []\n  ; this code is duplicated in templating.cljs, see make-reference\n  [:nil-tag :nil-label])\n\n(defn <bool> [bool]\n  [:bool-tag (str bool)])\n\n(defn <keyword> [keyword]\n  [:keyword-tag (str keyword)])\n\n(defn <symbol> [symbol]\n  [:symbol-tag (str symbol)])\n\n(defn <number> [number]\n  (if (integer? number)\n    [:integer-tag number]\n    [:float-tag number]))\n\n; -- string markup ----------------------------------------------------------------------------------------------------------\n\n(defn <string> [string]\n  (let [dq (pref :dq)\n        re-nl (js/RegExp. \"\\n\" \"g\")\n        nl-marker (pref :new-line-string-replacer)\n        inline-string (.replace string re-nl nl-marker)\n        max-inline-string-size (+ (pref :string-prefix-limit) (pref :string-postfix-limit))\n        quote-string (fn [s] (str dq s dq))\n        should-abbreviate? (> (count inline-string) max-inline-string-size)]\n    (if should-abbreviate?\n      (let [abbreviated-string (abbreviate-long-string inline-string\n                                                       (pref :string-abbreviation-marker)\n                                                       (pref :string-prefix-limit)\n                                                       (pref :string-postfix-limit))\n            abbreviated-string-markup [:string-tag (quote-string abbreviated-string)]\n            string-with-nl-markers (.replace string re-nl (str nl-marker \"\\n\"))\n            details-markup [:expanded-string-tag string-with-nl-markers]]\n        (<reference-surrogate> string abbreviated-string-markup details-markup))\n      [:string-tag (quote-string inline-string)])))\n\n; -- generic preview markup -------------------------------------------------------------------------------------------------\n\n(defn <preview> [value]\n  (print-via-writer value :header-tag (pref :max-print-level)))\n\n; -- body-related templates -------------------------------------------------------------------------------------------------\n\n(defn <body> [markup]\n  [:body-tag markup])\n\n(defn <aligned-body> [markups-lists]\n  (let [prepend-li-tag (fn [line]\n                         (if line\n                           (concat [:aligned-li-tag] line)))\n        aligned-lines (keep prepend-li-tag markups-lists)]\n    (<body> (concat [:standard-ol-no-margin-tag] aligned-lines))))\n\n(defn <standard-body> [markups-lists & [no-margin?]]\n  (let [ol-tag (if no-margin? :standard-ol-no-margin-tag :standard-ol-tag)\n        li-tag (if no-margin? :standard-li-no-margin-tag :standard-li-tag)\n        prepend-li-tag (fn [line]\n                         (if line\n                           (concat [li-tag] line)))\n        lines-markups (keep prepend-li-tag markups-lists)]\n    (concat [ol-tag] lines-markups)))\n\n(defn <standard-body-reference> [o]\n  (<standard-body> [[(<reference> o)]]))\n\n; -- generic details markup -------------------------------------------------------------------------------------------------\n\n(defn <index> [value]\n  [:index-tag value :line-index-separator])\n\n(defn- body-line [index value]\n  (let [index-markup (<index> index)\n        value-markup (print-via-writer value :item-tag (pref :body-line-max-print-level))]\n    [index-markup value-markup]))\n\n; TODO: this fn is screaming for rewrite\n(defn- prepare-body-lines [data starting-index]\n  (loop [work data\n         index starting-index\n         lines []]\n    (if (empty? work)\n      lines\n      (recur (rest work) (inc index) (conj lines (body-line index (first work)))))))\n\n(defn- body-lines [value starting-index]\n  (let [seq (seq value)\n        max-number-body-items (pref :max-number-body-items)\n        chunk (take max-number-body-items seq)\n        rest (drop max-number-body-items seq)\n        lines (prepare-body-lines chunk starting-index)\n        continue? (not (empty? (take 1 rest)))]\n    (if-not continue?\n      lines\n      (let [more-label-markup [:body-items-more-tag :body-items-more-label]\n            start-index (+ starting-index max-number-body-items)\n            more-markup (<reference-surrogate> rest more-label-markup :target start-index)]\n        (conj lines [more-markup])))))\n\n(defn <details> [value starting-index]\n  (let [has-continuation? (pos? starting-index)\n        body-markup (<standard-body> (body-lines value starting-index) has-continuation?)]\n    (if has-continuation?\n      body-markup\n      (<body> body-markup))))\n\n; -- generic list template --------------------------------------------------------------------------------------------------\n\n(defn <list-details> [items _opts]\n  (<aligned-body> (map list items)))\n\n(defn <list> [items max-count & [opts]]\n  (let [items-markups (take max-count items)\n        more-count (- (count items) max-count)\n        more? (pos? more-count)\n        separator (or (:separator opts) :list-separator)\n        more-symbol (if more?\n                      (if-let [more-symbol (:more-symbol opts)]\n                        (if (fn? more-symbol)\n                          (more-symbol more-count)\n                          more-symbol)\n                        (get-more-marker more-count)))\n        preview-markup (concat [(or (:tag opts) :list-tag)\n                                (or (:open-symbol opts) :list-open-symbol)]\n                               (interpose separator items-markups)\n                               (if more? [separator more-symbol])\n                               [(or (:close-symbol opts) :list-close-symbol)])]\n    (if more?\n      (let [details-markup (:details opts)\n            default-details-fn (partial <list-details> items opts)]\n        (<reference-surrogate> nil preview-markup (or details-markup default-details-fn)))\n      preview-markup)))\n\n; -- mete-related markup ----------------------------------------------------------------------------------------------------\n\n(defn <meta> [metadata]\n  (let [body-fn (fn [] [:meta-body-tag (<preview> metadata)])\n        header [:meta-header-tag \"meta\"]]\n    [:meta-reference-tag (<reference-surrogate> metadata header body-fn)]))                                                   ; body must be lazy, see #35\n\n(defn <meta-wrapper> [metadata & children]\n  (concat [:meta-wrapper-tag] children [(<meta> metadata)]))\n\n; -- function markup --------------------------------------------------------------------------------------------------------\n\n(defn <function-details> [fn-obj ns _name arities prefix]\n  {:pre [(fn? fn-obj)]}\n  (let [arities (map wrap-arity arities)\n        make-arity-markup-list (fn [arity]\n                                 [[:fn-multi-arity-args-indent-tag prefix]\n                                  [:fn-args-tag arity]])\n        arities-markupts-lists (if (> (count arities) 1) (map make-arity-markup-list arities))\n        ns-markups-list (if-not (empty? ns) [:ns-icon [:fn-ns-name-tag ns]])\n        native-markups-list [:native-icon (<native-reference> fn-obj)]]\n    (<aligned-body> (concat arities-markupts-lists [ns-markups-list native-markups-list]))))\n\n(defn <arities> [arities]\n  (let [multi-arity? (> (count arities) 1)]\n    [:fn-args-tag (wrap-arity (if multi-arity?\n                                (pref :multi-arity-symbol)\n                                (first arities)))]))\n\n(defn <function> [fn-obj]\n  {:pre [(fn? fn-obj)]}\n  (let [[ns name] (munging/parse-fn-info fn-obj)\n        lambda? (empty? name)\n        spacer-symbol (pref :spacer)\n        rest-symbol (pref :rest-symbol)\n        multi-arity-symbol (pref :multi-arity-symbol)\n        arities (munging/extract-arities fn-obj true spacer-symbol multi-arity-symbol rest-symbol)\n        arities-markup (<arities> arities)\n        name-markup (if-not lambda? [:fn-name-tag name])\n        icon-markup (if lambda? :lambda-icon :fn-icon)\n        prefix-markup [:fn-prefix-tag icon-markup name-markup]\n        preview-markup [:fn-header-tag prefix-markup arities-markup]\n        details-fn (partial <function-details> fn-obj ns name arities prefix-markup)]\n    (<reference-surrogate> fn-obj preview-markup details-fn)))\n\n; -- type markup ------------------------------------------------------------------------------------------------------------\n\n(defn <type-basis-item> [basis-item]\n  [:type-basis-item-tag (name basis-item)])\n\n(defn <type-basis> [basis]\n  (let [item-markups (map <type-basis-item> basis)\n        children-markups (interpose :type-basis-item-separator item-markups)]\n    (concat [:type-basis-tag] children-markups)))\n\n(defn <type-details> [constructor-fn ns _name basis]\n  (let [ns-markup (if-not (empty? ns) [:ns-icon [:fn-ns-name-tag ns]])\n        basis-markup (if (empty? basis)\n                       [:empty-basis-symbol]\n                       [:basis-icon (<type-basis> basis)])\n        native-markup [:native-icon (<native-reference> constructor-fn)]]\n    (<aligned-body> [basis-markup ns-markup native-markup])))\n\n(defn <type> [constructor-fn & [header-tag]]\n  (let [[ns name basis] (munging/parse-constructor-info constructor-fn)\n        name-markup [:type-name-tag name]\n        preview-markup [(or header-tag :type-header-tag) :type-symbol name-markup]\n        details-markup-fn (partial <type-details> constructor-fn ns name basis)]\n    [:type-wrapper-tag\n     :type-header-background\n     [:type-ref-tag (<reference-surrogate> constructor-fn preview-markup details-markup-fn)]]))\n\n(defn <standalone-type> [constructor-fn & [header-tag]]\n  [:standalone-type-tag (<type> constructor-fn header-tag)])\n\n; -- protocols markup -------------------------------------------------------------------------------------------------------\n\n(defn <protocol-method-arity> [arity-fn]\n  (<reference> arity-fn))\n\n(defn <protocol-method-arities-details> [fns]\n  (<aligned-body> (map <protocol-method-arity> fns)))\n\n(defn <protocol-method-arities> [fns & [max-fns]]\n  (let [max-fns (or max-fns (pref :max-protocol-method-arities-list))\n        more? (> (count fns) max-fns)\n        aritites-markups (map <protocol-method-arity> (take max-fns fns))\n        preview-markup (concat [:protocol-method-arities-header-tag :protocol-method-arities-header-open-symbol]\n                               (interpose :protocol-method-arities-list-header-separator aritites-markups)\n                               (if more? [:protocol-method-arities-more-symbol])\n                               [:protocol-method-arities-header-close-symbol])]\n    (if more?\n      (let [details-markup-fn (partial <protocol-method-arities-details> fns)]\n        (<reference-surrogate> nil preview-markup details-markup-fn))\n      preview-markup)))\n\n(defn <protocol-method> [name arities]\n  [:protocol-method-tag\n   :method-icon\n   [:protocol-method-name-tag name]\n   (<protocol-method-arities> arities)])\n\n(defn <protocol-details> [obj ns _name selector _fast?]\n  (let [protocol-obj (munging/get-protocol-object selector)\n        ns-markups-list (if-not (empty? ns) [:ns-icon [:protocol-ns-name-tag ns]])\n        native-markups-list (if (some? protocol-obj) [:native-icon (<native-reference> protocol-obj)])\n        methods (munging/collect-protocol-methods obj selector)\n        methods-markups (map (fn [[name arities]] (<protocol-method> name arities)) methods)\n        methods-markups-lists (map list methods-markups)]\n    (<aligned-body> (concat methods-markups-lists [ns-markups-list native-markups-list]))))\n\n(defn <protocol> [obj protocol & [tag]]\n  (let [{:keys [ns name selector fast?]} protocol\n        preview-markup [(or tag :protocol-name-tag) name]\n        prefix-markup [(if fast? :fast-protocol-tag :slow-protocol-tag) :protocol-background]]\n    (if (some? obj)\n      (let [details-markup-fn (partial <protocol-details> obj ns name selector fast?)]\n        (conj prefix-markup (<reference-surrogate> obj preview-markup details-markup-fn)))\n      (conj prefix-markup preview-markup))))\n\n(defn <more-protocols> [more-count]\n  (let [fake-protocol {:name (get-more-marker more-count)}]\n    (<protocol> nil fake-protocol :protocol-more-tag)))\n\n(defn <protocols-list> [obj protocols & [max-protocols]]\n  (let [max-protocols (or max-protocols (pref :max-list-protocols))\n        protocols-markups (map (partial <protocol> obj) protocols)]\n    (<list> protocols-markups max-protocols {:tag          :protocols-header-tag\n                                             :open-symbol  :protocols-list-open-symbol\n                                             :close-symbol :protocols-list-close-symbol\n                                             :separator    :header-protocol-separator\n                                             :more-symbol  <more-protocols>})))\n\n; -- instance fields markup -------------------------------------------------------------------------------------------------\n\n(defn <field> [name value]\n  [:header-field-tag\n   [:header-field-name-tag (str name)]\n   :header-field-value-spacer\n   [:header-field-value-tag (<reference> (<surrogate> value) #(set-managed-print-level % 1))]\n   :header-field-separator])\n\n(defn <fields-details-row> [field]\n  (let [[name value] field]\n    [:body-field-tr-tag\n     [:body-field-td1-tag\n      :body-field-symbol\n      [:body-field-name-tag (str name)]]\n     [:body-field-td2-tag\n      :body-field-value-spacer]\n     [:body-field-td3-tag\n      [:body-field-value-tag (<reference-surrogate> value)]]]))\n\n(defn <fields> [fields & [max-fields]]\n  (if (zero? (count fields))\n    [:fields-header-tag :fields-header-no-fields-symbol]\n    (let [max-fields (or max-fields (pref :max-instance-header-fields))\n          more? (> (count fields) max-fields)\n          fields-markups (map (fn [[name value]] (<field> name value)) (take max-fields fields))]\n      (concat [:fields-header-tag\n               :fields-header-open-symbol]\n              fields-markups\n              [(if more? :more-fields-symbol)\n               :fields-header-close-symbol]))))\n\n(defn <fields-details> [fields obj]\n  (let [protocols (munging/scan-protocols obj)\n        has-protocols? (not (empty? protocols))\n        fields-markup (if-not (zero? (count fields))\n                        [:fields-icon (concat [:instance-body-fields-table-tag] (map <fields-details-row> fields))])\n        protocols-list-markup (if has-protocols? [:protocols-icon (<protocols-list> obj protocols)])\n        native-markup [:native-icon (<native-reference> obj)]]\n    (<aligned-body> [fields-markup protocols-list-markup native-markup])))\n\n; -- type/record instance markup --------------------------------------------------------------------------------------------\n\n(defn <instance> [value]\n  (let [constructor-fn (get-constructor value)\n        [_ns _name basis] (munging/parse-constructor-info constructor-fn)\n        custom-printing? (implements? IPrintWithWriter value)\n        type-markup (<type> constructor-fn :instance-type-header-tag)\n        fields (fetch-fields-values value basis)\n        fields-markup (<fields> fields (if custom-printing? 0))\n        fields-details-markup-fn #(<fields-details> fields value)\n        fields-preview-markup [:instance-value-tag (<reference-surrogate> value fields-markup fields-details-markup-fn)]\n        custom-printing-markup (if custom-printing?\n                                 [:instance-custom-printing-wrapper-tag\n                                  :instance-custom-printing-background\n                                  (print-via-protocol value :instance-custom-printing-tag)])]\n    [:instance-header-tag\n     :instance-header-background\n     fields-preview-markup\n     custom-printing-markup\n     type-markup]))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn <header> [value]\n  (<cljs-land> (<preview> value)))\n\n(defn <surrogate-header> [surrogate]\n  (or (get-surrogate-header surrogate)\n      (<preview> (get-surrogate-target surrogate))))\n\n(defn <surrogate-target> [surrogate]\n  (let [target (get-surrogate-target surrogate)]\n    (if (seqable? target)\n      (let [starting-index (get-surrogate-start-index surrogate)]\n        (<details> target starting-index))\n      (<standard-body-reference> target))))\n\n(defn <surrogate-body> [surrogate]\n  (if-let [body (get-surrogate-body surrogate)]\n    (if (= :target body)\n      (<surrogate-target> surrogate)\n      body)))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn <atomic> [value]\n  (cond\n    (should-render? :render-nils value nil?) (<nil>)\n    (should-render? :render-bools value bool?) (<bool> value)\n    (should-render? :render-strings value string?) (<string> value)\n    (should-render? :render-numbers value number?) (<number> value)\n    (should-render? :render-keywords value keyword?) (<keyword> value)\n    (should-render? :render-symbols value symbol?) (<symbol> value)\n    (should-render? :render-instances value should-render-instance?) (<instance> value)\n    (should-render? :render-types value cljs-type?) (<standalone-type> value)\n    (should-render? :render-functions value cljs-function?) (<function> value)))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(def ^:dynamic *markup-db*)\n\n; emit-markup-db macro will generate a map of all markup <functions> in this namespace:\n;\n;    {:atomic              <atomic>\n;     :reference           <reference>\n;     :native-reference    <native-reference>\n;     ...}\n;\n; we generate it only on first call and cache it in *markup-db*\n; emitting markup db statically into def would prevent dead-code elimination\n;\n(defn get-markup-db []\n  (if (nil? *markup-db*)\n    (set! *markup-db* (emit-markup-db)))\n  *markup-db*)\n"]}